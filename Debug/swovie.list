
swovie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  80000000  80000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a6c  800001c4  800001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  80004c30  80004c30  00014c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  80004c50  80004c50  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  80004c50  80004c50  00014c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  80004c58  80004c58  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  80004c58  80004c58  00014c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  80004c5c  80004c5c  00014c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  80004c60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  2000000c  80004c6c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00002404  2000039c  80004c6c  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dbf2  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e42  00000000  00000000  0002dc71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  0002fab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f7  00000000  00000000  00030760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000210ea  00000000  00000000  00031157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ee7a  00000000  00000000  00052241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cce24  00000000  00000000  000610bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003580  00000000  00000000  0012dee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00131460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

800001c4 <__do_global_dtors_aux>:
800001c4:	b510      	push	{r4, lr}
800001c6:	4c05      	ldr	r4, [pc, #20]	; (800001dc <__do_global_dtors_aux+0x18>)
800001c8:	7823      	ldrb	r3, [r4, #0]
800001ca:	b933      	cbnz	r3, 800001da <__do_global_dtors_aux+0x16>
800001cc:	4b04      	ldr	r3, [pc, #16]	; (800001e0 <__do_global_dtors_aux+0x1c>)
800001ce:	b113      	cbz	r3, 800001d6 <__do_global_dtors_aux+0x12>
800001d0:	4804      	ldr	r0, [pc, #16]	; (800001e4 <__do_global_dtors_aux+0x20>)
800001d2:	f3af 8000 	nop.w
800001d6:	2301      	movs	r3, #1
800001d8:	7023      	strb	r3, [r4, #0]
800001da:	bd10      	pop	{r4, pc}
800001dc:	2000000c 	.word	0x2000000c
800001e0:	00000000 	.word	0x00000000
800001e4:	80004c18 	.word	0x80004c18

800001e8 <frame_dummy>:
800001e8:	b508      	push	{r3, lr}
800001ea:	4b03      	ldr	r3, [pc, #12]	; (800001f8 <frame_dummy+0x10>)
800001ec:	b11b      	cbz	r3, 800001f6 <frame_dummy+0xe>
800001ee:	4903      	ldr	r1, [pc, #12]	; (800001fc <frame_dummy+0x14>)
800001f0:	4803      	ldr	r0, [pc, #12]	; (80000200 <frame_dummy+0x18>)
800001f2:	f3af 8000 	nop.w
800001f6:	bd08      	pop	{r3, pc}
800001f8:	00000000 	.word	0x00000000
800001fc:	20000010 	.word	0x20000010
80000200:	80004c18 	.word	0x80004c18

80000204 <__aeabi_uldivmod>:
80000204:	b953      	cbnz	r3, 8000021c <__aeabi_uldivmod+0x18>
80000206:	b94a      	cbnz	r2, 8000021c <__aeabi_uldivmod+0x18>
80000208:	2900      	cmp	r1, #0
8000020a:	bf08      	it	eq
8000020c:	2800      	cmpeq	r0, #0
8000020e:	bf1c      	itt	ne
80000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
80000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
80000218:	f000 b970 	b.w	800004fc <__aeabi_idiv0>
8000021c:	f1ad 0c08 	sub.w	ip, sp, #8
80000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
80000224:	f000 f806 	bl	80000234 <__udivmoddi4>
80000228:	f8dd e004 	ldr.w	lr, [sp, #4]
8000022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
80000230:	b004      	add	sp, #16
80000232:	4770      	bx	lr

80000234 <__udivmoddi4>:
80000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
80000238:	9e08      	ldr	r6, [sp, #32]
8000023a:	460d      	mov	r5, r1
8000023c:	4604      	mov	r4, r0
8000023e:	460f      	mov	r7, r1
80000240:	2b00      	cmp	r3, #0
80000242:	d14a      	bne.n	800002da <__udivmoddi4+0xa6>
80000244:	428a      	cmp	r2, r1
80000246:	4694      	mov	ip, r2
80000248:	d965      	bls.n	80000316 <__udivmoddi4+0xe2>
8000024a:	fab2 f382 	clz	r3, r2
8000024e:	b143      	cbz	r3, 80000262 <__udivmoddi4+0x2e>
80000250:	fa02 fc03 	lsl.w	ip, r2, r3
80000254:	f1c3 0220 	rsb	r2, r3, #32
80000258:	409f      	lsls	r7, r3
8000025a:	fa20 f202 	lsr.w	r2, r0, r2
8000025e:	4317      	orrs	r7, r2
80000260:	409c      	lsls	r4, r3
80000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
80000266:	fa1f f58c 	uxth.w	r5, ip
8000026a:	fbb7 f1fe 	udiv	r1, r7, lr
8000026e:	0c22      	lsrs	r2, r4, #16
80000270:	fb0e 7711 	mls	r7, lr, r1, r7
80000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
80000278:	fb01 f005 	mul.w	r0, r1, r5
8000027c:	4290      	cmp	r0, r2
8000027e:	d90a      	bls.n	80000296 <__udivmoddi4+0x62>
80000280:	eb1c 0202 	adds.w	r2, ip, r2
80000284:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
80000288:	f080 811c 	bcs.w	800004c4 <__udivmoddi4+0x290>
8000028c:	4290      	cmp	r0, r2
8000028e:	f240 8119 	bls.w	800004c4 <__udivmoddi4+0x290>
80000292:	3902      	subs	r1, #2
80000294:	4462      	add	r2, ip
80000296:	1a12      	subs	r2, r2, r0
80000298:	b2a4      	uxth	r4, r4
8000029a:	fbb2 f0fe 	udiv	r0, r2, lr
8000029e:	fb0e 2210 	mls	r2, lr, r0, r2
800002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
800002a6:	fb00 f505 	mul.w	r5, r0, r5
800002aa:	42a5      	cmp	r5, r4
800002ac:	d90a      	bls.n	800002c4 <__udivmoddi4+0x90>
800002ae:	eb1c 0404 	adds.w	r4, ip, r4
800002b2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
800002b6:	f080 8107 	bcs.w	800004c8 <__udivmoddi4+0x294>
800002ba:	42a5      	cmp	r5, r4
800002bc:	f240 8104 	bls.w	800004c8 <__udivmoddi4+0x294>
800002c0:	4464      	add	r4, ip
800002c2:	3802      	subs	r0, #2
800002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
800002c8:	1b64      	subs	r4, r4, r5
800002ca:	2100      	movs	r1, #0
800002cc:	b11e      	cbz	r6, 800002d6 <__udivmoddi4+0xa2>
800002ce:	40dc      	lsrs	r4, r3
800002d0:	2300      	movs	r3, #0
800002d2:	e9c6 4300 	strd	r4, r3, [r6]
800002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
800002da:	428b      	cmp	r3, r1
800002dc:	d908      	bls.n	800002f0 <__udivmoddi4+0xbc>
800002de:	2e00      	cmp	r6, #0
800002e0:	f000 80ed 	beq.w	800004be <__udivmoddi4+0x28a>
800002e4:	2100      	movs	r1, #0
800002e6:	e9c6 0500 	strd	r0, r5, [r6]
800002ea:	4608      	mov	r0, r1
800002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
800002f0:	fab3 f183 	clz	r1, r3
800002f4:	2900      	cmp	r1, #0
800002f6:	d149      	bne.n	8000038c <__udivmoddi4+0x158>
800002f8:	42ab      	cmp	r3, r5
800002fa:	d302      	bcc.n	80000302 <__udivmoddi4+0xce>
800002fc:	4282      	cmp	r2, r0
800002fe:	f200 80f8 	bhi.w	800004f2 <__udivmoddi4+0x2be>
80000302:	1a84      	subs	r4, r0, r2
80000304:	eb65 0203 	sbc.w	r2, r5, r3
80000308:	2001      	movs	r0, #1
8000030a:	4617      	mov	r7, r2
8000030c:	2e00      	cmp	r6, #0
8000030e:	d0e2      	beq.n	800002d6 <__udivmoddi4+0xa2>
80000310:	e9c6 4700 	strd	r4, r7, [r6]
80000314:	e7df      	b.n	800002d6 <__udivmoddi4+0xa2>
80000316:	b902      	cbnz	r2, 8000031a <__udivmoddi4+0xe6>
80000318:	deff      	udf	#255	; 0xff
8000031a:	fab2 f382 	clz	r3, r2
8000031e:	2b00      	cmp	r3, #0
80000320:	f040 8090 	bne.w	80000444 <__udivmoddi4+0x210>
80000324:	1a8a      	subs	r2, r1, r2
80000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
8000032a:	fa1f fe8c 	uxth.w	lr, ip
8000032e:	2101      	movs	r1, #1
80000330:	fbb2 f5f7 	udiv	r5, r2, r7
80000334:	fb07 2015 	mls	r0, r7, r5, r2
80000338:	0c22      	lsrs	r2, r4, #16
8000033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
8000033e:	fb0e f005 	mul.w	r0, lr, r5
80000342:	4290      	cmp	r0, r2
80000344:	d908      	bls.n	80000358 <__udivmoddi4+0x124>
80000346:	eb1c 0202 	adds.w	r2, ip, r2
8000034a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
8000034e:	d202      	bcs.n	80000356 <__udivmoddi4+0x122>
80000350:	4290      	cmp	r0, r2
80000352:	f200 80cb 	bhi.w	800004ec <__udivmoddi4+0x2b8>
80000356:	4645      	mov	r5, r8
80000358:	1a12      	subs	r2, r2, r0
8000035a:	b2a4      	uxth	r4, r4
8000035c:	fbb2 f0f7 	udiv	r0, r2, r7
80000360:	fb07 2210 	mls	r2, r7, r0, r2
80000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
80000368:	fb0e fe00 	mul.w	lr, lr, r0
8000036c:	45a6      	cmp	lr, r4
8000036e:	d908      	bls.n	80000382 <__udivmoddi4+0x14e>
80000370:	eb1c 0404 	adds.w	r4, ip, r4
80000374:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
80000378:	d202      	bcs.n	80000380 <__udivmoddi4+0x14c>
8000037a:	45a6      	cmp	lr, r4
8000037c:	f200 80bb 	bhi.w	800004f6 <__udivmoddi4+0x2c2>
80000380:	4610      	mov	r0, r2
80000382:	eba4 040e 	sub.w	r4, r4, lr
80000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
8000038a:	e79f      	b.n	800002cc <__udivmoddi4+0x98>
8000038c:	f1c1 0720 	rsb	r7, r1, #32
80000390:	408b      	lsls	r3, r1
80000392:	fa22 fc07 	lsr.w	ip, r2, r7
80000396:	ea4c 0c03 	orr.w	ip, ip, r3
8000039a:	fa05 f401 	lsl.w	r4, r5, r1
8000039e:	fa20 f307 	lsr.w	r3, r0, r7
800003a2:	40fd      	lsrs	r5, r7
800003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
800003a8:	4323      	orrs	r3, r4
800003aa:	fbb5 f8f9 	udiv	r8, r5, r9
800003ae:	fa1f fe8c 	uxth.w	lr, ip
800003b2:	fb09 5518 	mls	r5, r9, r8, r5
800003b6:	0c1c      	lsrs	r4, r3, #16
800003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
800003bc:	fb08 f50e 	mul.w	r5, r8, lr
800003c0:	42a5      	cmp	r5, r4
800003c2:	fa02 f201 	lsl.w	r2, r2, r1
800003c6:	fa00 f001 	lsl.w	r0, r0, r1
800003ca:	d90b      	bls.n	800003e4 <__udivmoddi4+0x1b0>
800003cc:	eb1c 0404 	adds.w	r4, ip, r4
800003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
800003d4:	f080 8088 	bcs.w	800004e8 <__udivmoddi4+0x2b4>
800003d8:	42a5      	cmp	r5, r4
800003da:	f240 8085 	bls.w	800004e8 <__udivmoddi4+0x2b4>
800003de:	f1a8 0802 	sub.w	r8, r8, #2
800003e2:	4464      	add	r4, ip
800003e4:	1b64      	subs	r4, r4, r5
800003e6:	b29d      	uxth	r5, r3
800003e8:	fbb4 f3f9 	udiv	r3, r4, r9
800003ec:	fb09 4413 	mls	r4, r9, r3, r4
800003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
800003f4:	fb03 fe0e 	mul.w	lr, r3, lr
800003f8:	45a6      	cmp	lr, r4
800003fa:	d908      	bls.n	8000040e <__udivmoddi4+0x1da>
800003fc:	eb1c 0404 	adds.w	r4, ip, r4
80000400:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
80000404:	d26c      	bcs.n	800004e0 <__udivmoddi4+0x2ac>
80000406:	45a6      	cmp	lr, r4
80000408:	d96a      	bls.n	800004e0 <__udivmoddi4+0x2ac>
8000040a:	3b02      	subs	r3, #2
8000040c:	4464      	add	r4, ip
8000040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
80000412:	fba3 9502 	umull	r9, r5, r3, r2
80000416:	eba4 040e 	sub.w	r4, r4, lr
8000041a:	42ac      	cmp	r4, r5
8000041c:	46c8      	mov	r8, r9
8000041e:	46ae      	mov	lr, r5
80000420:	d356      	bcc.n	800004d0 <__udivmoddi4+0x29c>
80000422:	d053      	beq.n	800004cc <__udivmoddi4+0x298>
80000424:	b156      	cbz	r6, 8000043c <__udivmoddi4+0x208>
80000426:	ebb0 0208 	subs.w	r2, r0, r8
8000042a:	eb64 040e 	sbc.w	r4, r4, lr
8000042e:	fa04 f707 	lsl.w	r7, r4, r7
80000432:	40ca      	lsrs	r2, r1
80000434:	40cc      	lsrs	r4, r1
80000436:	4317      	orrs	r7, r2
80000438:	e9c6 7400 	strd	r7, r4, [r6]
8000043c:	4618      	mov	r0, r3
8000043e:	2100      	movs	r1, #0
80000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
80000444:	f1c3 0120 	rsb	r1, r3, #32
80000448:	fa02 fc03 	lsl.w	ip, r2, r3
8000044c:	fa20 f201 	lsr.w	r2, r0, r1
80000450:	fa25 f101 	lsr.w	r1, r5, r1
80000454:	409d      	lsls	r5, r3
80000456:	432a      	orrs	r2, r5
80000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
8000045c:	fa1f fe8c 	uxth.w	lr, ip
80000460:	fbb1 f0f7 	udiv	r0, r1, r7
80000464:	fb07 1510 	mls	r5, r7, r0, r1
80000468:	0c11      	lsrs	r1, r2, #16
8000046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
8000046e:	fb00 f50e 	mul.w	r5, r0, lr
80000472:	428d      	cmp	r5, r1
80000474:	fa04 f403 	lsl.w	r4, r4, r3
80000478:	d908      	bls.n	8000048c <__udivmoddi4+0x258>
8000047a:	eb1c 0101 	adds.w	r1, ip, r1
8000047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
80000482:	d22f      	bcs.n	800004e4 <__udivmoddi4+0x2b0>
80000484:	428d      	cmp	r5, r1
80000486:	d92d      	bls.n	800004e4 <__udivmoddi4+0x2b0>
80000488:	3802      	subs	r0, #2
8000048a:	4461      	add	r1, ip
8000048c:	1b49      	subs	r1, r1, r5
8000048e:	b292      	uxth	r2, r2
80000490:	fbb1 f5f7 	udiv	r5, r1, r7
80000494:	fb07 1115 	mls	r1, r7, r5, r1
80000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
8000049c:	fb05 f10e 	mul.w	r1, r5, lr
800004a0:	4291      	cmp	r1, r2
800004a2:	d908      	bls.n	800004b6 <__udivmoddi4+0x282>
800004a4:	eb1c 0202 	adds.w	r2, ip, r2
800004a8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
800004ac:	d216      	bcs.n	800004dc <__udivmoddi4+0x2a8>
800004ae:	4291      	cmp	r1, r2
800004b0:	d914      	bls.n	800004dc <__udivmoddi4+0x2a8>
800004b2:	3d02      	subs	r5, #2
800004b4:	4462      	add	r2, ip
800004b6:	1a52      	subs	r2, r2, r1
800004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
800004bc:	e738      	b.n	80000330 <__udivmoddi4+0xfc>
800004be:	4631      	mov	r1, r6
800004c0:	4630      	mov	r0, r6
800004c2:	e708      	b.n	800002d6 <__udivmoddi4+0xa2>
800004c4:	4639      	mov	r1, r7
800004c6:	e6e6      	b.n	80000296 <__udivmoddi4+0x62>
800004c8:	4610      	mov	r0, r2
800004ca:	e6fb      	b.n	800002c4 <__udivmoddi4+0x90>
800004cc:	4548      	cmp	r0, r9
800004ce:	d2a9      	bcs.n	80000424 <__udivmoddi4+0x1f0>
800004d0:	ebb9 0802 	subs.w	r8, r9, r2
800004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
800004d8:	3b01      	subs	r3, #1
800004da:	e7a3      	b.n	80000424 <__udivmoddi4+0x1f0>
800004dc:	4645      	mov	r5, r8
800004de:	e7ea      	b.n	800004b6 <__udivmoddi4+0x282>
800004e0:	462b      	mov	r3, r5
800004e2:	e794      	b.n	8000040e <__udivmoddi4+0x1da>
800004e4:	4640      	mov	r0, r8
800004e6:	e7d1      	b.n	8000048c <__udivmoddi4+0x258>
800004e8:	46d0      	mov	r8, sl
800004ea:	e77b      	b.n	800003e4 <__udivmoddi4+0x1b0>
800004ec:	3d02      	subs	r5, #2
800004ee:	4462      	add	r2, ip
800004f0:	e732      	b.n	80000358 <__udivmoddi4+0x124>
800004f2:	4608      	mov	r0, r1
800004f4:	e70a      	b.n	8000030c <__udivmoddi4+0xd8>
800004f6:	4464      	add	r4, ip
800004f8:	3802      	subs	r0, #2
800004fa:	e742      	b.n	80000382 <__udivmoddi4+0x14e>

800004fc <__aeabi_idiv0>:
800004fc:	4770      	bx	lr
800004fe:	bf00      	nop

80000500 <Set_LED>:

uint8_t LED_Data[MAX_LED][4];
uint8_t LED_Mod[MAX_LED][4];  // for brightness

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
80000500:	b480      	push	{r7}
80000502:	b085      	sub	sp, #20
80000504:	af00      	add	r7, sp, #0
80000506:	60f8      	str	r0, [r7, #12]
80000508:	60b9      	str	r1, [r7, #8]
8000050a:	607a      	str	r2, [r7, #4]
8000050c:	603b      	str	r3, [r7, #0]
LED_Data[LEDnum][0] = LEDnum;
8000050e:	68fb      	ldr	r3, [r7, #12]
80000510:	b2d9      	uxtb	r1, r3
80000512:	4a11      	ldr	r2, [pc, #68]	; (80000558 <Set_LED+0x58>)
80000514:	68fb      	ldr	r3, [r7, #12]
80000516:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
LED_Data[LEDnum][1] = Green;
8000051a:	687b      	ldr	r3, [r7, #4]
8000051c:	b2d9      	uxtb	r1, r3
8000051e:	4a0e      	ldr	r2, [pc, #56]	; (80000558 <Set_LED+0x58>)
80000520:	68fb      	ldr	r3, [r7, #12]
80000522:	009b      	lsls	r3, r3, #2
80000524:	4413      	add	r3, r2
80000526:	460a      	mov	r2, r1
80000528:	705a      	strb	r2, [r3, #1]
LED_Data[LEDnum][2] = Red;
8000052a:	68bb      	ldr	r3, [r7, #8]
8000052c:	b2d9      	uxtb	r1, r3
8000052e:	4a0a      	ldr	r2, [pc, #40]	; (80000558 <Set_LED+0x58>)
80000530:	68fb      	ldr	r3, [r7, #12]
80000532:	009b      	lsls	r3, r3, #2
80000534:	4413      	add	r3, r2
80000536:	460a      	mov	r2, r1
80000538:	709a      	strb	r2, [r3, #2]
LED_Data[LEDnum][3] = Blue;
8000053a:	683b      	ldr	r3, [r7, #0]
8000053c:	b2d9      	uxtb	r1, r3
8000053e:	4a06      	ldr	r2, [pc, #24]	; (80000558 <Set_LED+0x58>)
80000540:	68fb      	ldr	r3, [r7, #12]
80000542:	009b      	lsls	r3, r3, #2
80000544:	4413      	add	r3, r2
80000546:	460a      	mov	r2, r1
80000548:	70da      	strb	r2, [r3, #3]
}
8000054a:	bf00      	nop
8000054c:	3714      	adds	r7, #20
8000054e:	46bd      	mov	sp, r7
80000550:	f85d 7b04 	ldr.w	r7, [sp], #4
80000554:	4770      	bx	lr
80000556:	bf00      	nop
80000558:	20000160 	.word	0x20000160

8000055c <WS2812_Send>:

// TODO: change 50 here which represents the number of bits passed that indicates the end of the data transmission
uint16_t pwmData[(24*MAX_LED)+50];

void WS2812_Send (void)
{
8000055c:	b580      	push	{r7, lr}
8000055e:	b086      	sub	sp, #24
80000560:	af00      	add	r7, sp, #0
uint32_t indx=0;
80000562:	2300      	movs	r3, #0
80000564:	617b      	str	r3, [r7, #20]
uint32_t color;

	for (int i= 0; i<MAX_LED; i++)
80000566:	2300      	movs	r3, #0
80000568:	613b      	str	r3, [r7, #16]
8000056a:	e036      	b.n	800005da <WS2812_Send+0x7e>
	{
	  #if USE_BRIGHTNESS
			color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
8000056c:	4a2c      	ldr	r2, [pc, #176]	; (80000620 <WS2812_Send+0xc4>)
8000056e:	693b      	ldr	r3, [r7, #16]
80000570:	009b      	lsls	r3, r3, #2
80000572:	4413      	add	r3, r2
80000574:	785b      	ldrb	r3, [r3, #1]
80000576:	041a      	lsls	r2, r3, #16
80000578:	4929      	ldr	r1, [pc, #164]	; (80000620 <WS2812_Send+0xc4>)
8000057a:	693b      	ldr	r3, [r7, #16]
8000057c:	009b      	lsls	r3, r3, #2
8000057e:	440b      	add	r3, r1
80000580:	789b      	ldrb	r3, [r3, #2]
80000582:	021b      	lsls	r3, r3, #8
80000584:	431a      	orrs	r2, r3
80000586:	4926      	ldr	r1, [pc, #152]	; (80000620 <WS2812_Send+0xc4>)
80000588:	693b      	ldr	r3, [r7, #16]
8000058a:	009b      	lsls	r3, r3, #2
8000058c:	440b      	add	r3, r1
8000058e:	78db      	ldrb	r3, [r3, #3]
80000590:	4313      	orrs	r3, r2
80000592:	607b      	str	r3, [r7, #4]
	  #else
			color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
	  #endif

			for (int i=23; i>=0; i--)
80000594:	2317      	movs	r3, #23
80000596:	60fb      	str	r3, [r7, #12]
80000598:	e019      	b.n	800005ce <WS2812_Send+0x72>
			{
				if (color&(1<<i))
8000059a:	2201      	movs	r2, #1
8000059c:	68fb      	ldr	r3, [r7, #12]
8000059e:	fa02 f303 	lsl.w	r3, r2, r3
800005a2:	461a      	mov	r2, r3
800005a4:	687b      	ldr	r3, [r7, #4]
800005a6:	4013      	ands	r3, r2
800005a8:	2b00      	cmp	r3, #0
800005aa:	d005      	beq.n	800005b8 <WS2812_Send+0x5c>
				{
					pwmData[indx] = 27.5;  // 2/3 of 90
800005ac:	4a1d      	ldr	r2, [pc, #116]	; (80000624 <WS2812_Send+0xc8>)
800005ae:	697b      	ldr	r3, [r7, #20]
800005b0:	211b      	movs	r1, #27
800005b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
800005b6:	e004      	b.n	800005c2 <WS2812_Send+0x66>
				}

				else pwmData[indx] = 72.5;  // 1/3 of 90
800005b8:	4a1a      	ldr	r2, [pc, #104]	; (80000624 <WS2812_Send+0xc8>)
800005ba:	697b      	ldr	r3, [r7, #20]
800005bc:	2148      	movs	r1, #72	; 0x48
800005be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				indx++;
800005c2:	697b      	ldr	r3, [r7, #20]
800005c4:	3301      	adds	r3, #1
800005c6:	617b      	str	r3, [r7, #20]
			for (int i=23; i>=0; i--)
800005c8:	68fb      	ldr	r3, [r7, #12]
800005ca:	3b01      	subs	r3, #1
800005cc:	60fb      	str	r3, [r7, #12]
800005ce:	68fb      	ldr	r3, [r7, #12]
800005d0:	2b00      	cmp	r3, #0
800005d2:	dae2      	bge.n	8000059a <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
800005d4:	693b      	ldr	r3, [r7, #16]
800005d6:	3301      	adds	r3, #1
800005d8:	613b      	str	r3, [r7, #16]
800005da:	693b      	ldr	r3, [r7, #16]
800005dc:	2b07      	cmp	r3, #7
800005de:	ddc5      	ble.n	8000056c <WS2812_Send+0x10>
			}

	}

	// TODO: change 50 here which represents the number of bits passed that indicates the end of the data transmission
	for (int i=0; i<50; i++)
800005e0:	2300      	movs	r3, #0
800005e2:	60bb      	str	r3, [r7, #8]
800005e4:	e00a      	b.n	800005fc <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
800005e6:	4a0f      	ldr	r2, [pc, #60]	; (80000624 <WS2812_Send+0xc8>)
800005e8:	697b      	ldr	r3, [r7, #20]
800005ea:	2100      	movs	r1, #0
800005ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
800005f0:	697b      	ldr	r3, [r7, #20]
800005f2:	3301      	adds	r3, #1
800005f4:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
800005f6:	68bb      	ldr	r3, [r7, #8]
800005f8:	3301      	adds	r3, #1
800005fa:	60bb      	str	r3, [r7, #8]
800005fc:	68bb      	ldr	r3, [r7, #8]
800005fe:	2b31      	cmp	r3, #49	; 0x31
80000600:	ddf1      	ble.n	800005e6 <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
80000602:	697b      	ldr	r3, [r7, #20]
80000604:	b29b      	uxth	r3, r3
80000606:	4a07      	ldr	r2, [pc, #28]	; (80000624 <WS2812_Send+0xc8>)
80000608:	2100      	movs	r1, #0
8000060a:	4807      	ldr	r0, [pc, #28]	; (80000628 <WS2812_Send+0xcc>)
8000060c:	f002 fa68 	bl	80002ae0 <HAL_TIM_PWM_Start_DMA>
//	while (!datasentflag){};
	datasentflag = 0;
80000610:	4b06      	ldr	r3, [pc, #24]	; (8000062c <WS2812_Send+0xd0>)
80000612:	2200      	movs	r2, #0
80000614:	601a      	str	r2, [r3, #0]
}
80000616:	bf00      	nop
80000618:	3718      	adds	r7, #24
8000061a:	46bd      	mov	sp, r7
8000061c:	bd80      	pop	{r7, pc}
8000061e:	bf00      	nop
80000620:	20000180 	.word	0x20000180
80000624:	200001a0 	.word	0x200001a0
80000628:	20000028 	.word	0x20000028
8000062c:	2000015c 	.word	0x2000015c

80000630 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
80000630:	b580      	push	{r7, lr}
80000632:	b082      	sub	sp, #8
80000634:	af00      	add	r7, sp, #0
80000636:	6078      	str	r0, [r7, #4]
HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
80000638:	2100      	movs	r1, #0
8000063a:	4805      	ldr	r0, [pc, #20]	; (80000650 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
8000063c:	f002 fc18 	bl	80002e70 <HAL_TIM_PWM_Stop_DMA>
datasentflag=1;
80000640:	4b04      	ldr	r3, [pc, #16]	; (80000654 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
80000642:	2201      	movs	r2, #1
80000644:	601a      	str	r2, [r3, #0]
}
80000646:	bf00      	nop
80000648:	3708      	adds	r7, #8
8000064a:	46bd      	mov	sp, r7
8000064c:	bd80      	pop	{r7, pc}
8000064e:	bf00      	nop
80000650:	20000028 	.word	0x20000028
80000654:	2000015c 	.word	0x2000015c

80000658 <HAL_TIM_IC_CaptureCallback>:

/* Measure Width */
uint32_t usWidth = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
80000658:	b580      	push	{r7, lr}
8000065a:	b084      	sub	sp, #16
8000065c:	af00      	add	r7, sp, #0
8000065e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
80000660:	687b      	ldr	r3, [r7, #4]
80000662:	7f1b      	ldrb	r3, [r3, #28]
80000664:	2b01      	cmp	r3, #1
80000666:	d152      	bne.n	8000070e <HAL_TIM_IC_CaptureCallback+0xb6>
	{
		if (Is_First_Captured==0) // if the first value is not captured
80000668:	4b2b      	ldr	r3, [pc, #172]	; (80000718 <HAL_TIM_IC_CaptureCallback+0xc0>)
8000066a:	681b      	ldr	r3, [r3, #0]
8000066c:	2b00      	cmp	r3, #0
8000066e:	d10a      	bne.n	80000686 <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
80000670:	2100      	movs	r1, #0
80000672:	6878      	ldr	r0, [r7, #4]
80000674:	f003 f97e 	bl	80003974 <HAL_TIM_ReadCapturedValue>
80000678:	4603      	mov	r3, r0
8000067a:	4a28      	ldr	r2, [pc, #160]	; (8000071c <HAL_TIM_IC_CaptureCallback+0xc4>)
8000067c:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
8000067e:	4b26      	ldr	r3, [pc, #152]	; (80000718 <HAL_TIM_IC_CaptureCallback+0xc0>)
80000680:	2201      	movs	r2, #1
80000682:	601a      	str	r2, [r3, #0]

			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
			Is_First_Captured = 0; // set it back to false
		}
	}
}
80000684:	e043      	b.n	8000070e <HAL_TIM_IC_CaptureCallback+0xb6>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
80000686:	2100      	movs	r1, #0
80000688:	6878      	ldr	r0, [r7, #4]
8000068a:	f003 f973 	bl	80003974 <HAL_TIM_ReadCapturedValue>
8000068e:	4603      	mov	r3, r0
80000690:	4a23      	ldr	r2, [pc, #140]	; (80000720 <HAL_TIM_IC_CaptureCallback+0xc8>)
80000692:	6013      	str	r3, [r2, #0]
			if (IC_Val2 > IC_Val1)
80000694:	4b22      	ldr	r3, [pc, #136]	; (80000720 <HAL_TIM_IC_CaptureCallback+0xc8>)
80000696:	681a      	ldr	r2, [r3, #0]
80000698:	4b20      	ldr	r3, [pc, #128]	; (8000071c <HAL_TIM_IC_CaptureCallback+0xc4>)
8000069a:	681b      	ldr	r3, [r3, #0]
8000069c:	429a      	cmp	r2, r3
8000069e:	d907      	bls.n	800006b0 <HAL_TIM_IC_CaptureCallback+0x58>
				Difference = IC_Val2-IC_Val1;
800006a0:	4b1f      	ldr	r3, [pc, #124]	; (80000720 <HAL_TIM_IC_CaptureCallback+0xc8>)
800006a2:	681a      	ldr	r2, [r3, #0]
800006a4:	4b1d      	ldr	r3, [pc, #116]	; (8000071c <HAL_TIM_IC_CaptureCallback+0xc4>)
800006a6:	681b      	ldr	r3, [r3, #0]
800006a8:	1ad3      	subs	r3, r2, r3
800006aa:	4a1e      	ldr	r2, [pc, #120]	; (80000724 <HAL_TIM_IC_CaptureCallback+0xcc>)
800006ac:	6013      	str	r3, [r2, #0]
800006ae:	e00d      	b.n	800006cc <HAL_TIM_IC_CaptureCallback+0x74>
			else if (IC_Val1 > IC_Val2)
800006b0:	4b1a      	ldr	r3, [pc, #104]	; (8000071c <HAL_TIM_IC_CaptureCallback+0xc4>)
800006b2:	681a      	ldr	r2, [r3, #0]
800006b4:	4b1a      	ldr	r3, [pc, #104]	; (80000720 <HAL_TIM_IC_CaptureCallback+0xc8>)
800006b6:	681b      	ldr	r3, [r3, #0]
800006b8:	429a      	cmp	r2, r3
800006ba:	d907      	bls.n	800006cc <HAL_TIM_IC_CaptureCallback+0x74>
				Difference = (0xffffffff - IC_Val1) + IC_Val2;
800006bc:	4b18      	ldr	r3, [pc, #96]	; (80000720 <HAL_TIM_IC_CaptureCallback+0xc8>)
800006be:	681a      	ldr	r2, [r3, #0]
800006c0:	4b16      	ldr	r3, [pc, #88]	; (8000071c <HAL_TIM_IC_CaptureCallback+0xc4>)
800006c2:	681b      	ldr	r3, [r3, #0]
800006c4:	1ad3      	subs	r3, r2, r3
800006c6:	3b01      	subs	r3, #1
800006c8:	4a16      	ldr	r2, [pc, #88]	; (80000724 <HAL_TIM_IC_CaptureCallback+0xcc>)
800006ca:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
800006cc:	4b16      	ldr	r3, [pc, #88]	; (80000728 <HAL_TIM_IC_CaptureCallback+0xd0>)
800006ce:	60fb      	str	r3, [r7, #12]
			float mFactor = 1000000000/refClock;
800006d0:	eddf 6a16 	vldr	s13, [pc, #88]	; 8000072c <HAL_TIM_IC_CaptureCallback+0xd4>
800006d4:	ed97 7a03 	vldr	s14, [r7, #12]
800006d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
800006dc:	edc7 7a02 	vstr	s15, [r7, #8]
			usWidth = Difference*mFactor;
800006e0:	4b10      	ldr	r3, [pc, #64]	; (80000724 <HAL_TIM_IC_CaptureCallback+0xcc>)
800006e2:	681b      	ldr	r3, [r3, #0]
800006e4:	ee07 3a90 	vmov	s15, r3
800006e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
800006ec:	edd7 7a02 	vldr	s15, [r7, #8]
800006f0:	ee67 7a27 	vmul.f32	s15, s14, s15
800006f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
800006f8:	ee17 2a90 	vmov	r2, s15
800006fc:	4b0c      	ldr	r3, [pc, #48]	; (80000730 <HAL_TIM_IC_CaptureCallback+0xd8>)
800006fe:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
80000700:	687b      	ldr	r3, [r7, #4]
80000702:	681b      	ldr	r3, [r3, #0]
80000704:	2200      	movs	r2, #0
80000706:	625a      	str	r2, [r3, #36]	; 0x24
			Is_First_Captured = 0; // set it back to false
80000708:	4b03      	ldr	r3, [pc, #12]	; (80000718 <HAL_TIM_IC_CaptureCallback+0xc0>)
8000070a:	2200      	movs	r2, #0
8000070c:	601a      	str	r2, [r3, #0]
}
8000070e:	bf00      	nop
80000710:	3710      	adds	r7, #16
80000712:	46bd      	mov	sp, r7
80000714:	bd80      	pop	{r7, pc}
80000716:	bf00      	nop
80000718:	20000390 	.word	0x20000390
8000071c:	20000384 	.word	0x20000384
80000720:	20000388 	.word	0x20000388
80000724:	2000038c 	.word	0x2000038c
80000728:	499fcd10 	.word	0x499fcd10
8000072c:	4e6e6b28 	.word	0x4e6e6b28
80000730:	20000394 	.word	0x20000394

80000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
80000734:	b580      	push	{r7, lr}
80000736:	b082      	sub	sp, #8
80000738:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
8000073a:	f000 fc59 	bl	80000ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
8000073e:	f000 f863 	bl	80000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
80000742:	f000 fa25 	bl	80000b90 <MX_GPIO_Init>
  MX_DMA_Init();
80000746:	f000 fa03 	bl	80000b50 <MX_DMA_Init>
  MX_USART2_UART_Init();
8000074a:	f000 f9d7 	bl	80000afc <MX_USART2_UART_Init>
  MX_TIM1_Init();
8000074e:	f000 f8c7 	bl	800008e0 <MX_TIM1_Init>
  MX_TIM2_Init();
80000752:	f000 f965 	bl	80000a20 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  TIM1->CCR1 = 50;
80000756:	4b2a      	ldr	r3, [pc, #168]	; (80000800 <main+0xcc>)
80000758:	2232      	movs	r2, #50	; 0x32
8000075a:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
8000075c:	2100      	movs	r1, #0
8000075e:	4829      	ldr	r0, [pc, #164]	; (80000804 <main+0xd0>)
80000760:	f002 fcb2 	bl	800030c8 <HAL_TIM_IC_Start_IT>

  Set_LED(0, 255, 0, 0);
80000764:	2300      	movs	r3, #0
80000766:	2200      	movs	r2, #0
80000768:	21ff      	movs	r1, #255	; 0xff
8000076a:	2000      	movs	r0, #0
8000076c:	f7ff fec8 	bl	80000500 <Set_LED>
  Set_LED(1, 0, 255, 0);
80000770:	2300      	movs	r3, #0
80000772:	22ff      	movs	r2, #255	; 0xff
80000774:	2100      	movs	r1, #0
80000776:	2001      	movs	r0, #1
80000778:	f7ff fec2 	bl	80000500 <Set_LED>
  Set_LED(2, 0, 0, 255);
8000077c:	23ff      	movs	r3, #255	; 0xff
8000077e:	2200      	movs	r2, #0
80000780:	2100      	movs	r1, #0
80000782:	2002      	movs	r0, #2
80000784:	f7ff febc 	bl	80000500 <Set_LED>

  Set_LED(3, 46, 89, 128);
80000788:	2380      	movs	r3, #128	; 0x80
8000078a:	2259      	movs	r2, #89	; 0x59
8000078c:	212e      	movs	r1, #46	; 0x2e
8000078e:	2003      	movs	r0, #3
80000790:	f7ff feb6 	bl	80000500 <Set_LED>

  Set_LED(4, 156, 233, 100);
80000794:	2364      	movs	r3, #100	; 0x64
80000796:	22e9      	movs	r2, #233	; 0xe9
80000798:	219c      	movs	r1, #156	; 0x9c
8000079a:	2004      	movs	r0, #4
8000079c:	f7ff feb0 	bl	80000500 <Set_LED>
  Set_LED(5, 102, 0, 235);
800007a0:	23eb      	movs	r3, #235	; 0xeb
800007a2:	2200      	movs	r2, #0
800007a4:	2166      	movs	r1, #102	; 0x66
800007a6:	2005      	movs	r0, #5
800007a8:	f7ff feaa 	bl	80000500 <Set_LED>
  Set_LED(6, 47, 38, 77);
800007ac:	234d      	movs	r3, #77	; 0x4d
800007ae:	2226      	movs	r2, #38	; 0x26
800007b0:	212f      	movs	r1, #47	; 0x2f
800007b2:	2006      	movs	r0, #6
800007b4:	f7ff fea4 	bl	80000500 <Set_LED>

  Set_LED(7, 255, 200, 0);
800007b8:	2300      	movs	r3, #0
800007ba:	22c8      	movs	r2, #200	; 0xc8
800007bc:	21ff      	movs	r1, #255	; 0xff
800007be:	2007      	movs	r0, #7
800007c0:	f7ff fe9e 	bl	80000500 <Set_LED>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (int i=0; i<46; i++)
800007c4:	2300      	movs	r3, #0
800007c6:	607b      	str	r3, [r7, #4]
800007c8:	e007      	b.n	800007da <main+0xa6>
	  {
//		  Set_Brightness(i);
		  WS2812_Send();
800007ca:	f7ff fec7 	bl	8000055c <WS2812_Send>
		  HAL_Delay (50);
800007ce:	2032      	movs	r0, #50	; 0x32
800007d0:	f000 fc80 	bl	800010d4 <HAL_Delay>
	  for (int i=0; i<46; i++)
800007d4:	687b      	ldr	r3, [r7, #4]
800007d6:	3301      	adds	r3, #1
800007d8:	607b      	str	r3, [r7, #4]
800007da:	687b      	ldr	r3, [r7, #4]
800007dc:	2b2d      	cmp	r3, #45	; 0x2d
800007de:	ddf4      	ble.n	800007ca <main+0x96>
	  }

	  for (int i=45; i>=0; i--)
800007e0:	232d      	movs	r3, #45	; 0x2d
800007e2:	603b      	str	r3, [r7, #0]
800007e4:	e007      	b.n	800007f6 <main+0xc2>
	  {
//		  Set_Brightness(i);
		  WS2812_Send();
800007e6:	f7ff feb9 	bl	8000055c <WS2812_Send>
		  HAL_Delay (50);
800007ea:	2032      	movs	r0, #50	; 0x32
800007ec:	f000 fc72 	bl	800010d4 <HAL_Delay>
	  for (int i=45; i>=0; i--)
800007f0:	683b      	ldr	r3, [r7, #0]
800007f2:	3b01      	subs	r3, #1
800007f4:	603b      	str	r3, [r7, #0]
800007f6:	683b      	ldr	r3, [r7, #0]
800007f8:	2b00      	cmp	r3, #0
800007fa:	daf4      	bge.n	800007e6 <main+0xb2>
	  for (int i=0; i<46; i++)
800007fc:	e7e2      	b.n	800007c4 <main+0x90>
800007fe:	bf00      	nop
80000800:	40010000 	.word	0x40010000
80000804:	20000070 	.word	0x20000070

80000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
80000808:	b580      	push	{r7, lr}
8000080a:	b094      	sub	sp, #80	; 0x50
8000080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
8000080e:	f107 031c 	add.w	r3, r7, #28
80000812:	2234      	movs	r2, #52	; 0x34
80000814:	2100      	movs	r1, #0
80000816:	4618      	mov	r0, r3
80000818:	f004 f9d2 	bl	80004bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
8000081c:	f107 0308 	add.w	r3, r7, #8
80000820:	2200      	movs	r2, #0
80000822:	601a      	str	r2, [r3, #0]
80000824:	605a      	str	r2, [r3, #4]
80000826:	609a      	str	r2, [r3, #8]
80000828:	60da      	str	r2, [r3, #12]
8000082a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
8000082c:	2300      	movs	r3, #0
8000082e:	607b      	str	r3, [r7, #4]
80000830:	4b29      	ldr	r3, [pc, #164]	; (800008d8 <SystemClock_Config+0xd0>)
80000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
80000834:	4a28      	ldr	r2, [pc, #160]	; (800008d8 <SystemClock_Config+0xd0>)
80000836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
8000083a:	6413      	str	r3, [r2, #64]	; 0x40
8000083c:	4b26      	ldr	r3, [pc, #152]	; (800008d8 <SystemClock_Config+0xd0>)
8000083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
80000840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
80000844:	607b      	str	r3, [r7, #4]
80000846:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
80000848:	2300      	movs	r3, #0
8000084a:	603b      	str	r3, [r7, #0]
8000084c:	4b23      	ldr	r3, [pc, #140]	; (800008dc <SystemClock_Config+0xd4>)
8000084e:	681b      	ldr	r3, [r3, #0]
80000850:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
80000854:	4a21      	ldr	r2, [pc, #132]	; (800008dc <SystemClock_Config+0xd4>)
80000856:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
8000085a:	6013      	str	r3, [r2, #0]
8000085c:	4b1f      	ldr	r3, [pc, #124]	; (800008dc <SystemClock_Config+0xd4>)
8000085e:	681b      	ldr	r3, [r3, #0]
80000860:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
80000864:	603b      	str	r3, [r7, #0]
80000866:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
80000868:	2302      	movs	r3, #2
8000086a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
8000086c:	2301      	movs	r3, #1
8000086e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
80000870:	2310      	movs	r3, #16
80000872:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
80000874:	2302      	movs	r3, #2
80000876:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
80000878:	2300      	movs	r3, #0
8000087a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
8000087c:	2308      	movs	r3, #8
8000087e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
80000880:	2348      	movs	r3, #72	; 0x48
80000882:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
80000884:	2302      	movs	r3, #2
80000886:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
80000888:	2302      	movs	r3, #2
8000088a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
8000088c:	2302      	movs	r3, #2
8000088e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
80000890:	f107 031c 	add.w	r3, r7, #28
80000894:	4618      	mov	r0, r3
80000896:	f001 fddd 	bl	80002454 <HAL_RCC_OscConfig>
8000089a:	4603      	mov	r3, r0
8000089c:	2b00      	cmp	r3, #0
8000089e:	d001      	beq.n	800008a4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
800008a0:	f000 f9e4 	bl	80000c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
800008a4:	230f      	movs	r3, #15
800008a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
800008a8:	2302      	movs	r3, #2
800008aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
800008ac:	2300      	movs	r3, #0
800008ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
800008b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
800008b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
800008b6:	2300      	movs	r3, #0
800008b8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
800008ba:	f107 0308 	add.w	r3, r7, #8
800008be:	2102      	movs	r1, #2
800008c0:	4618      	mov	r0, r3
800008c2:	f001 fa7d 	bl	80001dc0 <HAL_RCC_ClockConfig>
800008c6:	4603      	mov	r3, r0
800008c8:	2b00      	cmp	r3, #0
800008ca:	d001      	beq.n	800008d0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
800008cc:	f000 f9ce 	bl	80000c6c <Error_Handler>
  }
}
800008d0:	bf00      	nop
800008d2:	3750      	adds	r7, #80	; 0x50
800008d4:	46bd      	mov	sp, r7
800008d6:	bd80      	pop	{r7, pc}
800008d8:	40023800 	.word	0x40023800
800008dc:	40007000 	.word	0x40007000

800008e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
800008e0:	b580      	push	{r7, lr}
800008e2:	b096      	sub	sp, #88	; 0x58
800008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
800008e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
800008ea:	2200      	movs	r2, #0
800008ec:	601a      	str	r2, [r3, #0]
800008ee:	605a      	str	r2, [r3, #4]
800008f0:	609a      	str	r2, [r3, #8]
800008f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
800008f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
800008f8:	2200      	movs	r2, #0
800008fa:	601a      	str	r2, [r3, #0]
800008fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
800008fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
80000902:	2200      	movs	r2, #0
80000904:	601a      	str	r2, [r3, #0]
80000906:	605a      	str	r2, [r3, #4]
80000908:	609a      	str	r2, [r3, #8]
8000090a:	60da      	str	r2, [r3, #12]
8000090c:	611a      	str	r2, [r3, #16]
8000090e:	615a      	str	r2, [r3, #20]
80000910:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
80000912:	1d3b      	adds	r3, r7, #4
80000914:	2220      	movs	r2, #32
80000916:	2100      	movs	r1, #0
80000918:	4618      	mov	r0, r3
8000091a:	f004 f951 	bl	80004bc0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
8000091e:	4b3e      	ldr	r3, [pc, #248]	; (80000a18 <MX_TIM1_Init+0x138>)
80000920:	4a3e      	ldr	r2, [pc, #248]	; (80000a1c <MX_TIM1_Init+0x13c>)
80000922:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
80000924:	4b3c      	ldr	r3, [pc, #240]	; (80000a18 <MX_TIM1_Init+0x138>)
80000926:	2200      	movs	r2, #0
80000928:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
8000092a:	4b3b      	ldr	r3, [pc, #236]	; (80000a18 <MX_TIM1_Init+0x138>)
8000092c:	2200      	movs	r2, #0
8000092e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 56-1;
80000930:	4b39      	ldr	r3, [pc, #228]	; (80000a18 <MX_TIM1_Init+0x138>)
80000932:	2237      	movs	r2, #55	; 0x37
80000934:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
80000936:	4b38      	ldr	r3, [pc, #224]	; (80000a18 <MX_TIM1_Init+0x138>)
80000938:	2200      	movs	r2, #0
8000093a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
8000093c:	4b36      	ldr	r3, [pc, #216]	; (80000a18 <MX_TIM1_Init+0x138>)
8000093e:	2200      	movs	r2, #0
80000940:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
80000942:	4b35      	ldr	r3, [pc, #212]	; (80000a18 <MX_TIM1_Init+0x138>)
80000944:	2200      	movs	r2, #0
80000946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
80000948:	4833      	ldr	r0, [pc, #204]	; (80000a18 <MX_TIM1_Init+0x138>)
8000094a:	f002 f821 	bl	80002990 <HAL_TIM_Base_Init>
8000094e:	4603      	mov	r3, r0
80000950:	2b00      	cmp	r3, #0
80000952:	d001      	beq.n	80000958 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
80000954:	f000 f98a 	bl	80000c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
80000958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
8000095c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
8000095e:	f107 0348 	add.w	r3, r7, #72	; 0x48
80000962:	4619      	mov	r1, r3
80000964:	482c      	ldr	r0, [pc, #176]	; (80000a18 <MX_TIM1_Init+0x138>)
80000966:	f002 ff3d 	bl	800037e4 <HAL_TIM_ConfigClockSource>
8000096a:	4603      	mov	r3, r0
8000096c:	2b00      	cmp	r3, #0
8000096e:	d001      	beq.n	80000974 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
80000970:	f000 f97c 	bl	80000c6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
80000974:	4828      	ldr	r0, [pc, #160]	; (80000a18 <MX_TIM1_Init+0x138>)
80000976:	f002 f85a 	bl	80002a2e <HAL_TIM_PWM_Init>
8000097a:	4603      	mov	r3, r0
8000097c:	2b00      	cmp	r3, #0
8000097e:	d001      	beq.n	80000984 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
80000980:	f000 f974 	bl	80000c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
80000984:	2300      	movs	r3, #0
80000986:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
80000988:	2300      	movs	r3, #0
8000098a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
8000098c:	f107 0340 	add.w	r3, r7, #64	; 0x40
80000990:	4619      	mov	r1, r3
80000992:	4821      	ldr	r0, [pc, #132]	; (80000a18 <MX_TIM1_Init+0x138>)
80000994:	f003 fd70 	bl	80004478 <HAL_TIMEx_MasterConfigSynchronization>
80000998:	4603      	mov	r3, r0
8000099a:	2b00      	cmp	r3, #0
8000099c:	d001      	beq.n	800009a2 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
8000099e:	f000 f965 	bl	80000c6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
800009a2:	2360      	movs	r3, #96	; 0x60
800009a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
800009a6:	2300      	movs	r3, #0
800009a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
800009aa:	2300      	movs	r3, #0
800009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
800009ae:	2300      	movs	r3, #0
800009b0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
800009b2:	2300      	movs	r3, #0
800009b4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
800009b6:	2300      	movs	r3, #0
800009b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
800009ba:	2300      	movs	r3, #0
800009bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
800009be:	f107 0324 	add.w	r3, r7, #36	; 0x24
800009c2:	2200      	movs	r2, #0
800009c4:	4619      	mov	r1, r3
800009c6:	4814      	ldr	r0, [pc, #80]	; (80000a18 <MX_TIM1_Init+0x138>)
800009c8:	f002 fe4a 	bl	80003660 <HAL_TIM_PWM_ConfigChannel>
800009cc:	4603      	mov	r3, r0
800009ce:	2b00      	cmp	r3, #0
800009d0:	d001      	beq.n	800009d6 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
800009d2:	f000 f94b 	bl	80000c6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
800009d6:	2300      	movs	r3, #0
800009d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
800009da:	2300      	movs	r3, #0
800009dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
800009de:	2300      	movs	r3, #0
800009e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
800009e2:	2300      	movs	r3, #0
800009e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
800009e6:	2300      	movs	r3, #0
800009e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
800009ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
800009ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
800009f0:	2300      	movs	r3, #0
800009f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
800009f4:	1d3b      	adds	r3, r7, #4
800009f6:	4619      	mov	r1, r3
800009f8:	4807      	ldr	r0, [pc, #28]	; (80000a18 <MX_TIM1_Init+0x138>)
800009fa:	f003 fdb9 	bl	80004570 <HAL_TIMEx_ConfigBreakDeadTime>
800009fe:	4603      	mov	r3, r0
80000a00:	2b00      	cmp	r3, #0
80000a02:	d001      	beq.n	80000a08 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
80000a04:	f000 f932 	bl	80000c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
80000a08:	4803      	ldr	r0, [pc, #12]	; (80000a18 <MX_TIM1_Init+0x138>)
80000a0a:	f000 f9f5 	bl	80000df8 <HAL_TIM_MspPostInit>

}
80000a0e:	bf00      	nop
80000a10:	3758      	adds	r7, #88	; 0x58
80000a12:	46bd      	mov	sp, r7
80000a14:	bd80      	pop	{r7, pc}
80000a16:	bf00      	nop
80000a18:	20000028 	.word	0x20000028
80000a1c:	40010000 	.word	0x40010000

80000a20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
80000a20:	b580      	push	{r7, lr}
80000a22:	b08a      	sub	sp, #40	; 0x28
80000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
80000a26:	f107 0318 	add.w	r3, r7, #24
80000a2a:	2200      	movs	r2, #0
80000a2c:	601a      	str	r2, [r3, #0]
80000a2e:	605a      	str	r2, [r3, #4]
80000a30:	609a      	str	r2, [r3, #8]
80000a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
80000a34:	f107 0310 	add.w	r3, r7, #16
80000a38:	2200      	movs	r2, #0
80000a3a:	601a      	str	r2, [r3, #0]
80000a3c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
80000a3e:	463b      	mov	r3, r7
80000a40:	2200      	movs	r2, #0
80000a42:	601a      	str	r2, [r3, #0]
80000a44:	605a      	str	r2, [r3, #4]
80000a46:	609a      	str	r2, [r3, #8]
80000a48:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
80000a4a:	4b2b      	ldr	r3, [pc, #172]	; (80000af8 <MX_TIM2_Init+0xd8>)
80000a4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
80000a50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
80000a52:	4b29      	ldr	r3, [pc, #164]	; (80000af8 <MX_TIM2_Init+0xd8>)
80000a54:	2200      	movs	r2, #0
80000a56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
80000a58:	4b27      	ldr	r3, [pc, #156]	; (80000af8 <MX_TIM2_Init+0xd8>)
80000a5a:	2200      	movs	r2, #0
80000a5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 56-1;
80000a5e:	4b26      	ldr	r3, [pc, #152]	; (80000af8 <MX_TIM2_Init+0xd8>)
80000a60:	2237      	movs	r2, #55	; 0x37
80000a62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
80000a64:	4b24      	ldr	r3, [pc, #144]	; (80000af8 <MX_TIM2_Init+0xd8>)
80000a66:	2200      	movs	r2, #0
80000a68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
80000a6a:	4b23      	ldr	r3, [pc, #140]	; (80000af8 <MX_TIM2_Init+0xd8>)
80000a6c:	2200      	movs	r2, #0
80000a6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
80000a70:	4821      	ldr	r0, [pc, #132]	; (80000af8 <MX_TIM2_Init+0xd8>)
80000a72:	f001 ff8d 	bl	80002990 <HAL_TIM_Base_Init>
80000a76:	4603      	mov	r3, r0
80000a78:	2b00      	cmp	r3, #0
80000a7a:	d001      	beq.n	80000a80 <MX_TIM2_Init+0x60>
  {
    Error_Handler();
80000a7c:	f000 f8f6 	bl	80000c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
80000a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
80000a84:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
80000a86:	f107 0318 	add.w	r3, r7, #24
80000a8a:	4619      	mov	r1, r3
80000a8c:	481a      	ldr	r0, [pc, #104]	; (80000af8 <MX_TIM2_Init+0xd8>)
80000a8e:	f002 fea9 	bl	800037e4 <HAL_TIM_ConfigClockSource>
80000a92:	4603      	mov	r3, r0
80000a94:	2b00      	cmp	r3, #0
80000a96:	d001      	beq.n	80000a9c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
80000a98:	f000 f8e8 	bl	80000c6c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
80000a9c:	4816      	ldr	r0, [pc, #88]	; (80000af8 <MX_TIM2_Init+0xd8>)
80000a9e:	f002 fab9 	bl	80003014 <HAL_TIM_IC_Init>
80000aa2:	4603      	mov	r3, r0
80000aa4:	2b00      	cmp	r3, #0
80000aa6:	d001      	beq.n	80000aac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
80000aa8:	f000 f8e0 	bl	80000c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
80000aac:	2300      	movs	r3, #0
80000aae:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
80000ab0:	2300      	movs	r3, #0
80000ab2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
80000ab4:	f107 0310 	add.w	r3, r7, #16
80000ab8:	4619      	mov	r1, r3
80000aba:	480f      	ldr	r0, [pc, #60]	; (80000af8 <MX_TIM2_Init+0xd8>)
80000abc:	f003 fcdc 	bl	80004478 <HAL_TIMEx_MasterConfigSynchronization>
80000ac0:	4603      	mov	r3, r0
80000ac2:	2b00      	cmp	r3, #0
80000ac4:	d001      	beq.n	80000aca <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
80000ac6:	f000 f8d1 	bl	80000c6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
80000aca:	230a      	movs	r3, #10
80000acc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
80000ace:	2301      	movs	r3, #1
80000ad0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
80000ad2:	2300      	movs	r3, #0
80000ad4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
80000ad6:	2300      	movs	r3, #0
80000ad8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
80000ada:	463b      	mov	r3, r7
80000adc:	2200      	movs	r2, #0
80000ade:	4619      	mov	r1, r3
80000ae0:	4805      	ldr	r0, [pc, #20]	; (80000af8 <MX_TIM2_Init+0xd8>)
80000ae2:	f002 fd21 	bl	80003528 <HAL_TIM_IC_ConfigChannel>
80000ae6:	4603      	mov	r3, r0
80000ae8:	2b00      	cmp	r3, #0
80000aea:	d001      	beq.n	80000af0 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
80000aec:	f000 f8be 	bl	80000c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
80000af0:	bf00      	nop
80000af2:	3728      	adds	r7, #40	; 0x28
80000af4:	46bd      	mov	sp, r7
80000af6:	bd80      	pop	{r7, pc}
80000af8:	20000070 	.word	0x20000070

80000afc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
80000afc:	b580      	push	{r7, lr}
80000afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
80000b00:	4b11      	ldr	r3, [pc, #68]	; (80000b48 <MX_USART2_UART_Init+0x4c>)
80000b02:	4a12      	ldr	r2, [pc, #72]	; (80000b4c <MX_USART2_UART_Init+0x50>)
80000b04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
80000b06:	4b10      	ldr	r3, [pc, #64]	; (80000b48 <MX_USART2_UART_Init+0x4c>)
80000b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
80000b0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
80000b0e:	4b0e      	ldr	r3, [pc, #56]	; (80000b48 <MX_USART2_UART_Init+0x4c>)
80000b10:	2200      	movs	r2, #0
80000b12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
80000b14:	4b0c      	ldr	r3, [pc, #48]	; (80000b48 <MX_USART2_UART_Init+0x4c>)
80000b16:	2200      	movs	r2, #0
80000b18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
80000b1a:	4b0b      	ldr	r3, [pc, #44]	; (80000b48 <MX_USART2_UART_Init+0x4c>)
80000b1c:	2200      	movs	r2, #0
80000b1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
80000b20:	4b09      	ldr	r3, [pc, #36]	; (80000b48 <MX_USART2_UART_Init+0x4c>)
80000b22:	220c      	movs	r2, #12
80000b24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
80000b26:	4b08      	ldr	r3, [pc, #32]	; (80000b48 <MX_USART2_UART_Init+0x4c>)
80000b28:	2200      	movs	r2, #0
80000b2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
80000b2c:	4b06      	ldr	r3, [pc, #24]	; (80000b48 <MX_USART2_UART_Init+0x4c>)
80000b2e:	2200      	movs	r2, #0
80000b30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
80000b32:	4805      	ldr	r0, [pc, #20]	; (80000b48 <MX_USART2_UART_Init+0x4c>)
80000b34:	f003 fd82 	bl	8000463c <HAL_UART_Init>
80000b38:	4603      	mov	r3, r0
80000b3a:	2b00      	cmp	r3, #0
80000b3c:	d001      	beq.n	80000b42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
80000b3e:	f000 f895 	bl	80000c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
80000b42:	bf00      	nop
80000b44:	bd80      	pop	{r7, pc}
80000b46:	bf00      	nop
80000b48:	20000118 	.word	0x20000118
80000b4c:	40004400 	.word	0x40004400

80000b50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
80000b50:	b580      	push	{r7, lr}
80000b52:	b082      	sub	sp, #8
80000b54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
80000b56:	2300      	movs	r3, #0
80000b58:	607b      	str	r3, [r7, #4]
80000b5a:	4b0c      	ldr	r3, [pc, #48]	; (80000b8c <MX_DMA_Init+0x3c>)
80000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
80000b5e:	4a0b      	ldr	r2, [pc, #44]	; (80000b8c <MX_DMA_Init+0x3c>)
80000b60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
80000b64:	6313      	str	r3, [r2, #48]	; 0x30
80000b66:	4b09      	ldr	r3, [pc, #36]	; (80000b8c <MX_DMA_Init+0x3c>)
80000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
80000b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
80000b6e:	607b      	str	r3, [r7, #4]
80000b70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
80000b72:	2200      	movs	r2, #0
80000b74:	2100      	movs	r1, #0
80000b76:	2039      	movs	r0, #57	; 0x39
80000b78:	f000 fbab 	bl	800012d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
80000b7c:	2039      	movs	r0, #57	; 0x39
80000b7e:	f000 fbc4 	bl	8000130a <HAL_NVIC_EnableIRQ>

}
80000b82:	bf00      	nop
80000b84:	3708      	adds	r7, #8
80000b86:	46bd      	mov	sp, r7
80000b88:	bd80      	pop	{r7, pc}
80000b8a:	bf00      	nop
80000b8c:	40023800 	.word	0x40023800

80000b90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
80000b90:	b580      	push	{r7, lr}
80000b92:	b08a      	sub	sp, #40	; 0x28
80000b94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
80000b96:	f107 0314 	add.w	r3, r7, #20
80000b9a:	2200      	movs	r2, #0
80000b9c:	601a      	str	r2, [r3, #0]
80000b9e:	605a      	str	r2, [r3, #4]
80000ba0:	609a      	str	r2, [r3, #8]
80000ba2:	60da      	str	r2, [r3, #12]
80000ba4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
80000ba6:	2300      	movs	r3, #0
80000ba8:	613b      	str	r3, [r7, #16]
80000baa:	4b2d      	ldr	r3, [pc, #180]	; (80000c60 <MX_GPIO_Init+0xd0>)
80000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
80000bae:	4a2c      	ldr	r2, [pc, #176]	; (80000c60 <MX_GPIO_Init+0xd0>)
80000bb0:	f043 0304 	orr.w	r3, r3, #4
80000bb4:	6313      	str	r3, [r2, #48]	; 0x30
80000bb6:	4b2a      	ldr	r3, [pc, #168]	; (80000c60 <MX_GPIO_Init+0xd0>)
80000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
80000bba:	f003 0304 	and.w	r3, r3, #4
80000bbe:	613b      	str	r3, [r7, #16]
80000bc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
80000bc2:	2300      	movs	r3, #0
80000bc4:	60fb      	str	r3, [r7, #12]
80000bc6:	4b26      	ldr	r3, [pc, #152]	; (80000c60 <MX_GPIO_Init+0xd0>)
80000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
80000bca:	4a25      	ldr	r2, [pc, #148]	; (80000c60 <MX_GPIO_Init+0xd0>)
80000bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
80000bd0:	6313      	str	r3, [r2, #48]	; 0x30
80000bd2:	4b23      	ldr	r3, [pc, #140]	; (80000c60 <MX_GPIO_Init+0xd0>)
80000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
80000bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
80000bda:	60fb      	str	r3, [r7, #12]
80000bdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
80000bde:	2300      	movs	r3, #0
80000be0:	60bb      	str	r3, [r7, #8]
80000be2:	4b1f      	ldr	r3, [pc, #124]	; (80000c60 <MX_GPIO_Init+0xd0>)
80000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
80000be6:	4a1e      	ldr	r2, [pc, #120]	; (80000c60 <MX_GPIO_Init+0xd0>)
80000be8:	f043 0301 	orr.w	r3, r3, #1
80000bec:	6313      	str	r3, [r2, #48]	; 0x30
80000bee:	4b1c      	ldr	r3, [pc, #112]	; (80000c60 <MX_GPIO_Init+0xd0>)
80000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
80000bf2:	f003 0301 	and.w	r3, r3, #1
80000bf6:	60bb      	str	r3, [r7, #8]
80000bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
80000bfa:	2300      	movs	r3, #0
80000bfc:	607b      	str	r3, [r7, #4]
80000bfe:	4b18      	ldr	r3, [pc, #96]	; (80000c60 <MX_GPIO_Init+0xd0>)
80000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
80000c02:	4a17      	ldr	r2, [pc, #92]	; (80000c60 <MX_GPIO_Init+0xd0>)
80000c04:	f043 0302 	orr.w	r3, r3, #2
80000c08:	6313      	str	r3, [r2, #48]	; 0x30
80000c0a:	4b15      	ldr	r3, [pc, #84]	; (80000c60 <MX_GPIO_Init+0xd0>)
80000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
80000c0e:	f003 0302 	and.w	r3, r3, #2
80000c12:	607b      	str	r3, [r7, #4]
80000c14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
80000c16:	2200      	movs	r2, #0
80000c18:	2120      	movs	r1, #32
80000c1a:	4812      	ldr	r0, [pc, #72]	; (80000c64 <MX_GPIO_Init+0xd4>)
80000c1c:	f001 f8b6 	bl	80001d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
80000c20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
80000c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
80000c26:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
80000c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
80000c2c:	2300      	movs	r3, #0
80000c2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
80000c30:	f107 0314 	add.w	r3, r7, #20
80000c34:	4619      	mov	r1, r3
80000c36:	480c      	ldr	r0, [pc, #48]	; (80000c68 <MX_GPIO_Init+0xd8>)
80000c38:	f000 ff14 	bl	80001a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
80000c3c:	2320      	movs	r3, #32
80000c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
80000c40:	2301      	movs	r3, #1
80000c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
80000c44:	2300      	movs	r3, #0
80000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
80000c48:	2300      	movs	r3, #0
80000c4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
80000c4c:	f107 0314 	add.w	r3, r7, #20
80000c50:	4619      	mov	r1, r3
80000c52:	4804      	ldr	r0, [pc, #16]	; (80000c64 <MX_GPIO_Init+0xd4>)
80000c54:	f000 ff06 	bl	80001a64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
80000c58:	bf00      	nop
80000c5a:	3728      	adds	r7, #40	; 0x28
80000c5c:	46bd      	mov	sp, r7
80000c5e:	bd80      	pop	{r7, pc}
80000c60:	40023800 	.word	0x40023800
80000c64:	40020000 	.word	0x40020000
80000c68:	40020800 	.word	0x40020800

80000c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
80000c6c:	b480      	push	{r7}
80000c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
80000c70:	b672      	cpsid	i
}
80000c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
80000c74:	e7fe      	b.n	80000c74 <Error_Handler+0x8>
	...

80000c78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
80000c78:	b580      	push	{r7, lr}
80000c7a:	b082      	sub	sp, #8
80000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
80000c7e:	2300      	movs	r3, #0
80000c80:	607b      	str	r3, [r7, #4]
80000c82:	4b10      	ldr	r3, [pc, #64]	; (80000cc4 <HAL_MspInit+0x4c>)
80000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
80000c86:	4a0f      	ldr	r2, [pc, #60]	; (80000cc4 <HAL_MspInit+0x4c>)
80000c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
80000c8c:	6453      	str	r3, [r2, #68]	; 0x44
80000c8e:	4b0d      	ldr	r3, [pc, #52]	; (80000cc4 <HAL_MspInit+0x4c>)
80000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
80000c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
80000c96:	607b      	str	r3, [r7, #4]
80000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
80000c9a:	2300      	movs	r3, #0
80000c9c:	603b      	str	r3, [r7, #0]
80000c9e:	4b09      	ldr	r3, [pc, #36]	; (80000cc4 <HAL_MspInit+0x4c>)
80000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
80000ca2:	4a08      	ldr	r2, [pc, #32]	; (80000cc4 <HAL_MspInit+0x4c>)
80000ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
80000ca8:	6413      	str	r3, [r2, #64]	; 0x40
80000caa:	4b06      	ldr	r3, [pc, #24]	; (80000cc4 <HAL_MspInit+0x4c>)
80000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
80000cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
80000cb2:	603b      	str	r3, [r7, #0]
80000cb4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
80000cb6:	2007      	movs	r0, #7
80000cb8:	f000 fb00 	bl	800012bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
80000cbc:	bf00      	nop
80000cbe:	3708      	adds	r7, #8
80000cc0:	46bd      	mov	sp, r7
80000cc2:	bd80      	pop	{r7, pc}
80000cc4:	40023800 	.word	0x40023800

80000cc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
80000cc8:	b580      	push	{r7, lr}
80000cca:	b08a      	sub	sp, #40	; 0x28
80000ccc:	af00      	add	r7, sp, #0
80000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
80000cd0:	f107 0314 	add.w	r3, r7, #20
80000cd4:	2200      	movs	r2, #0
80000cd6:	601a      	str	r2, [r3, #0]
80000cd8:	605a      	str	r2, [r3, #4]
80000cda:	609a      	str	r2, [r3, #8]
80000cdc:	60da      	str	r2, [r3, #12]
80000cde:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
80000ce0:	687b      	ldr	r3, [r7, #4]
80000ce2:	681b      	ldr	r3, [r3, #0]
80000ce4:	4a3f      	ldr	r2, [pc, #252]	; (80000de4 <HAL_TIM_Base_MspInit+0x11c>)
80000ce6:	4293      	cmp	r3, r2
80000ce8:	d13e      	bne.n	80000d68 <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
80000cea:	2300      	movs	r3, #0
80000cec:	613b      	str	r3, [r7, #16]
80000cee:	4b3e      	ldr	r3, [pc, #248]	; (80000de8 <HAL_TIM_Base_MspInit+0x120>)
80000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
80000cf2:	4a3d      	ldr	r2, [pc, #244]	; (80000de8 <HAL_TIM_Base_MspInit+0x120>)
80000cf4:	f043 0301 	orr.w	r3, r3, #1
80000cf8:	6453      	str	r3, [r2, #68]	; 0x44
80000cfa:	4b3b      	ldr	r3, [pc, #236]	; (80000de8 <HAL_TIM_Base_MspInit+0x120>)
80000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
80000cfe:	f003 0301 	and.w	r3, r3, #1
80000d02:	613b      	str	r3, [r7, #16]
80000d04:	693b      	ldr	r3, [r7, #16]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
80000d06:	4b39      	ldr	r3, [pc, #228]	; (80000dec <HAL_TIM_Base_MspInit+0x124>)
80000d08:	4a39      	ldr	r2, [pc, #228]	; (80000df0 <HAL_TIM_Base_MspInit+0x128>)
80000d0a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
80000d0c:	4b37      	ldr	r3, [pc, #220]	; (80000dec <HAL_TIM_Base_MspInit+0x124>)
80000d0e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
80000d12:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
80000d14:	4b35      	ldr	r3, [pc, #212]	; (80000dec <HAL_TIM_Base_MspInit+0x124>)
80000d16:	2240      	movs	r2, #64	; 0x40
80000d18:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
80000d1a:	4b34      	ldr	r3, [pc, #208]	; (80000dec <HAL_TIM_Base_MspInit+0x124>)
80000d1c:	2200      	movs	r2, #0
80000d1e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
80000d20:	4b32      	ldr	r3, [pc, #200]	; (80000dec <HAL_TIM_Base_MspInit+0x124>)
80000d22:	f44f 6280 	mov.w	r2, #1024	; 0x400
80000d26:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
80000d28:	4b30      	ldr	r3, [pc, #192]	; (80000dec <HAL_TIM_Base_MspInit+0x124>)
80000d2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
80000d2e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
80000d30:	4b2e      	ldr	r3, [pc, #184]	; (80000dec <HAL_TIM_Base_MspInit+0x124>)
80000d32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
80000d36:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
80000d38:	4b2c      	ldr	r3, [pc, #176]	; (80000dec <HAL_TIM_Base_MspInit+0x124>)
80000d3a:	2200      	movs	r2, #0
80000d3c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
80000d3e:	4b2b      	ldr	r3, [pc, #172]	; (80000dec <HAL_TIM_Base_MspInit+0x124>)
80000d40:	2200      	movs	r2, #0
80000d42:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
80000d44:	4b29      	ldr	r3, [pc, #164]	; (80000dec <HAL_TIM_Base_MspInit+0x124>)
80000d46:	2200      	movs	r2, #0
80000d48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
80000d4a:	4828      	ldr	r0, [pc, #160]	; (80000dec <HAL_TIM_Base_MspInit+0x124>)
80000d4c:	f000 faf8 	bl	80001340 <HAL_DMA_Init>
80000d50:	4603      	mov	r3, r0
80000d52:	2b00      	cmp	r3, #0
80000d54:	d001      	beq.n	80000d5a <HAL_TIM_Base_MspInit+0x92>
    {
      Error_Handler();
80000d56:	f7ff ff89 	bl	80000c6c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
80000d5a:	687b      	ldr	r3, [r7, #4]
80000d5c:	4a23      	ldr	r2, [pc, #140]	; (80000dec <HAL_TIM_Base_MspInit+0x124>)
80000d5e:	625a      	str	r2, [r3, #36]	; 0x24
80000d60:	4a22      	ldr	r2, [pc, #136]	; (80000dec <HAL_TIM_Base_MspInit+0x124>)
80000d62:	687b      	ldr	r3, [r7, #4]
80000d64:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
80000d66:	e038      	b.n	80000dda <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM2)
80000d68:	687b      	ldr	r3, [r7, #4]
80000d6a:	681b      	ldr	r3, [r3, #0]
80000d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
80000d70:	d133      	bne.n	80000dda <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM2_CLK_ENABLE();
80000d72:	2300      	movs	r3, #0
80000d74:	60fb      	str	r3, [r7, #12]
80000d76:	4b1c      	ldr	r3, [pc, #112]	; (80000de8 <HAL_TIM_Base_MspInit+0x120>)
80000d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
80000d7a:	4a1b      	ldr	r2, [pc, #108]	; (80000de8 <HAL_TIM_Base_MspInit+0x120>)
80000d7c:	f043 0301 	orr.w	r3, r3, #1
80000d80:	6413      	str	r3, [r2, #64]	; 0x40
80000d82:	4b19      	ldr	r3, [pc, #100]	; (80000de8 <HAL_TIM_Base_MspInit+0x120>)
80000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
80000d86:	f003 0301 	and.w	r3, r3, #1
80000d8a:	60fb      	str	r3, [r7, #12]
80000d8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
80000d8e:	2300      	movs	r3, #0
80000d90:	60bb      	str	r3, [r7, #8]
80000d92:	4b15      	ldr	r3, [pc, #84]	; (80000de8 <HAL_TIM_Base_MspInit+0x120>)
80000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
80000d96:	4a14      	ldr	r2, [pc, #80]	; (80000de8 <HAL_TIM_Base_MspInit+0x120>)
80000d98:	f043 0301 	orr.w	r3, r3, #1
80000d9c:	6313      	str	r3, [r2, #48]	; 0x30
80000d9e:	4b12      	ldr	r3, [pc, #72]	; (80000de8 <HAL_TIM_Base_MspInit+0x120>)
80000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
80000da2:	f003 0301 	and.w	r3, r3, #1
80000da6:	60bb      	str	r3, [r7, #8]
80000da8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
80000daa:	2301      	movs	r3, #1
80000dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
80000dae:	2302      	movs	r3, #2
80000db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
80000db2:	2300      	movs	r3, #0
80000db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
80000db6:	2300      	movs	r3, #0
80000db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
80000dba:	2301      	movs	r3, #1
80000dbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
80000dbe:	f107 0314 	add.w	r3, r7, #20
80000dc2:	4619      	mov	r1, r3
80000dc4:	480b      	ldr	r0, [pc, #44]	; (80000df4 <HAL_TIM_Base_MspInit+0x12c>)
80000dc6:	f000 fe4d 	bl	80001a64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
80000dca:	2200      	movs	r2, #0
80000dcc:	2100      	movs	r1, #0
80000dce:	201c      	movs	r0, #28
80000dd0:	f000 fa7f 	bl	800012d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
80000dd4:	201c      	movs	r0, #28
80000dd6:	f000 fa98 	bl	8000130a <HAL_NVIC_EnableIRQ>
}
80000dda:	bf00      	nop
80000ddc:	3728      	adds	r7, #40	; 0x28
80000dde:	46bd      	mov	sp, r7
80000de0:	bd80      	pop	{r7, pc}
80000de2:	bf00      	nop
80000de4:	40010000 	.word	0x40010000
80000de8:	40023800 	.word	0x40023800
80000dec:	200000b8 	.word	0x200000b8
80000df0:	40026428 	.word	0x40026428
80000df4:	40020000 	.word	0x40020000

80000df8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
80000df8:	b580      	push	{r7, lr}
80000dfa:	b088      	sub	sp, #32
80000dfc:	af00      	add	r7, sp, #0
80000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
80000e00:	f107 030c 	add.w	r3, r7, #12
80000e04:	2200      	movs	r2, #0
80000e06:	601a      	str	r2, [r3, #0]
80000e08:	605a      	str	r2, [r3, #4]
80000e0a:	609a      	str	r2, [r3, #8]
80000e0c:	60da      	str	r2, [r3, #12]
80000e0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
80000e10:	687b      	ldr	r3, [r7, #4]
80000e12:	681b      	ldr	r3, [r3, #0]
80000e14:	4a12      	ldr	r2, [pc, #72]	; (80000e60 <HAL_TIM_MspPostInit+0x68>)
80000e16:	4293      	cmp	r3, r2
80000e18:	d11e      	bne.n	80000e58 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
80000e1a:	2300      	movs	r3, #0
80000e1c:	60bb      	str	r3, [r7, #8]
80000e1e:	4b11      	ldr	r3, [pc, #68]	; (80000e64 <HAL_TIM_MspPostInit+0x6c>)
80000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
80000e22:	4a10      	ldr	r2, [pc, #64]	; (80000e64 <HAL_TIM_MspPostInit+0x6c>)
80000e24:	f043 0301 	orr.w	r3, r3, #1
80000e28:	6313      	str	r3, [r2, #48]	; 0x30
80000e2a:	4b0e      	ldr	r3, [pc, #56]	; (80000e64 <HAL_TIM_MspPostInit+0x6c>)
80000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
80000e2e:	f003 0301 	and.w	r3, r3, #1
80000e32:	60bb      	str	r3, [r7, #8]
80000e34:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
80000e36:	f44f 7380 	mov.w	r3, #256	; 0x100
80000e3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
80000e3c:	2302      	movs	r3, #2
80000e3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
80000e40:	2300      	movs	r3, #0
80000e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
80000e44:	2300      	movs	r3, #0
80000e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
80000e48:	2301      	movs	r3, #1
80000e4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
80000e4c:	f107 030c 	add.w	r3, r7, #12
80000e50:	4619      	mov	r1, r3
80000e52:	4805      	ldr	r0, [pc, #20]	; (80000e68 <HAL_TIM_MspPostInit+0x70>)
80000e54:	f000 fe06 	bl	80001a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
80000e58:	bf00      	nop
80000e5a:	3720      	adds	r7, #32
80000e5c:	46bd      	mov	sp, r7
80000e5e:	bd80      	pop	{r7, pc}
80000e60:	40010000 	.word	0x40010000
80000e64:	40023800 	.word	0x40023800
80000e68:	40020000 	.word	0x40020000

80000e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
80000e6c:	b580      	push	{r7, lr}
80000e6e:	b08a      	sub	sp, #40	; 0x28
80000e70:	af00      	add	r7, sp, #0
80000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
80000e74:	f107 0314 	add.w	r3, r7, #20
80000e78:	2200      	movs	r2, #0
80000e7a:	601a      	str	r2, [r3, #0]
80000e7c:	605a      	str	r2, [r3, #4]
80000e7e:	609a      	str	r2, [r3, #8]
80000e80:	60da      	str	r2, [r3, #12]
80000e82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
80000e84:	687b      	ldr	r3, [r7, #4]
80000e86:	681b      	ldr	r3, [r3, #0]
80000e88:	4a19      	ldr	r2, [pc, #100]	; (80000ef0 <HAL_UART_MspInit+0x84>)
80000e8a:	4293      	cmp	r3, r2
80000e8c:	d12b      	bne.n	80000ee6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
80000e8e:	2300      	movs	r3, #0
80000e90:	613b      	str	r3, [r7, #16]
80000e92:	4b18      	ldr	r3, [pc, #96]	; (80000ef4 <HAL_UART_MspInit+0x88>)
80000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
80000e96:	4a17      	ldr	r2, [pc, #92]	; (80000ef4 <HAL_UART_MspInit+0x88>)
80000e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
80000e9c:	6413      	str	r3, [r2, #64]	; 0x40
80000e9e:	4b15      	ldr	r3, [pc, #84]	; (80000ef4 <HAL_UART_MspInit+0x88>)
80000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
80000ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
80000ea6:	613b      	str	r3, [r7, #16]
80000ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
80000eaa:	2300      	movs	r3, #0
80000eac:	60fb      	str	r3, [r7, #12]
80000eae:	4b11      	ldr	r3, [pc, #68]	; (80000ef4 <HAL_UART_MspInit+0x88>)
80000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
80000eb2:	4a10      	ldr	r2, [pc, #64]	; (80000ef4 <HAL_UART_MspInit+0x88>)
80000eb4:	f043 0301 	orr.w	r3, r3, #1
80000eb8:	6313      	str	r3, [r2, #48]	; 0x30
80000eba:	4b0e      	ldr	r3, [pc, #56]	; (80000ef4 <HAL_UART_MspInit+0x88>)
80000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
80000ebe:	f003 0301 	and.w	r3, r3, #1
80000ec2:	60fb      	str	r3, [r7, #12]
80000ec4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
80000ec6:	230c      	movs	r3, #12
80000ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
80000eca:	2302      	movs	r3, #2
80000ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
80000ece:	2300      	movs	r3, #0
80000ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
80000ed2:	2303      	movs	r3, #3
80000ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
80000ed6:	2307      	movs	r3, #7
80000ed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
80000eda:	f107 0314 	add.w	r3, r7, #20
80000ede:	4619      	mov	r1, r3
80000ee0:	4805      	ldr	r0, [pc, #20]	; (80000ef8 <HAL_UART_MspInit+0x8c>)
80000ee2:	f000 fdbf 	bl	80001a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
80000ee6:	bf00      	nop
80000ee8:	3728      	adds	r7, #40	; 0x28
80000eea:	46bd      	mov	sp, r7
80000eec:	bd80      	pop	{r7, pc}
80000eee:	bf00      	nop
80000ef0:	40004400 	.word	0x40004400
80000ef4:	40023800 	.word	0x40023800
80000ef8:	40020000 	.word	0x40020000

80000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
80000efc:	b480      	push	{r7}
80000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
80000f00:	e7fe      	b.n	80000f00 <NMI_Handler+0x4>

80000f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
80000f02:	b480      	push	{r7}
80000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
80000f06:	e7fe      	b.n	80000f06 <HardFault_Handler+0x4>

80000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
80000f08:	b480      	push	{r7}
80000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
80000f0c:	e7fe      	b.n	80000f0c <MemManage_Handler+0x4>

80000f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
80000f0e:	b480      	push	{r7}
80000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
80000f12:	e7fe      	b.n	80000f12 <BusFault_Handler+0x4>

80000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
80000f14:	b480      	push	{r7}
80000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
80000f18:	e7fe      	b.n	80000f18 <UsageFault_Handler+0x4>

80000f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
80000f1a:	b480      	push	{r7}
80000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
80000f1e:	bf00      	nop
80000f20:	46bd      	mov	sp, r7
80000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
80000f26:	4770      	bx	lr

80000f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
80000f28:	b480      	push	{r7}
80000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
80000f2c:	bf00      	nop
80000f2e:	46bd      	mov	sp, r7
80000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
80000f34:	4770      	bx	lr

80000f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
80000f36:	b480      	push	{r7}
80000f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
80000f3a:	bf00      	nop
80000f3c:	46bd      	mov	sp, r7
80000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
80000f42:	4770      	bx	lr

80000f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
80000f44:	b580      	push	{r7, lr}
80000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
80000f48:	f000 f8a4 	bl	80001094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
80000f4c:	bf00      	nop
80000f4e:	bd80      	pop	{r7, pc}

80000f50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
80000f50:	b580      	push	{r7, lr}
80000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
80000f54:	4802      	ldr	r0, [pc, #8]	; (80000f60 <TIM2_IRQHandler+0x10>)
80000f56:	f002 f9df 	bl	80003318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
80000f5a:	bf00      	nop
80000f5c:	bd80      	pop	{r7, pc}
80000f5e:	bf00      	nop
80000f60:	20000070 	.word	0x20000070

80000f64 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
80000f64:	b580      	push	{r7, lr}
80000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
80000f68:	4802      	ldr	r0, [pc, #8]	; (80000f74 <DMA2_Stream1_IRQHandler+0x10>)
80000f6a:	f000 fb11 	bl	80001590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
80000f6e:	bf00      	nop
80000f70:	bd80      	pop	{r7, pc}
80000f72:	bf00      	nop
80000f74:	200000b8 	.word	0x200000b8

80000f78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
80000f78:	b480      	push	{r7}
80000f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
80000f7c:	4b06      	ldr	r3, [pc, #24]	; (80000f98 <SystemInit+0x20>)
80000f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
80000f82:	4a05      	ldr	r2, [pc, #20]	; (80000f98 <SystemInit+0x20>)
80000f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
80000f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
80000f8c:	bf00      	nop
80000f8e:	46bd      	mov	sp, r7
80000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
80000f94:	4770      	bx	lr
80000f96:	bf00      	nop
80000f98:	e000ed00 	.word	0xe000ed00

80000f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
80000f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80000fd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
80000fa0:	480d      	ldr	r0, [pc, #52]	; (80000fd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
80000fa2:	490e      	ldr	r1, [pc, #56]	; (80000fdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
80000fa4:	4a0e      	ldr	r2, [pc, #56]	; (80000fe0 <LoopFillZerobss+0x1e>)
  movs r3, #0
80000fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
80000fa8:	e002      	b.n	80000fb0 <LoopCopyDataInit>

80000faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
80000faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
80000fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
80000fae:	3304      	adds	r3, #4

80000fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
80000fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
80000fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
80000fb4:	d3f9      	bcc.n	80000faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
80000fb6:	4a0b      	ldr	r2, [pc, #44]	; (80000fe4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
80000fb8:	4c0b      	ldr	r4, [pc, #44]	; (80000fe8 <LoopFillZerobss+0x26>)
  movs r3, #0
80000fba:	2300      	movs	r3, #0
  b LoopFillZerobss
80000fbc:	e001      	b.n	80000fc2 <LoopFillZerobss>

80000fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
80000fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
80000fc0:	3204      	adds	r2, #4

80000fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
80000fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
80000fc4:	d3fb      	bcc.n	80000fbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
80000fc6:	f7ff ffd7 	bl	80000f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
80000fca:	f003 fe01 	bl	80004bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
80000fce:	f7ff fbb1 	bl	80000734 <main>
  bx  lr    
80000fd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
80000fd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
80000fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
80000fdc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
80000fe0:	80004c60 	.word	0x80004c60
  ldr r2, =_sbss
80000fe4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
80000fe8:	2000039c 	.word	0x2000039c

80000fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
80000fec:	e7fe      	b.n	80000fec <ADC_IRQHandler>
	...

80000ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
80000ff0:	b580      	push	{r7, lr}
80000ff2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
80000ff4:	4b0e      	ldr	r3, [pc, #56]	; (80001030 <HAL_Init+0x40>)
80000ff6:	681b      	ldr	r3, [r3, #0]
80000ff8:	4a0d      	ldr	r2, [pc, #52]	; (80001030 <HAL_Init+0x40>)
80000ffa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
80000ffe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
80001000:	4b0b      	ldr	r3, [pc, #44]	; (80001030 <HAL_Init+0x40>)
80001002:	681b      	ldr	r3, [r3, #0]
80001004:	4a0a      	ldr	r2, [pc, #40]	; (80001030 <HAL_Init+0x40>)
80001006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
8000100a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
8000100c:	4b08      	ldr	r3, [pc, #32]	; (80001030 <HAL_Init+0x40>)
8000100e:	681b      	ldr	r3, [r3, #0]
80001010:	4a07      	ldr	r2, [pc, #28]	; (80001030 <HAL_Init+0x40>)
80001012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
80001016:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
80001018:	2003      	movs	r0, #3
8000101a:	f000 f94f 	bl	800012bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
8000101e:	2000      	movs	r0, #0
80001020:	f000 f808 	bl	80001034 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
80001024:	f7ff fe28 	bl	80000c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
80001028:	2300      	movs	r3, #0
}
8000102a:	4618      	mov	r0, r3
8000102c:	bd80      	pop	{r7, pc}
8000102e:	bf00      	nop
80001030:	40023c00 	.word	0x40023c00

80001034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
80001034:	b580      	push	{r7, lr}
80001036:	b082      	sub	sp, #8
80001038:	af00      	add	r7, sp, #0
8000103a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
8000103c:	4b12      	ldr	r3, [pc, #72]	; (80001088 <HAL_InitTick+0x54>)
8000103e:	681a      	ldr	r2, [r3, #0]
80001040:	4b12      	ldr	r3, [pc, #72]	; (8000108c <HAL_InitTick+0x58>)
80001042:	781b      	ldrb	r3, [r3, #0]
80001044:	4619      	mov	r1, r3
80001046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
8000104a:	fbb3 f3f1 	udiv	r3, r3, r1
8000104e:	fbb2 f3f3 	udiv	r3, r2, r3
80001052:	4618      	mov	r0, r3
80001054:	f000 f967 	bl	80001326 <HAL_SYSTICK_Config>
80001058:	4603      	mov	r3, r0
8000105a:	2b00      	cmp	r3, #0
8000105c:	d001      	beq.n	80001062 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
8000105e:	2301      	movs	r3, #1
80001060:	e00e      	b.n	80001080 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
80001062:	687b      	ldr	r3, [r7, #4]
80001064:	2b0f      	cmp	r3, #15
80001066:	d80a      	bhi.n	8000107e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
80001068:	2200      	movs	r2, #0
8000106a:	6879      	ldr	r1, [r7, #4]
8000106c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
80001070:	f000 f92f 	bl	800012d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
80001074:	4a06      	ldr	r2, [pc, #24]	; (80001090 <HAL_InitTick+0x5c>)
80001076:	687b      	ldr	r3, [r7, #4]
80001078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
8000107a:	2300      	movs	r3, #0
8000107c:	e000      	b.n	80001080 <HAL_InitTick+0x4c>
    return HAL_ERROR;
8000107e:	2301      	movs	r3, #1
}
80001080:	4618      	mov	r0, r3
80001082:	3708      	adds	r7, #8
80001084:	46bd      	mov	sp, r7
80001086:	bd80      	pop	{r7, pc}
80001088:	20000000 	.word	0x20000000
8000108c:	20000008 	.word	0x20000008
80001090:	20000004 	.word	0x20000004

80001094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
80001094:	b480      	push	{r7}
80001096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
80001098:	4b06      	ldr	r3, [pc, #24]	; (800010b4 <HAL_IncTick+0x20>)
8000109a:	781b      	ldrb	r3, [r3, #0]
8000109c:	461a      	mov	r2, r3
8000109e:	4b06      	ldr	r3, [pc, #24]	; (800010b8 <HAL_IncTick+0x24>)
800010a0:	681b      	ldr	r3, [r3, #0]
800010a2:	4413      	add	r3, r2
800010a4:	4a04      	ldr	r2, [pc, #16]	; (800010b8 <HAL_IncTick+0x24>)
800010a6:	6013      	str	r3, [r2, #0]
}
800010a8:	bf00      	nop
800010aa:	46bd      	mov	sp, r7
800010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
800010b0:	4770      	bx	lr
800010b2:	bf00      	nop
800010b4:	20000008 	.word	0x20000008
800010b8:	20000398 	.word	0x20000398

800010bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
800010bc:	b480      	push	{r7}
800010be:	af00      	add	r7, sp, #0
  return uwTick;
800010c0:	4b03      	ldr	r3, [pc, #12]	; (800010d0 <HAL_GetTick+0x14>)
800010c2:	681b      	ldr	r3, [r3, #0]
}
800010c4:	4618      	mov	r0, r3
800010c6:	46bd      	mov	sp, r7
800010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
800010cc:	4770      	bx	lr
800010ce:	bf00      	nop
800010d0:	20000398 	.word	0x20000398

800010d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
800010d4:	b580      	push	{r7, lr}
800010d6:	b084      	sub	sp, #16
800010d8:	af00      	add	r7, sp, #0
800010da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
800010dc:	f7ff ffee 	bl	800010bc <HAL_GetTick>
800010e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
800010e2:	687b      	ldr	r3, [r7, #4]
800010e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
800010e6:	68fb      	ldr	r3, [r7, #12]
800010e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
800010ec:	d005      	beq.n	800010fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
800010ee:	4b0a      	ldr	r3, [pc, #40]	; (80001118 <HAL_Delay+0x44>)
800010f0:	781b      	ldrb	r3, [r3, #0]
800010f2:	461a      	mov	r2, r3
800010f4:	68fb      	ldr	r3, [r7, #12]
800010f6:	4413      	add	r3, r2
800010f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
800010fa:	bf00      	nop
800010fc:	f7ff ffde 	bl	800010bc <HAL_GetTick>
80001100:	4602      	mov	r2, r0
80001102:	68bb      	ldr	r3, [r7, #8]
80001104:	1ad3      	subs	r3, r2, r3
80001106:	68fa      	ldr	r2, [r7, #12]
80001108:	429a      	cmp	r2, r3
8000110a:	d8f7      	bhi.n	800010fc <HAL_Delay+0x28>
  {
  }
}
8000110c:	bf00      	nop
8000110e:	bf00      	nop
80001110:	3710      	adds	r7, #16
80001112:	46bd      	mov	sp, r7
80001114:	bd80      	pop	{r7, pc}
80001116:	bf00      	nop
80001118:	20000008 	.word	0x20000008

8000111c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
8000111c:	b480      	push	{r7}
8000111e:	b085      	sub	sp, #20
80001120:	af00      	add	r7, sp, #0
80001122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
80001124:	687b      	ldr	r3, [r7, #4]
80001126:	f003 0307 	and.w	r3, r3, #7
8000112a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
8000112c:	4b0c      	ldr	r3, [pc, #48]	; (80001160 <__NVIC_SetPriorityGrouping+0x44>)
8000112e:	68db      	ldr	r3, [r3, #12]
80001130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
80001132:	68ba      	ldr	r2, [r7, #8]
80001134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
80001138:	4013      	ands	r3, r2
8000113a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
8000113c:	68fb      	ldr	r3, [r7, #12]
8000113e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
80001140:	68bb      	ldr	r3, [r7, #8]
80001142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
80001144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
80001148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
8000114c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
8000114e:	4a04      	ldr	r2, [pc, #16]	; (80001160 <__NVIC_SetPriorityGrouping+0x44>)
80001150:	68bb      	ldr	r3, [r7, #8]
80001152:	60d3      	str	r3, [r2, #12]
}
80001154:	bf00      	nop
80001156:	3714      	adds	r7, #20
80001158:	46bd      	mov	sp, r7
8000115a:	f85d 7b04 	ldr.w	r7, [sp], #4
8000115e:	4770      	bx	lr
80001160:	e000ed00 	.word	0xe000ed00

80001164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
80001164:	b480      	push	{r7}
80001166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
80001168:	4b04      	ldr	r3, [pc, #16]	; (8000117c <__NVIC_GetPriorityGrouping+0x18>)
8000116a:	68db      	ldr	r3, [r3, #12]
8000116c:	0a1b      	lsrs	r3, r3, #8
8000116e:	f003 0307 	and.w	r3, r3, #7
}
80001172:	4618      	mov	r0, r3
80001174:	46bd      	mov	sp, r7
80001176:	f85d 7b04 	ldr.w	r7, [sp], #4
8000117a:	4770      	bx	lr
8000117c:	e000ed00 	.word	0xe000ed00

80001180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
80001180:	b480      	push	{r7}
80001182:	b083      	sub	sp, #12
80001184:	af00      	add	r7, sp, #0
80001186:	4603      	mov	r3, r0
80001188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
8000118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
8000118e:	2b00      	cmp	r3, #0
80001190:	db0b      	blt.n	800011aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
80001192:	79fb      	ldrb	r3, [r7, #7]
80001194:	f003 021f 	and.w	r2, r3, #31
80001198:	4907      	ldr	r1, [pc, #28]	; (800011b8 <__NVIC_EnableIRQ+0x38>)
8000119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
8000119e:	095b      	lsrs	r3, r3, #5
800011a0:	2001      	movs	r0, #1
800011a2:	fa00 f202 	lsl.w	r2, r0, r2
800011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
800011aa:	bf00      	nop
800011ac:	370c      	adds	r7, #12
800011ae:	46bd      	mov	sp, r7
800011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
800011b4:	4770      	bx	lr
800011b6:	bf00      	nop
800011b8:	e000e100 	.word	0xe000e100

800011bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
800011bc:	b480      	push	{r7}
800011be:	b083      	sub	sp, #12
800011c0:	af00      	add	r7, sp, #0
800011c2:	4603      	mov	r3, r0
800011c4:	6039      	str	r1, [r7, #0]
800011c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
800011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
800011cc:	2b00      	cmp	r3, #0
800011ce:	db0a      	blt.n	800011e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
800011d0:	683b      	ldr	r3, [r7, #0]
800011d2:	b2da      	uxtb	r2, r3
800011d4:	490c      	ldr	r1, [pc, #48]	; (80001208 <__NVIC_SetPriority+0x4c>)
800011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
800011da:	0112      	lsls	r2, r2, #4
800011dc:	b2d2      	uxtb	r2, r2
800011de:	440b      	add	r3, r1
800011e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
800011e4:	e00a      	b.n	800011fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
800011e6:	683b      	ldr	r3, [r7, #0]
800011e8:	b2da      	uxtb	r2, r3
800011ea:	4908      	ldr	r1, [pc, #32]	; (8000120c <__NVIC_SetPriority+0x50>)
800011ec:	79fb      	ldrb	r3, [r7, #7]
800011ee:	f003 030f 	and.w	r3, r3, #15
800011f2:	3b04      	subs	r3, #4
800011f4:	0112      	lsls	r2, r2, #4
800011f6:	b2d2      	uxtb	r2, r2
800011f8:	440b      	add	r3, r1
800011fa:	761a      	strb	r2, [r3, #24]
}
800011fc:	bf00      	nop
800011fe:	370c      	adds	r7, #12
80001200:	46bd      	mov	sp, r7
80001202:	f85d 7b04 	ldr.w	r7, [sp], #4
80001206:	4770      	bx	lr
80001208:	e000e100 	.word	0xe000e100
8000120c:	e000ed00 	.word	0xe000ed00

80001210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
80001210:	b480      	push	{r7}
80001212:	b089      	sub	sp, #36	; 0x24
80001214:	af00      	add	r7, sp, #0
80001216:	60f8      	str	r0, [r7, #12]
80001218:	60b9      	str	r1, [r7, #8]
8000121a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
8000121c:	68fb      	ldr	r3, [r7, #12]
8000121e:	f003 0307 	and.w	r3, r3, #7
80001222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
80001224:	69fb      	ldr	r3, [r7, #28]
80001226:	f1c3 0307 	rsb	r3, r3, #7
8000122a:	2b04      	cmp	r3, #4
8000122c:	bf28      	it	cs
8000122e:	2304      	movcs	r3, #4
80001230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
80001232:	69fb      	ldr	r3, [r7, #28]
80001234:	3304      	adds	r3, #4
80001236:	2b06      	cmp	r3, #6
80001238:	d902      	bls.n	80001240 <NVIC_EncodePriority+0x30>
8000123a:	69fb      	ldr	r3, [r7, #28]
8000123c:	3b03      	subs	r3, #3
8000123e:	e000      	b.n	80001242 <NVIC_EncodePriority+0x32>
80001240:	2300      	movs	r3, #0
80001242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
80001244:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
80001248:	69bb      	ldr	r3, [r7, #24]
8000124a:	fa02 f303 	lsl.w	r3, r2, r3
8000124e:	43da      	mvns	r2, r3
80001250:	68bb      	ldr	r3, [r7, #8]
80001252:	401a      	ands	r2, r3
80001254:	697b      	ldr	r3, [r7, #20]
80001256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
80001258:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
8000125c:	697b      	ldr	r3, [r7, #20]
8000125e:	fa01 f303 	lsl.w	r3, r1, r3
80001262:	43d9      	mvns	r1, r3
80001264:	687b      	ldr	r3, [r7, #4]
80001266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
80001268:	4313      	orrs	r3, r2
         );
}
8000126a:	4618      	mov	r0, r3
8000126c:	3724      	adds	r7, #36	; 0x24
8000126e:	46bd      	mov	sp, r7
80001270:	f85d 7b04 	ldr.w	r7, [sp], #4
80001274:	4770      	bx	lr
	...

80001278 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
80001278:	b580      	push	{r7, lr}
8000127a:	b082      	sub	sp, #8
8000127c:	af00      	add	r7, sp, #0
8000127e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
80001280:	687b      	ldr	r3, [r7, #4]
80001282:	3b01      	subs	r3, #1
80001284:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
80001288:	d301      	bcc.n	8000128e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
8000128a:	2301      	movs	r3, #1
8000128c:	e00f      	b.n	800012ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
8000128e:	4a0a      	ldr	r2, [pc, #40]	; (800012b8 <SysTick_Config+0x40>)
80001290:	687b      	ldr	r3, [r7, #4]
80001292:	3b01      	subs	r3, #1
80001294:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
80001296:	210f      	movs	r1, #15
80001298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
8000129c:	f7ff ff8e 	bl	800011bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
800012a0:	4b05      	ldr	r3, [pc, #20]	; (800012b8 <SysTick_Config+0x40>)
800012a2:	2200      	movs	r2, #0
800012a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
800012a6:	4b04      	ldr	r3, [pc, #16]	; (800012b8 <SysTick_Config+0x40>)
800012a8:	2207      	movs	r2, #7
800012aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
800012ac:	2300      	movs	r3, #0
}
800012ae:	4618      	mov	r0, r3
800012b0:	3708      	adds	r7, #8
800012b2:	46bd      	mov	sp, r7
800012b4:	bd80      	pop	{r7, pc}
800012b6:	bf00      	nop
800012b8:	e000e010 	.word	0xe000e010

800012bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
800012bc:	b580      	push	{r7, lr}
800012be:	b082      	sub	sp, #8
800012c0:	af00      	add	r7, sp, #0
800012c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
800012c4:	6878      	ldr	r0, [r7, #4]
800012c6:	f7ff ff29 	bl	8000111c <__NVIC_SetPriorityGrouping>
}
800012ca:	bf00      	nop
800012cc:	3708      	adds	r7, #8
800012ce:	46bd      	mov	sp, r7
800012d0:	bd80      	pop	{r7, pc}

800012d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
800012d2:	b580      	push	{r7, lr}
800012d4:	b086      	sub	sp, #24
800012d6:	af00      	add	r7, sp, #0
800012d8:	4603      	mov	r3, r0
800012da:	60b9      	str	r1, [r7, #8]
800012dc:	607a      	str	r2, [r7, #4]
800012de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
800012e0:	2300      	movs	r3, #0
800012e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
800012e4:	f7ff ff3e 	bl	80001164 <__NVIC_GetPriorityGrouping>
800012e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
800012ea:	687a      	ldr	r2, [r7, #4]
800012ec:	68b9      	ldr	r1, [r7, #8]
800012ee:	6978      	ldr	r0, [r7, #20]
800012f0:	f7ff ff8e 	bl	80001210 <NVIC_EncodePriority>
800012f4:	4602      	mov	r2, r0
800012f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
800012fa:	4611      	mov	r1, r2
800012fc:	4618      	mov	r0, r3
800012fe:	f7ff ff5d 	bl	800011bc <__NVIC_SetPriority>
}
80001302:	bf00      	nop
80001304:	3718      	adds	r7, #24
80001306:	46bd      	mov	sp, r7
80001308:	bd80      	pop	{r7, pc}

8000130a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
8000130a:	b580      	push	{r7, lr}
8000130c:	b082      	sub	sp, #8
8000130e:	af00      	add	r7, sp, #0
80001310:	4603      	mov	r3, r0
80001312:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
80001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
80001318:	4618      	mov	r0, r3
8000131a:	f7ff ff31 	bl	80001180 <__NVIC_EnableIRQ>
}
8000131e:	bf00      	nop
80001320:	3708      	adds	r7, #8
80001322:	46bd      	mov	sp, r7
80001324:	bd80      	pop	{r7, pc}

80001326 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
80001326:	b580      	push	{r7, lr}
80001328:	b082      	sub	sp, #8
8000132a:	af00      	add	r7, sp, #0
8000132c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
8000132e:	6878      	ldr	r0, [r7, #4]
80001330:	f7ff ffa2 	bl	80001278 <SysTick_Config>
80001334:	4603      	mov	r3, r0
}
80001336:	4618      	mov	r0, r3
80001338:	3708      	adds	r7, #8
8000133a:	46bd      	mov	sp, r7
8000133c:	bd80      	pop	{r7, pc}
	...

80001340 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
80001340:	b580      	push	{r7, lr}
80001342:	b086      	sub	sp, #24
80001344:	af00      	add	r7, sp, #0
80001346:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
80001348:	2300      	movs	r3, #0
8000134a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
8000134c:	f7ff feb6 	bl	800010bc <HAL_GetTick>
80001350:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
80001352:	687b      	ldr	r3, [r7, #4]
80001354:	2b00      	cmp	r3, #0
80001356:	d101      	bne.n	8000135c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
80001358:	2301      	movs	r3, #1
8000135a:	e099      	b.n	80001490 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
8000135c:	687b      	ldr	r3, [r7, #4]
8000135e:	2202      	movs	r2, #2
80001360:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
80001364:	687b      	ldr	r3, [r7, #4]
80001366:	2200      	movs	r2, #0
80001368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
8000136c:	687b      	ldr	r3, [r7, #4]
8000136e:	681b      	ldr	r3, [r3, #0]
80001370:	681a      	ldr	r2, [r3, #0]
80001372:	687b      	ldr	r3, [r7, #4]
80001374:	681b      	ldr	r3, [r3, #0]
80001376:	f022 0201 	bic.w	r2, r2, #1
8000137a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
8000137c:	e00f      	b.n	8000139e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
8000137e:	f7ff fe9d 	bl	800010bc <HAL_GetTick>
80001382:	4602      	mov	r2, r0
80001384:	693b      	ldr	r3, [r7, #16]
80001386:	1ad3      	subs	r3, r2, r3
80001388:	2b05      	cmp	r3, #5
8000138a:	d908      	bls.n	8000139e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
8000138c:	687b      	ldr	r3, [r7, #4]
8000138e:	2220      	movs	r2, #32
80001390:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
80001392:	687b      	ldr	r3, [r7, #4]
80001394:	2203      	movs	r2, #3
80001396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
8000139a:	2303      	movs	r3, #3
8000139c:	e078      	b.n	80001490 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
8000139e:	687b      	ldr	r3, [r7, #4]
800013a0:	681b      	ldr	r3, [r3, #0]
800013a2:	681b      	ldr	r3, [r3, #0]
800013a4:	f003 0301 	and.w	r3, r3, #1
800013a8:	2b00      	cmp	r3, #0
800013aa:	d1e8      	bne.n	8000137e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
800013ac:	687b      	ldr	r3, [r7, #4]
800013ae:	681b      	ldr	r3, [r3, #0]
800013b0:	681b      	ldr	r3, [r3, #0]
800013b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
800013b4:	697a      	ldr	r2, [r7, #20]
800013b6:	4b38      	ldr	r3, [pc, #224]	; (80001498 <HAL_DMA_Init+0x158>)
800013b8:	4013      	ands	r3, r2
800013ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
800013bc:	687b      	ldr	r3, [r7, #4]
800013be:	685a      	ldr	r2, [r3, #4]
800013c0:	687b      	ldr	r3, [r7, #4]
800013c2:	689b      	ldr	r3, [r3, #8]
800013c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
800013c6:	687b      	ldr	r3, [r7, #4]
800013c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
800013ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
800013cc:	687b      	ldr	r3, [r7, #4]
800013ce:	691b      	ldr	r3, [r3, #16]
800013d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
800013d2:	687b      	ldr	r3, [r7, #4]
800013d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
800013d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
800013d8:	687b      	ldr	r3, [r7, #4]
800013da:	699b      	ldr	r3, [r3, #24]
800013dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
800013de:	687b      	ldr	r3, [r7, #4]
800013e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
800013e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
800013e4:	687b      	ldr	r3, [r7, #4]
800013e6:	6a1b      	ldr	r3, [r3, #32]
800013e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
800013ea:	697a      	ldr	r2, [r7, #20]
800013ec:	4313      	orrs	r3, r2
800013ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
800013f0:	687b      	ldr	r3, [r7, #4]
800013f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
800013f4:	2b04      	cmp	r3, #4
800013f6:	d107      	bne.n	80001408 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
800013f8:	687b      	ldr	r3, [r7, #4]
800013fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
800013fc:	687b      	ldr	r3, [r7, #4]
800013fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
80001400:	4313      	orrs	r3, r2
80001402:	697a      	ldr	r2, [r7, #20]
80001404:	4313      	orrs	r3, r2
80001406:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
80001408:	687b      	ldr	r3, [r7, #4]
8000140a:	681b      	ldr	r3, [r3, #0]
8000140c:	697a      	ldr	r2, [r7, #20]
8000140e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
80001410:	687b      	ldr	r3, [r7, #4]
80001412:	681b      	ldr	r3, [r3, #0]
80001414:	695b      	ldr	r3, [r3, #20]
80001416:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
80001418:	697b      	ldr	r3, [r7, #20]
8000141a:	f023 0307 	bic.w	r3, r3, #7
8000141e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
80001420:	687b      	ldr	r3, [r7, #4]
80001422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
80001424:	697a      	ldr	r2, [r7, #20]
80001426:	4313      	orrs	r3, r2
80001428:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
8000142a:	687b      	ldr	r3, [r7, #4]
8000142c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
8000142e:	2b04      	cmp	r3, #4
80001430:	d117      	bne.n	80001462 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
80001432:	687b      	ldr	r3, [r7, #4]
80001434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
80001436:	697a      	ldr	r2, [r7, #20]
80001438:	4313      	orrs	r3, r2
8000143a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
8000143c:	687b      	ldr	r3, [r7, #4]
8000143e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
80001440:	2b00      	cmp	r3, #0
80001442:	d00e      	beq.n	80001462 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
80001444:	6878      	ldr	r0, [r7, #4]
80001446:	f000 fa91 	bl	8000196c <DMA_CheckFifoParam>
8000144a:	4603      	mov	r3, r0
8000144c:	2b00      	cmp	r3, #0
8000144e:	d008      	beq.n	80001462 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
80001450:	687b      	ldr	r3, [r7, #4]
80001452:	2240      	movs	r2, #64	; 0x40
80001454:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
80001456:	687b      	ldr	r3, [r7, #4]
80001458:	2201      	movs	r2, #1
8000145a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
8000145e:	2301      	movs	r3, #1
80001460:	e016      	b.n	80001490 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
80001462:	687b      	ldr	r3, [r7, #4]
80001464:	681b      	ldr	r3, [r3, #0]
80001466:	697a      	ldr	r2, [r7, #20]
80001468:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
8000146a:	6878      	ldr	r0, [r7, #4]
8000146c:	f000 fa48 	bl	80001900 <DMA_CalcBaseAndBitshift>
80001470:	4603      	mov	r3, r0
80001472:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
80001474:	687b      	ldr	r3, [r7, #4]
80001476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
80001478:	223f      	movs	r2, #63	; 0x3f
8000147a:	409a      	lsls	r2, r3
8000147c:	68fb      	ldr	r3, [r7, #12]
8000147e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
80001480:	687b      	ldr	r3, [r7, #4]
80001482:	2200      	movs	r2, #0
80001484:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
80001486:	687b      	ldr	r3, [r7, #4]
80001488:	2201      	movs	r2, #1
8000148a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
8000148e:	2300      	movs	r3, #0
}
80001490:	4618      	mov	r0, r3
80001492:	3718      	adds	r7, #24
80001494:	46bd      	mov	sp, r7
80001496:	bd80      	pop	{r7, pc}
80001498:	f010803f 	.word	0xf010803f

8000149c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
8000149c:	b580      	push	{r7, lr}
8000149e:	b086      	sub	sp, #24
800014a0:	af00      	add	r7, sp, #0
800014a2:	60f8      	str	r0, [r7, #12]
800014a4:	60b9      	str	r1, [r7, #8]
800014a6:	607a      	str	r2, [r7, #4]
800014a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
800014aa:	2300      	movs	r3, #0
800014ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
800014ae:	68fb      	ldr	r3, [r7, #12]
800014b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
800014b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
800014b4:	68fb      	ldr	r3, [r7, #12]
800014b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
800014ba:	2b01      	cmp	r3, #1
800014bc:	d101      	bne.n	800014c2 <HAL_DMA_Start_IT+0x26>
800014be:	2302      	movs	r3, #2
800014c0:	e040      	b.n	80001544 <HAL_DMA_Start_IT+0xa8>
800014c2:	68fb      	ldr	r3, [r7, #12]
800014c4:	2201      	movs	r2, #1
800014c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
800014ca:	68fb      	ldr	r3, [r7, #12]
800014cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
800014d0:	b2db      	uxtb	r3, r3
800014d2:	2b01      	cmp	r3, #1
800014d4:	d12f      	bne.n	80001536 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
800014d6:	68fb      	ldr	r3, [r7, #12]
800014d8:	2202      	movs	r2, #2
800014da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
800014de:	68fb      	ldr	r3, [r7, #12]
800014e0:	2200      	movs	r2, #0
800014e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
800014e4:	683b      	ldr	r3, [r7, #0]
800014e6:	687a      	ldr	r2, [r7, #4]
800014e8:	68b9      	ldr	r1, [r7, #8]
800014ea:	68f8      	ldr	r0, [r7, #12]
800014ec:	f000 f9da 	bl	800018a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
800014f0:	68fb      	ldr	r3, [r7, #12]
800014f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
800014f4:	223f      	movs	r2, #63	; 0x3f
800014f6:	409a      	lsls	r2, r3
800014f8:	693b      	ldr	r3, [r7, #16]
800014fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
800014fc:	68fb      	ldr	r3, [r7, #12]
800014fe:	681b      	ldr	r3, [r3, #0]
80001500:	681a      	ldr	r2, [r3, #0]
80001502:	68fb      	ldr	r3, [r7, #12]
80001504:	681b      	ldr	r3, [r3, #0]
80001506:	f042 0216 	orr.w	r2, r2, #22
8000150a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
8000150c:	68fb      	ldr	r3, [r7, #12]
8000150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
80001510:	2b00      	cmp	r3, #0
80001512:	d007      	beq.n	80001524 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
80001514:	68fb      	ldr	r3, [r7, #12]
80001516:	681b      	ldr	r3, [r3, #0]
80001518:	681a      	ldr	r2, [r3, #0]
8000151a:	68fb      	ldr	r3, [r7, #12]
8000151c:	681b      	ldr	r3, [r3, #0]
8000151e:	f042 0208 	orr.w	r2, r2, #8
80001522:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
80001524:	68fb      	ldr	r3, [r7, #12]
80001526:	681b      	ldr	r3, [r3, #0]
80001528:	681a      	ldr	r2, [r3, #0]
8000152a:	68fb      	ldr	r3, [r7, #12]
8000152c:	681b      	ldr	r3, [r3, #0]
8000152e:	f042 0201 	orr.w	r2, r2, #1
80001532:	601a      	str	r2, [r3, #0]
80001534:	e005      	b.n	80001542 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
80001536:	68fb      	ldr	r3, [r7, #12]
80001538:	2200      	movs	r2, #0
8000153a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
8000153e:	2302      	movs	r3, #2
80001540:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
80001542:	7dfb      	ldrb	r3, [r7, #23]
}
80001544:	4618      	mov	r0, r3
80001546:	3718      	adds	r7, #24
80001548:	46bd      	mov	sp, r7
8000154a:	bd80      	pop	{r7, pc}

8000154c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
8000154c:	b480      	push	{r7}
8000154e:	b083      	sub	sp, #12
80001550:	af00      	add	r7, sp, #0
80001552:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
80001554:	687b      	ldr	r3, [r7, #4]
80001556:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
8000155a:	b2db      	uxtb	r3, r3
8000155c:	2b02      	cmp	r3, #2
8000155e:	d004      	beq.n	8000156a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
80001560:	687b      	ldr	r3, [r7, #4]
80001562:	2280      	movs	r2, #128	; 0x80
80001564:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
80001566:	2301      	movs	r3, #1
80001568:	e00c      	b.n	80001584 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
8000156a:	687b      	ldr	r3, [r7, #4]
8000156c:	2205      	movs	r2, #5
8000156e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
80001572:	687b      	ldr	r3, [r7, #4]
80001574:	681b      	ldr	r3, [r3, #0]
80001576:	681a      	ldr	r2, [r3, #0]
80001578:	687b      	ldr	r3, [r7, #4]
8000157a:	681b      	ldr	r3, [r3, #0]
8000157c:	f022 0201 	bic.w	r2, r2, #1
80001580:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
80001582:	2300      	movs	r3, #0
}
80001584:	4618      	mov	r0, r3
80001586:	370c      	adds	r7, #12
80001588:	46bd      	mov	sp, r7
8000158a:	f85d 7b04 	ldr.w	r7, [sp], #4
8000158e:	4770      	bx	lr

80001590 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
80001590:	b580      	push	{r7, lr}
80001592:	b086      	sub	sp, #24
80001594:	af00      	add	r7, sp, #0
80001596:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
80001598:	2300      	movs	r3, #0
8000159a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
8000159c:	4b8e      	ldr	r3, [pc, #568]	; (800017d8 <HAL_DMA_IRQHandler+0x248>)
8000159e:	681b      	ldr	r3, [r3, #0]
800015a0:	4a8e      	ldr	r2, [pc, #568]	; (800017dc <HAL_DMA_IRQHandler+0x24c>)
800015a2:	fba2 2303 	umull	r2, r3, r2, r3
800015a6:	0a9b      	lsrs	r3, r3, #10
800015a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
800015aa:	687b      	ldr	r3, [r7, #4]
800015ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
800015ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
800015b0:	693b      	ldr	r3, [r7, #16]
800015b2:	681b      	ldr	r3, [r3, #0]
800015b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
800015b6:	687b      	ldr	r3, [r7, #4]
800015b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
800015ba:	2208      	movs	r2, #8
800015bc:	409a      	lsls	r2, r3
800015be:	68fb      	ldr	r3, [r7, #12]
800015c0:	4013      	ands	r3, r2
800015c2:	2b00      	cmp	r3, #0
800015c4:	d01a      	beq.n	800015fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
800015c6:	687b      	ldr	r3, [r7, #4]
800015c8:	681b      	ldr	r3, [r3, #0]
800015ca:	681b      	ldr	r3, [r3, #0]
800015cc:	f003 0304 	and.w	r3, r3, #4
800015d0:	2b00      	cmp	r3, #0
800015d2:	d013      	beq.n	800015fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
800015d4:	687b      	ldr	r3, [r7, #4]
800015d6:	681b      	ldr	r3, [r3, #0]
800015d8:	681a      	ldr	r2, [r3, #0]
800015da:	687b      	ldr	r3, [r7, #4]
800015dc:	681b      	ldr	r3, [r3, #0]
800015de:	f022 0204 	bic.w	r2, r2, #4
800015e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
800015e4:	687b      	ldr	r3, [r7, #4]
800015e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
800015e8:	2208      	movs	r2, #8
800015ea:	409a      	lsls	r2, r3
800015ec:	693b      	ldr	r3, [r7, #16]
800015ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
800015f0:	687b      	ldr	r3, [r7, #4]
800015f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
800015f4:	f043 0201 	orr.w	r2, r3, #1
800015f8:	687b      	ldr	r3, [r7, #4]
800015fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
800015fc:	687b      	ldr	r3, [r7, #4]
800015fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
80001600:	2201      	movs	r2, #1
80001602:	409a      	lsls	r2, r3
80001604:	68fb      	ldr	r3, [r7, #12]
80001606:	4013      	ands	r3, r2
80001608:	2b00      	cmp	r3, #0
8000160a:	d012      	beq.n	80001632 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
8000160c:	687b      	ldr	r3, [r7, #4]
8000160e:	681b      	ldr	r3, [r3, #0]
80001610:	695b      	ldr	r3, [r3, #20]
80001612:	f003 0380 	and.w	r3, r3, #128	; 0x80
80001616:	2b00      	cmp	r3, #0
80001618:	d00b      	beq.n	80001632 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
8000161a:	687b      	ldr	r3, [r7, #4]
8000161c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
8000161e:	2201      	movs	r2, #1
80001620:	409a      	lsls	r2, r3
80001622:	693b      	ldr	r3, [r7, #16]
80001624:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
80001626:	687b      	ldr	r3, [r7, #4]
80001628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
8000162a:	f043 0202 	orr.w	r2, r3, #2
8000162e:	687b      	ldr	r3, [r7, #4]
80001630:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
80001632:	687b      	ldr	r3, [r7, #4]
80001634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
80001636:	2204      	movs	r2, #4
80001638:	409a      	lsls	r2, r3
8000163a:	68fb      	ldr	r3, [r7, #12]
8000163c:	4013      	ands	r3, r2
8000163e:	2b00      	cmp	r3, #0
80001640:	d012      	beq.n	80001668 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
80001642:	687b      	ldr	r3, [r7, #4]
80001644:	681b      	ldr	r3, [r3, #0]
80001646:	681b      	ldr	r3, [r3, #0]
80001648:	f003 0302 	and.w	r3, r3, #2
8000164c:	2b00      	cmp	r3, #0
8000164e:	d00b      	beq.n	80001668 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
80001650:	687b      	ldr	r3, [r7, #4]
80001652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
80001654:	2204      	movs	r2, #4
80001656:	409a      	lsls	r2, r3
80001658:	693b      	ldr	r3, [r7, #16]
8000165a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
8000165c:	687b      	ldr	r3, [r7, #4]
8000165e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
80001660:	f043 0204 	orr.w	r2, r3, #4
80001664:	687b      	ldr	r3, [r7, #4]
80001666:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
80001668:	687b      	ldr	r3, [r7, #4]
8000166a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
8000166c:	2210      	movs	r2, #16
8000166e:	409a      	lsls	r2, r3
80001670:	68fb      	ldr	r3, [r7, #12]
80001672:	4013      	ands	r3, r2
80001674:	2b00      	cmp	r3, #0
80001676:	d043      	beq.n	80001700 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
80001678:	687b      	ldr	r3, [r7, #4]
8000167a:	681b      	ldr	r3, [r3, #0]
8000167c:	681b      	ldr	r3, [r3, #0]
8000167e:	f003 0308 	and.w	r3, r3, #8
80001682:	2b00      	cmp	r3, #0
80001684:	d03c      	beq.n	80001700 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
80001686:	687b      	ldr	r3, [r7, #4]
80001688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
8000168a:	2210      	movs	r2, #16
8000168c:	409a      	lsls	r2, r3
8000168e:	693b      	ldr	r3, [r7, #16]
80001690:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
80001692:	687b      	ldr	r3, [r7, #4]
80001694:	681b      	ldr	r3, [r3, #0]
80001696:	681b      	ldr	r3, [r3, #0]
80001698:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
8000169c:	2b00      	cmp	r3, #0
8000169e:	d018      	beq.n	800016d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
800016a0:	687b      	ldr	r3, [r7, #4]
800016a2:	681b      	ldr	r3, [r3, #0]
800016a4:	681b      	ldr	r3, [r3, #0]
800016a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
800016aa:	2b00      	cmp	r3, #0
800016ac:	d108      	bne.n	800016c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
800016ae:	687b      	ldr	r3, [r7, #4]
800016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
800016b2:	2b00      	cmp	r3, #0
800016b4:	d024      	beq.n	80001700 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
800016b6:	687b      	ldr	r3, [r7, #4]
800016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
800016ba:	6878      	ldr	r0, [r7, #4]
800016bc:	4798      	blx	r3
800016be:	e01f      	b.n	80001700 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
800016c0:	687b      	ldr	r3, [r7, #4]
800016c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
800016c4:	2b00      	cmp	r3, #0
800016c6:	d01b      	beq.n	80001700 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
800016c8:	687b      	ldr	r3, [r7, #4]
800016ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
800016cc:	6878      	ldr	r0, [r7, #4]
800016ce:	4798      	blx	r3
800016d0:	e016      	b.n	80001700 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
800016d2:	687b      	ldr	r3, [r7, #4]
800016d4:	681b      	ldr	r3, [r3, #0]
800016d6:	681b      	ldr	r3, [r3, #0]
800016d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
800016dc:	2b00      	cmp	r3, #0
800016de:	d107      	bne.n	800016f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
800016e0:	687b      	ldr	r3, [r7, #4]
800016e2:	681b      	ldr	r3, [r3, #0]
800016e4:	681a      	ldr	r2, [r3, #0]
800016e6:	687b      	ldr	r3, [r7, #4]
800016e8:	681b      	ldr	r3, [r3, #0]
800016ea:	f022 0208 	bic.w	r2, r2, #8
800016ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
800016f0:	687b      	ldr	r3, [r7, #4]
800016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
800016f4:	2b00      	cmp	r3, #0
800016f6:	d003      	beq.n	80001700 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
800016f8:	687b      	ldr	r3, [r7, #4]
800016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
800016fc:	6878      	ldr	r0, [r7, #4]
800016fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
80001700:	687b      	ldr	r3, [r7, #4]
80001702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
80001704:	2220      	movs	r2, #32
80001706:	409a      	lsls	r2, r3
80001708:	68fb      	ldr	r3, [r7, #12]
8000170a:	4013      	ands	r3, r2
8000170c:	2b00      	cmp	r3, #0
8000170e:	f000 808f 	beq.w	80001830 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
80001712:	687b      	ldr	r3, [r7, #4]
80001714:	681b      	ldr	r3, [r3, #0]
80001716:	681b      	ldr	r3, [r3, #0]
80001718:	f003 0310 	and.w	r3, r3, #16
8000171c:	2b00      	cmp	r3, #0
8000171e:	f000 8087 	beq.w	80001830 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
80001722:	687b      	ldr	r3, [r7, #4]
80001724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
80001726:	2220      	movs	r2, #32
80001728:	409a      	lsls	r2, r3
8000172a:	693b      	ldr	r3, [r7, #16]
8000172c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
8000172e:	687b      	ldr	r3, [r7, #4]
80001730:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
80001734:	b2db      	uxtb	r3, r3
80001736:	2b05      	cmp	r3, #5
80001738:	d136      	bne.n	800017a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
8000173a:	687b      	ldr	r3, [r7, #4]
8000173c:	681b      	ldr	r3, [r3, #0]
8000173e:	681a      	ldr	r2, [r3, #0]
80001740:	687b      	ldr	r3, [r7, #4]
80001742:	681b      	ldr	r3, [r3, #0]
80001744:	f022 0216 	bic.w	r2, r2, #22
80001748:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
8000174a:	687b      	ldr	r3, [r7, #4]
8000174c:	681b      	ldr	r3, [r3, #0]
8000174e:	695a      	ldr	r2, [r3, #20]
80001750:	687b      	ldr	r3, [r7, #4]
80001752:	681b      	ldr	r3, [r3, #0]
80001754:	f022 0280 	bic.w	r2, r2, #128	; 0x80
80001758:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
8000175a:	687b      	ldr	r3, [r7, #4]
8000175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
8000175e:	2b00      	cmp	r3, #0
80001760:	d103      	bne.n	8000176a <HAL_DMA_IRQHandler+0x1da>
80001762:	687b      	ldr	r3, [r7, #4]
80001764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
80001766:	2b00      	cmp	r3, #0
80001768:	d007      	beq.n	8000177a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
8000176a:	687b      	ldr	r3, [r7, #4]
8000176c:	681b      	ldr	r3, [r3, #0]
8000176e:	681a      	ldr	r2, [r3, #0]
80001770:	687b      	ldr	r3, [r7, #4]
80001772:	681b      	ldr	r3, [r3, #0]
80001774:	f022 0208 	bic.w	r2, r2, #8
80001778:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
8000177a:	687b      	ldr	r3, [r7, #4]
8000177c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
8000177e:	223f      	movs	r2, #63	; 0x3f
80001780:	409a      	lsls	r2, r3
80001782:	693b      	ldr	r3, [r7, #16]
80001784:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
80001786:	687b      	ldr	r3, [r7, #4]
80001788:	2201      	movs	r2, #1
8000178a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
8000178e:	687b      	ldr	r3, [r7, #4]
80001790:	2200      	movs	r2, #0
80001792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
80001796:	687b      	ldr	r3, [r7, #4]
80001798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
8000179a:	2b00      	cmp	r3, #0
8000179c:	d07e      	beq.n	8000189c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
8000179e:	687b      	ldr	r3, [r7, #4]
800017a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
800017a2:	6878      	ldr	r0, [r7, #4]
800017a4:	4798      	blx	r3
        }
        return;
800017a6:	e079      	b.n	8000189c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
800017a8:	687b      	ldr	r3, [r7, #4]
800017aa:	681b      	ldr	r3, [r3, #0]
800017ac:	681b      	ldr	r3, [r3, #0]
800017ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
800017b2:	2b00      	cmp	r3, #0
800017b4:	d01d      	beq.n	800017f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
800017b6:	687b      	ldr	r3, [r7, #4]
800017b8:	681b      	ldr	r3, [r3, #0]
800017ba:	681b      	ldr	r3, [r3, #0]
800017bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
800017c0:	2b00      	cmp	r3, #0
800017c2:	d10d      	bne.n	800017e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
800017c4:	687b      	ldr	r3, [r7, #4]
800017c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
800017c8:	2b00      	cmp	r3, #0
800017ca:	d031      	beq.n	80001830 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
800017cc:	687b      	ldr	r3, [r7, #4]
800017ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
800017d0:	6878      	ldr	r0, [r7, #4]
800017d2:	4798      	blx	r3
800017d4:	e02c      	b.n	80001830 <HAL_DMA_IRQHandler+0x2a0>
800017d6:	bf00      	nop
800017d8:	20000000 	.word	0x20000000
800017dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
800017e0:	687b      	ldr	r3, [r7, #4]
800017e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
800017e4:	2b00      	cmp	r3, #0
800017e6:	d023      	beq.n	80001830 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
800017e8:	687b      	ldr	r3, [r7, #4]
800017ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
800017ec:	6878      	ldr	r0, [r7, #4]
800017ee:	4798      	blx	r3
800017f0:	e01e      	b.n	80001830 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
800017f2:	687b      	ldr	r3, [r7, #4]
800017f4:	681b      	ldr	r3, [r3, #0]
800017f6:	681b      	ldr	r3, [r3, #0]
800017f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
800017fc:	2b00      	cmp	r3, #0
800017fe:	d10f      	bne.n	80001820 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
80001800:	687b      	ldr	r3, [r7, #4]
80001802:	681b      	ldr	r3, [r3, #0]
80001804:	681a      	ldr	r2, [r3, #0]
80001806:	687b      	ldr	r3, [r7, #4]
80001808:	681b      	ldr	r3, [r3, #0]
8000180a:	f022 0210 	bic.w	r2, r2, #16
8000180e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
80001810:	687b      	ldr	r3, [r7, #4]
80001812:	2201      	movs	r2, #1
80001814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
80001818:	687b      	ldr	r3, [r7, #4]
8000181a:	2200      	movs	r2, #0
8000181c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
80001820:	687b      	ldr	r3, [r7, #4]
80001822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
80001824:	2b00      	cmp	r3, #0
80001826:	d003      	beq.n	80001830 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
80001828:	687b      	ldr	r3, [r7, #4]
8000182a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
8000182c:	6878      	ldr	r0, [r7, #4]
8000182e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
80001830:	687b      	ldr	r3, [r7, #4]
80001832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
80001834:	2b00      	cmp	r3, #0
80001836:	d032      	beq.n	8000189e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
80001838:	687b      	ldr	r3, [r7, #4]
8000183a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
8000183c:	f003 0301 	and.w	r3, r3, #1
80001840:	2b00      	cmp	r3, #0
80001842:	d022      	beq.n	8000188a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
80001844:	687b      	ldr	r3, [r7, #4]
80001846:	2205      	movs	r2, #5
80001848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
8000184c:	687b      	ldr	r3, [r7, #4]
8000184e:	681b      	ldr	r3, [r3, #0]
80001850:	681a      	ldr	r2, [r3, #0]
80001852:	687b      	ldr	r3, [r7, #4]
80001854:	681b      	ldr	r3, [r3, #0]
80001856:	f022 0201 	bic.w	r2, r2, #1
8000185a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
8000185c:	68bb      	ldr	r3, [r7, #8]
8000185e:	3301      	adds	r3, #1
80001860:	60bb      	str	r3, [r7, #8]
80001862:	697a      	ldr	r2, [r7, #20]
80001864:	429a      	cmp	r2, r3
80001866:	d307      	bcc.n	80001878 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
80001868:	687b      	ldr	r3, [r7, #4]
8000186a:	681b      	ldr	r3, [r3, #0]
8000186c:	681b      	ldr	r3, [r3, #0]
8000186e:	f003 0301 	and.w	r3, r3, #1
80001872:	2b00      	cmp	r3, #0
80001874:	d1f2      	bne.n	8000185c <HAL_DMA_IRQHandler+0x2cc>
80001876:	e000      	b.n	8000187a <HAL_DMA_IRQHandler+0x2ea>
          break;
80001878:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
8000187a:	687b      	ldr	r3, [r7, #4]
8000187c:	2201      	movs	r2, #1
8000187e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
80001882:	687b      	ldr	r3, [r7, #4]
80001884:	2200      	movs	r2, #0
80001886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
8000188a:	687b      	ldr	r3, [r7, #4]
8000188c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
8000188e:	2b00      	cmp	r3, #0
80001890:	d005      	beq.n	8000189e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
80001892:	687b      	ldr	r3, [r7, #4]
80001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
80001896:	6878      	ldr	r0, [r7, #4]
80001898:	4798      	blx	r3
8000189a:	e000      	b.n	8000189e <HAL_DMA_IRQHandler+0x30e>
        return;
8000189c:	bf00      	nop
    }
  }
}
8000189e:	3718      	adds	r7, #24
800018a0:	46bd      	mov	sp, r7
800018a2:	bd80      	pop	{r7, pc}

800018a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
800018a4:	b480      	push	{r7}
800018a6:	b085      	sub	sp, #20
800018a8:	af00      	add	r7, sp, #0
800018aa:	60f8      	str	r0, [r7, #12]
800018ac:	60b9      	str	r1, [r7, #8]
800018ae:	607a      	str	r2, [r7, #4]
800018b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
800018b2:	68fb      	ldr	r3, [r7, #12]
800018b4:	681b      	ldr	r3, [r3, #0]
800018b6:	681a      	ldr	r2, [r3, #0]
800018b8:	68fb      	ldr	r3, [r7, #12]
800018ba:	681b      	ldr	r3, [r3, #0]
800018bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
800018c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
800018c2:	68fb      	ldr	r3, [r7, #12]
800018c4:	681b      	ldr	r3, [r3, #0]
800018c6:	683a      	ldr	r2, [r7, #0]
800018c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
800018ca:	68fb      	ldr	r3, [r7, #12]
800018cc:	689b      	ldr	r3, [r3, #8]
800018ce:	2b40      	cmp	r3, #64	; 0x40
800018d0:	d108      	bne.n	800018e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
800018d2:	68fb      	ldr	r3, [r7, #12]
800018d4:	681b      	ldr	r3, [r3, #0]
800018d6:	687a      	ldr	r2, [r7, #4]
800018d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
800018da:	68fb      	ldr	r3, [r7, #12]
800018dc:	681b      	ldr	r3, [r3, #0]
800018de:	68ba      	ldr	r2, [r7, #8]
800018e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
800018e2:	e007      	b.n	800018f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
800018e4:	68fb      	ldr	r3, [r7, #12]
800018e6:	681b      	ldr	r3, [r3, #0]
800018e8:	68ba      	ldr	r2, [r7, #8]
800018ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
800018ec:	68fb      	ldr	r3, [r7, #12]
800018ee:	681b      	ldr	r3, [r3, #0]
800018f0:	687a      	ldr	r2, [r7, #4]
800018f2:	60da      	str	r2, [r3, #12]
}
800018f4:	bf00      	nop
800018f6:	3714      	adds	r7, #20
800018f8:	46bd      	mov	sp, r7
800018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
800018fe:	4770      	bx	lr

80001900 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
80001900:	b480      	push	{r7}
80001902:	b085      	sub	sp, #20
80001904:	af00      	add	r7, sp, #0
80001906:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
80001908:	687b      	ldr	r3, [r7, #4]
8000190a:	681b      	ldr	r3, [r3, #0]
8000190c:	b2db      	uxtb	r3, r3
8000190e:	3b10      	subs	r3, #16
80001910:	4a14      	ldr	r2, [pc, #80]	; (80001964 <DMA_CalcBaseAndBitshift+0x64>)
80001912:	fba2 2303 	umull	r2, r3, r2, r3
80001916:	091b      	lsrs	r3, r3, #4
80001918:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
8000191a:	4a13      	ldr	r2, [pc, #76]	; (80001968 <DMA_CalcBaseAndBitshift+0x68>)
8000191c:	68fb      	ldr	r3, [r7, #12]
8000191e:	4413      	add	r3, r2
80001920:	781b      	ldrb	r3, [r3, #0]
80001922:	461a      	mov	r2, r3
80001924:	687b      	ldr	r3, [r7, #4]
80001926:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
80001928:	68fb      	ldr	r3, [r7, #12]
8000192a:	2b03      	cmp	r3, #3
8000192c:	d909      	bls.n	80001942 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
8000192e:	687b      	ldr	r3, [r7, #4]
80001930:	681b      	ldr	r3, [r3, #0]
80001932:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
80001936:	f023 0303 	bic.w	r3, r3, #3
8000193a:	1d1a      	adds	r2, r3, #4
8000193c:	687b      	ldr	r3, [r7, #4]
8000193e:	659a      	str	r2, [r3, #88]	; 0x58
80001940:	e007      	b.n	80001952 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
80001942:	687b      	ldr	r3, [r7, #4]
80001944:	681b      	ldr	r3, [r3, #0]
80001946:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
8000194a:	f023 0303 	bic.w	r3, r3, #3
8000194e:	687a      	ldr	r2, [r7, #4]
80001950:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
80001952:	687b      	ldr	r3, [r7, #4]
80001954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
80001956:	4618      	mov	r0, r3
80001958:	3714      	adds	r7, #20
8000195a:	46bd      	mov	sp, r7
8000195c:	f85d 7b04 	ldr.w	r7, [sp], #4
80001960:	4770      	bx	lr
80001962:	bf00      	nop
80001964:	aaaaaaab 	.word	0xaaaaaaab
80001968:	80004c48 	.word	0x80004c48

8000196c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
8000196c:	b480      	push	{r7}
8000196e:	b085      	sub	sp, #20
80001970:	af00      	add	r7, sp, #0
80001972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
80001974:	2300      	movs	r3, #0
80001976:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
80001978:	687b      	ldr	r3, [r7, #4]
8000197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
8000197c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
8000197e:	687b      	ldr	r3, [r7, #4]
80001980:	699b      	ldr	r3, [r3, #24]
80001982:	2b00      	cmp	r3, #0
80001984:	d11f      	bne.n	800019c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
80001986:	68bb      	ldr	r3, [r7, #8]
80001988:	2b03      	cmp	r3, #3
8000198a:	d856      	bhi.n	80001a3a <DMA_CheckFifoParam+0xce>
8000198c:	a201      	add	r2, pc, #4	; (adr r2, 80001994 <DMA_CheckFifoParam+0x28>)
8000198e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
80001992:	bf00      	nop
80001994:	800019a5 	.word	0x800019a5
80001998:	800019b7 	.word	0x800019b7
8000199c:	800019a5 	.word	0x800019a5
800019a0:	80001a3b 	.word	0x80001a3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
800019a4:	687b      	ldr	r3, [r7, #4]
800019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
800019a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
800019ac:	2b00      	cmp	r3, #0
800019ae:	d046      	beq.n	80001a3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
800019b0:	2301      	movs	r3, #1
800019b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
800019b4:	e043      	b.n	80001a3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
800019b6:	687b      	ldr	r3, [r7, #4]
800019b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
800019ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
800019be:	d140      	bne.n	80001a42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
800019c0:	2301      	movs	r3, #1
800019c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
800019c4:	e03d      	b.n	80001a42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
800019c6:	687b      	ldr	r3, [r7, #4]
800019c8:	699b      	ldr	r3, [r3, #24]
800019ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
800019ce:	d121      	bne.n	80001a14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
800019d0:	68bb      	ldr	r3, [r7, #8]
800019d2:	2b03      	cmp	r3, #3
800019d4:	d837      	bhi.n	80001a46 <DMA_CheckFifoParam+0xda>
800019d6:	a201      	add	r2, pc, #4	; (adr r2, 800019dc <DMA_CheckFifoParam+0x70>)
800019d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
800019dc:	800019ed 	.word	0x800019ed
800019e0:	800019f3 	.word	0x800019f3
800019e4:	800019ed 	.word	0x800019ed
800019e8:	80001a05 	.word	0x80001a05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
800019ec:	2301      	movs	r3, #1
800019ee:	73fb      	strb	r3, [r7, #15]
      break;
800019f0:	e030      	b.n	80001a54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
800019f2:	687b      	ldr	r3, [r7, #4]
800019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
800019f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
800019fa:	2b00      	cmp	r3, #0
800019fc:	d025      	beq.n	80001a4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
800019fe:	2301      	movs	r3, #1
80001a00:	73fb      	strb	r3, [r7, #15]
      }
      break;
80001a02:	e022      	b.n	80001a4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
80001a04:	687b      	ldr	r3, [r7, #4]
80001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
80001a08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
80001a0c:	d11f      	bne.n	80001a4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
80001a0e:	2301      	movs	r3, #1
80001a10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
80001a12:	e01c      	b.n	80001a4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
80001a14:	68bb      	ldr	r3, [r7, #8]
80001a16:	2b02      	cmp	r3, #2
80001a18:	d903      	bls.n	80001a22 <DMA_CheckFifoParam+0xb6>
80001a1a:	68bb      	ldr	r3, [r7, #8]
80001a1c:	2b03      	cmp	r3, #3
80001a1e:	d003      	beq.n	80001a28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
80001a20:	e018      	b.n	80001a54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
80001a22:	2301      	movs	r3, #1
80001a24:	73fb      	strb	r3, [r7, #15]
      break;
80001a26:	e015      	b.n	80001a54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
80001a28:	687b      	ldr	r3, [r7, #4]
80001a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
80001a2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
80001a30:	2b00      	cmp	r3, #0
80001a32:	d00e      	beq.n	80001a52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
80001a34:	2301      	movs	r3, #1
80001a36:	73fb      	strb	r3, [r7, #15]
      break;
80001a38:	e00b      	b.n	80001a52 <DMA_CheckFifoParam+0xe6>
      break;
80001a3a:	bf00      	nop
80001a3c:	e00a      	b.n	80001a54 <DMA_CheckFifoParam+0xe8>
      break;
80001a3e:	bf00      	nop
80001a40:	e008      	b.n	80001a54 <DMA_CheckFifoParam+0xe8>
      break;
80001a42:	bf00      	nop
80001a44:	e006      	b.n	80001a54 <DMA_CheckFifoParam+0xe8>
      break;
80001a46:	bf00      	nop
80001a48:	e004      	b.n	80001a54 <DMA_CheckFifoParam+0xe8>
      break;
80001a4a:	bf00      	nop
80001a4c:	e002      	b.n	80001a54 <DMA_CheckFifoParam+0xe8>
      break;   
80001a4e:	bf00      	nop
80001a50:	e000      	b.n	80001a54 <DMA_CheckFifoParam+0xe8>
      break;
80001a52:	bf00      	nop
    }
  } 
  
  return status; 
80001a54:	7bfb      	ldrb	r3, [r7, #15]
}
80001a56:	4618      	mov	r0, r3
80001a58:	3714      	adds	r7, #20
80001a5a:	46bd      	mov	sp, r7
80001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
80001a60:	4770      	bx	lr
80001a62:	bf00      	nop

80001a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
80001a64:	b480      	push	{r7}
80001a66:	b089      	sub	sp, #36	; 0x24
80001a68:	af00      	add	r7, sp, #0
80001a6a:	6078      	str	r0, [r7, #4]
80001a6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
80001a6e:	2300      	movs	r3, #0
80001a70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
80001a72:	2300      	movs	r3, #0
80001a74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
80001a76:	2300      	movs	r3, #0
80001a78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
80001a7a:	2300      	movs	r3, #0
80001a7c:	61fb      	str	r3, [r7, #28]
80001a7e:	e165      	b.n	80001d4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
80001a80:	2201      	movs	r2, #1
80001a82:	69fb      	ldr	r3, [r7, #28]
80001a84:	fa02 f303 	lsl.w	r3, r2, r3
80001a88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
80001a8a:	683b      	ldr	r3, [r7, #0]
80001a8c:	681b      	ldr	r3, [r3, #0]
80001a8e:	697a      	ldr	r2, [r7, #20]
80001a90:	4013      	ands	r3, r2
80001a92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
80001a94:	693a      	ldr	r2, [r7, #16]
80001a96:	697b      	ldr	r3, [r7, #20]
80001a98:	429a      	cmp	r2, r3
80001a9a:	f040 8154 	bne.w	80001d46 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
80001a9e:	683b      	ldr	r3, [r7, #0]
80001aa0:	685b      	ldr	r3, [r3, #4]
80001aa2:	f003 0303 	and.w	r3, r3, #3
80001aa6:	2b01      	cmp	r3, #1
80001aa8:	d005      	beq.n	80001ab6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
80001aaa:	683b      	ldr	r3, [r7, #0]
80001aac:	685b      	ldr	r3, [r3, #4]
80001aae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
80001ab2:	2b02      	cmp	r3, #2
80001ab4:	d130      	bne.n	80001b18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
80001ab6:	687b      	ldr	r3, [r7, #4]
80001ab8:	689b      	ldr	r3, [r3, #8]
80001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
80001abc:	69fb      	ldr	r3, [r7, #28]
80001abe:	005b      	lsls	r3, r3, #1
80001ac0:	2203      	movs	r2, #3
80001ac2:	fa02 f303 	lsl.w	r3, r2, r3
80001ac6:	43db      	mvns	r3, r3
80001ac8:	69ba      	ldr	r2, [r7, #24]
80001aca:	4013      	ands	r3, r2
80001acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
80001ace:	683b      	ldr	r3, [r7, #0]
80001ad0:	68da      	ldr	r2, [r3, #12]
80001ad2:	69fb      	ldr	r3, [r7, #28]
80001ad4:	005b      	lsls	r3, r3, #1
80001ad6:	fa02 f303 	lsl.w	r3, r2, r3
80001ada:	69ba      	ldr	r2, [r7, #24]
80001adc:	4313      	orrs	r3, r2
80001ade:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
80001ae0:	687b      	ldr	r3, [r7, #4]
80001ae2:	69ba      	ldr	r2, [r7, #24]
80001ae4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
80001ae6:	687b      	ldr	r3, [r7, #4]
80001ae8:	685b      	ldr	r3, [r3, #4]
80001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
80001aec:	2201      	movs	r2, #1
80001aee:	69fb      	ldr	r3, [r7, #28]
80001af0:	fa02 f303 	lsl.w	r3, r2, r3
80001af4:	43db      	mvns	r3, r3
80001af6:	69ba      	ldr	r2, [r7, #24]
80001af8:	4013      	ands	r3, r2
80001afa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
80001afc:	683b      	ldr	r3, [r7, #0]
80001afe:	685b      	ldr	r3, [r3, #4]
80001b00:	091b      	lsrs	r3, r3, #4
80001b02:	f003 0201 	and.w	r2, r3, #1
80001b06:	69fb      	ldr	r3, [r7, #28]
80001b08:	fa02 f303 	lsl.w	r3, r2, r3
80001b0c:	69ba      	ldr	r2, [r7, #24]
80001b0e:	4313      	orrs	r3, r2
80001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
80001b12:	687b      	ldr	r3, [r7, #4]
80001b14:	69ba      	ldr	r2, [r7, #24]
80001b16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
80001b18:	683b      	ldr	r3, [r7, #0]
80001b1a:	685b      	ldr	r3, [r3, #4]
80001b1c:	f003 0303 	and.w	r3, r3, #3
80001b20:	2b03      	cmp	r3, #3
80001b22:	d017      	beq.n	80001b54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
80001b24:	687b      	ldr	r3, [r7, #4]
80001b26:	68db      	ldr	r3, [r3, #12]
80001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
80001b2a:	69fb      	ldr	r3, [r7, #28]
80001b2c:	005b      	lsls	r3, r3, #1
80001b2e:	2203      	movs	r2, #3
80001b30:	fa02 f303 	lsl.w	r3, r2, r3
80001b34:	43db      	mvns	r3, r3
80001b36:	69ba      	ldr	r2, [r7, #24]
80001b38:	4013      	ands	r3, r2
80001b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
80001b3c:	683b      	ldr	r3, [r7, #0]
80001b3e:	689a      	ldr	r2, [r3, #8]
80001b40:	69fb      	ldr	r3, [r7, #28]
80001b42:	005b      	lsls	r3, r3, #1
80001b44:	fa02 f303 	lsl.w	r3, r2, r3
80001b48:	69ba      	ldr	r2, [r7, #24]
80001b4a:	4313      	orrs	r3, r2
80001b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
80001b4e:	687b      	ldr	r3, [r7, #4]
80001b50:	69ba      	ldr	r2, [r7, #24]
80001b52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
80001b54:	683b      	ldr	r3, [r7, #0]
80001b56:	685b      	ldr	r3, [r3, #4]
80001b58:	f003 0303 	and.w	r3, r3, #3
80001b5c:	2b02      	cmp	r3, #2
80001b5e:	d123      	bne.n	80001ba8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
80001b60:	69fb      	ldr	r3, [r7, #28]
80001b62:	08da      	lsrs	r2, r3, #3
80001b64:	687b      	ldr	r3, [r7, #4]
80001b66:	3208      	adds	r2, #8
80001b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
80001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
80001b6e:	69fb      	ldr	r3, [r7, #28]
80001b70:	f003 0307 	and.w	r3, r3, #7
80001b74:	009b      	lsls	r3, r3, #2
80001b76:	220f      	movs	r2, #15
80001b78:	fa02 f303 	lsl.w	r3, r2, r3
80001b7c:	43db      	mvns	r3, r3
80001b7e:	69ba      	ldr	r2, [r7, #24]
80001b80:	4013      	ands	r3, r2
80001b82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
80001b84:	683b      	ldr	r3, [r7, #0]
80001b86:	691a      	ldr	r2, [r3, #16]
80001b88:	69fb      	ldr	r3, [r7, #28]
80001b8a:	f003 0307 	and.w	r3, r3, #7
80001b8e:	009b      	lsls	r3, r3, #2
80001b90:	fa02 f303 	lsl.w	r3, r2, r3
80001b94:	69ba      	ldr	r2, [r7, #24]
80001b96:	4313      	orrs	r3, r2
80001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
80001b9a:	69fb      	ldr	r3, [r7, #28]
80001b9c:	08da      	lsrs	r2, r3, #3
80001b9e:	687b      	ldr	r3, [r7, #4]
80001ba0:	3208      	adds	r2, #8
80001ba2:	69b9      	ldr	r1, [r7, #24]
80001ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
80001ba8:	687b      	ldr	r3, [r7, #4]
80001baa:	681b      	ldr	r3, [r3, #0]
80001bac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
80001bae:	69fb      	ldr	r3, [r7, #28]
80001bb0:	005b      	lsls	r3, r3, #1
80001bb2:	2203      	movs	r2, #3
80001bb4:	fa02 f303 	lsl.w	r3, r2, r3
80001bb8:	43db      	mvns	r3, r3
80001bba:	69ba      	ldr	r2, [r7, #24]
80001bbc:	4013      	ands	r3, r2
80001bbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
80001bc0:	683b      	ldr	r3, [r7, #0]
80001bc2:	685b      	ldr	r3, [r3, #4]
80001bc4:	f003 0203 	and.w	r2, r3, #3
80001bc8:	69fb      	ldr	r3, [r7, #28]
80001bca:	005b      	lsls	r3, r3, #1
80001bcc:	fa02 f303 	lsl.w	r3, r2, r3
80001bd0:	69ba      	ldr	r2, [r7, #24]
80001bd2:	4313      	orrs	r3, r2
80001bd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
80001bd6:	687b      	ldr	r3, [r7, #4]
80001bd8:	69ba      	ldr	r2, [r7, #24]
80001bda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
80001bdc:	683b      	ldr	r3, [r7, #0]
80001bde:	685b      	ldr	r3, [r3, #4]
80001be0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
80001be4:	2b00      	cmp	r3, #0
80001be6:	f000 80ae 	beq.w	80001d46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
80001bea:	2300      	movs	r3, #0
80001bec:	60fb      	str	r3, [r7, #12]
80001bee:	4b5d      	ldr	r3, [pc, #372]	; (80001d64 <HAL_GPIO_Init+0x300>)
80001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
80001bf2:	4a5c      	ldr	r2, [pc, #368]	; (80001d64 <HAL_GPIO_Init+0x300>)
80001bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
80001bf8:	6453      	str	r3, [r2, #68]	; 0x44
80001bfa:	4b5a      	ldr	r3, [pc, #360]	; (80001d64 <HAL_GPIO_Init+0x300>)
80001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
80001bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
80001c02:	60fb      	str	r3, [r7, #12]
80001c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
80001c06:	4a58      	ldr	r2, [pc, #352]	; (80001d68 <HAL_GPIO_Init+0x304>)
80001c08:	69fb      	ldr	r3, [r7, #28]
80001c0a:	089b      	lsrs	r3, r3, #2
80001c0c:	3302      	adds	r3, #2
80001c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
80001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
80001c14:	69fb      	ldr	r3, [r7, #28]
80001c16:	f003 0303 	and.w	r3, r3, #3
80001c1a:	009b      	lsls	r3, r3, #2
80001c1c:	220f      	movs	r2, #15
80001c1e:	fa02 f303 	lsl.w	r3, r2, r3
80001c22:	43db      	mvns	r3, r3
80001c24:	69ba      	ldr	r2, [r7, #24]
80001c26:	4013      	ands	r3, r2
80001c28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
80001c2a:	687b      	ldr	r3, [r7, #4]
80001c2c:	4a4f      	ldr	r2, [pc, #316]	; (80001d6c <HAL_GPIO_Init+0x308>)
80001c2e:	4293      	cmp	r3, r2
80001c30:	d025      	beq.n	80001c7e <HAL_GPIO_Init+0x21a>
80001c32:	687b      	ldr	r3, [r7, #4]
80001c34:	4a4e      	ldr	r2, [pc, #312]	; (80001d70 <HAL_GPIO_Init+0x30c>)
80001c36:	4293      	cmp	r3, r2
80001c38:	d01f      	beq.n	80001c7a <HAL_GPIO_Init+0x216>
80001c3a:	687b      	ldr	r3, [r7, #4]
80001c3c:	4a4d      	ldr	r2, [pc, #308]	; (80001d74 <HAL_GPIO_Init+0x310>)
80001c3e:	4293      	cmp	r3, r2
80001c40:	d019      	beq.n	80001c76 <HAL_GPIO_Init+0x212>
80001c42:	687b      	ldr	r3, [r7, #4]
80001c44:	4a4c      	ldr	r2, [pc, #304]	; (80001d78 <HAL_GPIO_Init+0x314>)
80001c46:	4293      	cmp	r3, r2
80001c48:	d013      	beq.n	80001c72 <HAL_GPIO_Init+0x20e>
80001c4a:	687b      	ldr	r3, [r7, #4]
80001c4c:	4a4b      	ldr	r2, [pc, #300]	; (80001d7c <HAL_GPIO_Init+0x318>)
80001c4e:	4293      	cmp	r3, r2
80001c50:	d00d      	beq.n	80001c6e <HAL_GPIO_Init+0x20a>
80001c52:	687b      	ldr	r3, [r7, #4]
80001c54:	4a4a      	ldr	r2, [pc, #296]	; (80001d80 <HAL_GPIO_Init+0x31c>)
80001c56:	4293      	cmp	r3, r2
80001c58:	d007      	beq.n	80001c6a <HAL_GPIO_Init+0x206>
80001c5a:	687b      	ldr	r3, [r7, #4]
80001c5c:	4a49      	ldr	r2, [pc, #292]	; (80001d84 <HAL_GPIO_Init+0x320>)
80001c5e:	4293      	cmp	r3, r2
80001c60:	d101      	bne.n	80001c66 <HAL_GPIO_Init+0x202>
80001c62:	2306      	movs	r3, #6
80001c64:	e00c      	b.n	80001c80 <HAL_GPIO_Init+0x21c>
80001c66:	2307      	movs	r3, #7
80001c68:	e00a      	b.n	80001c80 <HAL_GPIO_Init+0x21c>
80001c6a:	2305      	movs	r3, #5
80001c6c:	e008      	b.n	80001c80 <HAL_GPIO_Init+0x21c>
80001c6e:	2304      	movs	r3, #4
80001c70:	e006      	b.n	80001c80 <HAL_GPIO_Init+0x21c>
80001c72:	2303      	movs	r3, #3
80001c74:	e004      	b.n	80001c80 <HAL_GPIO_Init+0x21c>
80001c76:	2302      	movs	r3, #2
80001c78:	e002      	b.n	80001c80 <HAL_GPIO_Init+0x21c>
80001c7a:	2301      	movs	r3, #1
80001c7c:	e000      	b.n	80001c80 <HAL_GPIO_Init+0x21c>
80001c7e:	2300      	movs	r3, #0
80001c80:	69fa      	ldr	r2, [r7, #28]
80001c82:	f002 0203 	and.w	r2, r2, #3
80001c86:	0092      	lsls	r2, r2, #2
80001c88:	4093      	lsls	r3, r2
80001c8a:	69ba      	ldr	r2, [r7, #24]
80001c8c:	4313      	orrs	r3, r2
80001c8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
80001c90:	4935      	ldr	r1, [pc, #212]	; (80001d68 <HAL_GPIO_Init+0x304>)
80001c92:	69fb      	ldr	r3, [r7, #28]
80001c94:	089b      	lsrs	r3, r3, #2
80001c96:	3302      	adds	r3, #2
80001c98:	69ba      	ldr	r2, [r7, #24]
80001c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
80001c9e:	4b3a      	ldr	r3, [pc, #232]	; (80001d88 <HAL_GPIO_Init+0x324>)
80001ca0:	689b      	ldr	r3, [r3, #8]
80001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
80001ca4:	693b      	ldr	r3, [r7, #16]
80001ca6:	43db      	mvns	r3, r3
80001ca8:	69ba      	ldr	r2, [r7, #24]
80001caa:	4013      	ands	r3, r2
80001cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
80001cae:	683b      	ldr	r3, [r7, #0]
80001cb0:	685b      	ldr	r3, [r3, #4]
80001cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
80001cb6:	2b00      	cmp	r3, #0
80001cb8:	d003      	beq.n	80001cc2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
80001cba:	69ba      	ldr	r2, [r7, #24]
80001cbc:	693b      	ldr	r3, [r7, #16]
80001cbe:	4313      	orrs	r3, r2
80001cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
80001cc2:	4a31      	ldr	r2, [pc, #196]	; (80001d88 <HAL_GPIO_Init+0x324>)
80001cc4:	69bb      	ldr	r3, [r7, #24]
80001cc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
80001cc8:	4b2f      	ldr	r3, [pc, #188]	; (80001d88 <HAL_GPIO_Init+0x324>)
80001cca:	68db      	ldr	r3, [r3, #12]
80001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
80001cce:	693b      	ldr	r3, [r7, #16]
80001cd0:	43db      	mvns	r3, r3
80001cd2:	69ba      	ldr	r2, [r7, #24]
80001cd4:	4013      	ands	r3, r2
80001cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
80001cd8:	683b      	ldr	r3, [r7, #0]
80001cda:	685b      	ldr	r3, [r3, #4]
80001cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
80001ce0:	2b00      	cmp	r3, #0
80001ce2:	d003      	beq.n	80001cec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
80001ce4:	69ba      	ldr	r2, [r7, #24]
80001ce6:	693b      	ldr	r3, [r7, #16]
80001ce8:	4313      	orrs	r3, r2
80001cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
80001cec:	4a26      	ldr	r2, [pc, #152]	; (80001d88 <HAL_GPIO_Init+0x324>)
80001cee:	69bb      	ldr	r3, [r7, #24]
80001cf0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
80001cf2:	4b25      	ldr	r3, [pc, #148]	; (80001d88 <HAL_GPIO_Init+0x324>)
80001cf4:	685b      	ldr	r3, [r3, #4]
80001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
80001cf8:	693b      	ldr	r3, [r7, #16]
80001cfa:	43db      	mvns	r3, r3
80001cfc:	69ba      	ldr	r2, [r7, #24]
80001cfe:	4013      	ands	r3, r2
80001d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
80001d02:	683b      	ldr	r3, [r7, #0]
80001d04:	685b      	ldr	r3, [r3, #4]
80001d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
80001d0a:	2b00      	cmp	r3, #0
80001d0c:	d003      	beq.n	80001d16 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
80001d0e:	69ba      	ldr	r2, [r7, #24]
80001d10:	693b      	ldr	r3, [r7, #16]
80001d12:	4313      	orrs	r3, r2
80001d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
80001d16:	4a1c      	ldr	r2, [pc, #112]	; (80001d88 <HAL_GPIO_Init+0x324>)
80001d18:	69bb      	ldr	r3, [r7, #24]
80001d1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
80001d1c:	4b1a      	ldr	r3, [pc, #104]	; (80001d88 <HAL_GPIO_Init+0x324>)
80001d1e:	681b      	ldr	r3, [r3, #0]
80001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
80001d22:	693b      	ldr	r3, [r7, #16]
80001d24:	43db      	mvns	r3, r3
80001d26:	69ba      	ldr	r2, [r7, #24]
80001d28:	4013      	ands	r3, r2
80001d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
80001d2c:	683b      	ldr	r3, [r7, #0]
80001d2e:	685b      	ldr	r3, [r3, #4]
80001d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
80001d34:	2b00      	cmp	r3, #0
80001d36:	d003      	beq.n	80001d40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
80001d38:	69ba      	ldr	r2, [r7, #24]
80001d3a:	693b      	ldr	r3, [r7, #16]
80001d3c:	4313      	orrs	r3, r2
80001d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
80001d40:	4a11      	ldr	r2, [pc, #68]	; (80001d88 <HAL_GPIO_Init+0x324>)
80001d42:	69bb      	ldr	r3, [r7, #24]
80001d44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
80001d46:	69fb      	ldr	r3, [r7, #28]
80001d48:	3301      	adds	r3, #1
80001d4a:	61fb      	str	r3, [r7, #28]
80001d4c:	69fb      	ldr	r3, [r7, #28]
80001d4e:	2b0f      	cmp	r3, #15
80001d50:	f67f ae96 	bls.w	80001a80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
80001d54:	bf00      	nop
80001d56:	bf00      	nop
80001d58:	3724      	adds	r7, #36	; 0x24
80001d5a:	46bd      	mov	sp, r7
80001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
80001d60:	4770      	bx	lr
80001d62:	bf00      	nop
80001d64:	40023800 	.word	0x40023800
80001d68:	40013800 	.word	0x40013800
80001d6c:	40020000 	.word	0x40020000
80001d70:	40020400 	.word	0x40020400
80001d74:	40020800 	.word	0x40020800
80001d78:	40020c00 	.word	0x40020c00
80001d7c:	40021000 	.word	0x40021000
80001d80:	40021400 	.word	0x40021400
80001d84:	40021800 	.word	0x40021800
80001d88:	40013c00 	.word	0x40013c00

80001d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
80001d8c:	b480      	push	{r7}
80001d8e:	b083      	sub	sp, #12
80001d90:	af00      	add	r7, sp, #0
80001d92:	6078      	str	r0, [r7, #4]
80001d94:	460b      	mov	r3, r1
80001d96:	807b      	strh	r3, [r7, #2]
80001d98:	4613      	mov	r3, r2
80001d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
80001d9c:	787b      	ldrb	r3, [r7, #1]
80001d9e:	2b00      	cmp	r3, #0
80001da0:	d003      	beq.n	80001daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
80001da2:	887a      	ldrh	r2, [r7, #2]
80001da4:	687b      	ldr	r3, [r7, #4]
80001da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
80001da8:	e003      	b.n	80001db2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
80001daa:	887b      	ldrh	r3, [r7, #2]
80001dac:	041a      	lsls	r2, r3, #16
80001dae:	687b      	ldr	r3, [r7, #4]
80001db0:	619a      	str	r2, [r3, #24]
}
80001db2:	bf00      	nop
80001db4:	370c      	adds	r7, #12
80001db6:	46bd      	mov	sp, r7
80001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
80001dbc:	4770      	bx	lr
	...

80001dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
80001dc0:	b580      	push	{r7, lr}
80001dc2:	b084      	sub	sp, #16
80001dc4:	af00      	add	r7, sp, #0
80001dc6:	6078      	str	r0, [r7, #4]
80001dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
80001dca:	687b      	ldr	r3, [r7, #4]
80001dcc:	2b00      	cmp	r3, #0
80001dce:	d101      	bne.n	80001dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
80001dd0:	2301      	movs	r3, #1
80001dd2:	e0cc      	b.n	80001f6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
80001dd4:	4b68      	ldr	r3, [pc, #416]	; (80001f78 <HAL_RCC_ClockConfig+0x1b8>)
80001dd6:	681b      	ldr	r3, [r3, #0]
80001dd8:	f003 030f 	and.w	r3, r3, #15
80001ddc:	683a      	ldr	r2, [r7, #0]
80001dde:	429a      	cmp	r2, r3
80001de0:	d90c      	bls.n	80001dfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
80001de2:	4b65      	ldr	r3, [pc, #404]	; (80001f78 <HAL_RCC_ClockConfig+0x1b8>)
80001de4:	683a      	ldr	r2, [r7, #0]
80001de6:	b2d2      	uxtb	r2, r2
80001de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
80001dea:	4b63      	ldr	r3, [pc, #396]	; (80001f78 <HAL_RCC_ClockConfig+0x1b8>)
80001dec:	681b      	ldr	r3, [r3, #0]
80001dee:	f003 030f 	and.w	r3, r3, #15
80001df2:	683a      	ldr	r2, [r7, #0]
80001df4:	429a      	cmp	r2, r3
80001df6:	d001      	beq.n	80001dfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
80001df8:	2301      	movs	r3, #1
80001dfa:	e0b8      	b.n	80001f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
80001dfc:	687b      	ldr	r3, [r7, #4]
80001dfe:	681b      	ldr	r3, [r3, #0]
80001e00:	f003 0302 	and.w	r3, r3, #2
80001e04:	2b00      	cmp	r3, #0
80001e06:	d020      	beq.n	80001e4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
80001e08:	687b      	ldr	r3, [r7, #4]
80001e0a:	681b      	ldr	r3, [r3, #0]
80001e0c:	f003 0304 	and.w	r3, r3, #4
80001e10:	2b00      	cmp	r3, #0
80001e12:	d005      	beq.n	80001e20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
80001e14:	4b59      	ldr	r3, [pc, #356]	; (80001f7c <HAL_RCC_ClockConfig+0x1bc>)
80001e16:	689b      	ldr	r3, [r3, #8]
80001e18:	4a58      	ldr	r2, [pc, #352]	; (80001f7c <HAL_RCC_ClockConfig+0x1bc>)
80001e1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
80001e1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
80001e20:	687b      	ldr	r3, [r7, #4]
80001e22:	681b      	ldr	r3, [r3, #0]
80001e24:	f003 0308 	and.w	r3, r3, #8
80001e28:	2b00      	cmp	r3, #0
80001e2a:	d005      	beq.n	80001e38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
80001e2c:	4b53      	ldr	r3, [pc, #332]	; (80001f7c <HAL_RCC_ClockConfig+0x1bc>)
80001e2e:	689b      	ldr	r3, [r3, #8]
80001e30:	4a52      	ldr	r2, [pc, #328]	; (80001f7c <HAL_RCC_ClockConfig+0x1bc>)
80001e32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
80001e36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
80001e38:	4b50      	ldr	r3, [pc, #320]	; (80001f7c <HAL_RCC_ClockConfig+0x1bc>)
80001e3a:	689b      	ldr	r3, [r3, #8]
80001e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
80001e40:	687b      	ldr	r3, [r7, #4]
80001e42:	689b      	ldr	r3, [r3, #8]
80001e44:	494d      	ldr	r1, [pc, #308]	; (80001f7c <HAL_RCC_ClockConfig+0x1bc>)
80001e46:	4313      	orrs	r3, r2
80001e48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
80001e4a:	687b      	ldr	r3, [r7, #4]
80001e4c:	681b      	ldr	r3, [r3, #0]
80001e4e:	f003 0301 	and.w	r3, r3, #1
80001e52:	2b00      	cmp	r3, #0
80001e54:	d044      	beq.n	80001ee0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
80001e56:	687b      	ldr	r3, [r7, #4]
80001e58:	685b      	ldr	r3, [r3, #4]
80001e5a:	2b01      	cmp	r3, #1
80001e5c:	d107      	bne.n	80001e6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
80001e5e:	4b47      	ldr	r3, [pc, #284]	; (80001f7c <HAL_RCC_ClockConfig+0x1bc>)
80001e60:	681b      	ldr	r3, [r3, #0]
80001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
80001e66:	2b00      	cmp	r3, #0
80001e68:	d119      	bne.n	80001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
80001e6a:	2301      	movs	r3, #1
80001e6c:	e07f      	b.n	80001f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
80001e6e:	687b      	ldr	r3, [r7, #4]
80001e70:	685b      	ldr	r3, [r3, #4]
80001e72:	2b02      	cmp	r3, #2
80001e74:	d003      	beq.n	80001e7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
80001e76:	687b      	ldr	r3, [r7, #4]
80001e78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
80001e7a:	2b03      	cmp	r3, #3
80001e7c:	d107      	bne.n	80001e8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
80001e7e:	4b3f      	ldr	r3, [pc, #252]	; (80001f7c <HAL_RCC_ClockConfig+0x1bc>)
80001e80:	681b      	ldr	r3, [r3, #0]
80001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
80001e86:	2b00      	cmp	r3, #0
80001e88:	d109      	bne.n	80001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
80001e8a:	2301      	movs	r3, #1
80001e8c:	e06f      	b.n	80001f6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
80001e8e:	4b3b      	ldr	r3, [pc, #236]	; (80001f7c <HAL_RCC_ClockConfig+0x1bc>)
80001e90:	681b      	ldr	r3, [r3, #0]
80001e92:	f003 0302 	and.w	r3, r3, #2
80001e96:	2b00      	cmp	r3, #0
80001e98:	d101      	bne.n	80001e9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
80001e9a:	2301      	movs	r3, #1
80001e9c:	e067      	b.n	80001f6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
80001e9e:	4b37      	ldr	r3, [pc, #220]	; (80001f7c <HAL_RCC_ClockConfig+0x1bc>)
80001ea0:	689b      	ldr	r3, [r3, #8]
80001ea2:	f023 0203 	bic.w	r2, r3, #3
80001ea6:	687b      	ldr	r3, [r7, #4]
80001ea8:	685b      	ldr	r3, [r3, #4]
80001eaa:	4934      	ldr	r1, [pc, #208]	; (80001f7c <HAL_RCC_ClockConfig+0x1bc>)
80001eac:	4313      	orrs	r3, r2
80001eae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
80001eb0:	f7ff f904 	bl	800010bc <HAL_GetTick>
80001eb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
80001eb6:	e00a      	b.n	80001ece <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
80001eb8:	f7ff f900 	bl	800010bc <HAL_GetTick>
80001ebc:	4602      	mov	r2, r0
80001ebe:	68fb      	ldr	r3, [r7, #12]
80001ec0:	1ad3      	subs	r3, r2, r3
80001ec2:	f241 3288 	movw	r2, #5000	; 0x1388
80001ec6:	4293      	cmp	r3, r2
80001ec8:	d901      	bls.n	80001ece <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
80001eca:	2303      	movs	r3, #3
80001ecc:	e04f      	b.n	80001f6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
80001ece:	4b2b      	ldr	r3, [pc, #172]	; (80001f7c <HAL_RCC_ClockConfig+0x1bc>)
80001ed0:	689b      	ldr	r3, [r3, #8]
80001ed2:	f003 020c 	and.w	r2, r3, #12
80001ed6:	687b      	ldr	r3, [r7, #4]
80001ed8:	685b      	ldr	r3, [r3, #4]
80001eda:	009b      	lsls	r3, r3, #2
80001edc:	429a      	cmp	r2, r3
80001ede:	d1eb      	bne.n	80001eb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
80001ee0:	4b25      	ldr	r3, [pc, #148]	; (80001f78 <HAL_RCC_ClockConfig+0x1b8>)
80001ee2:	681b      	ldr	r3, [r3, #0]
80001ee4:	f003 030f 	and.w	r3, r3, #15
80001ee8:	683a      	ldr	r2, [r7, #0]
80001eea:	429a      	cmp	r2, r3
80001eec:	d20c      	bcs.n	80001f08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
80001eee:	4b22      	ldr	r3, [pc, #136]	; (80001f78 <HAL_RCC_ClockConfig+0x1b8>)
80001ef0:	683a      	ldr	r2, [r7, #0]
80001ef2:	b2d2      	uxtb	r2, r2
80001ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
80001ef6:	4b20      	ldr	r3, [pc, #128]	; (80001f78 <HAL_RCC_ClockConfig+0x1b8>)
80001ef8:	681b      	ldr	r3, [r3, #0]
80001efa:	f003 030f 	and.w	r3, r3, #15
80001efe:	683a      	ldr	r2, [r7, #0]
80001f00:	429a      	cmp	r2, r3
80001f02:	d001      	beq.n	80001f08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
80001f04:	2301      	movs	r3, #1
80001f06:	e032      	b.n	80001f6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
80001f08:	687b      	ldr	r3, [r7, #4]
80001f0a:	681b      	ldr	r3, [r3, #0]
80001f0c:	f003 0304 	and.w	r3, r3, #4
80001f10:	2b00      	cmp	r3, #0
80001f12:	d008      	beq.n	80001f26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
80001f14:	4b19      	ldr	r3, [pc, #100]	; (80001f7c <HAL_RCC_ClockConfig+0x1bc>)
80001f16:	689b      	ldr	r3, [r3, #8]
80001f18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
80001f1c:	687b      	ldr	r3, [r7, #4]
80001f1e:	68db      	ldr	r3, [r3, #12]
80001f20:	4916      	ldr	r1, [pc, #88]	; (80001f7c <HAL_RCC_ClockConfig+0x1bc>)
80001f22:	4313      	orrs	r3, r2
80001f24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
80001f26:	687b      	ldr	r3, [r7, #4]
80001f28:	681b      	ldr	r3, [r3, #0]
80001f2a:	f003 0308 	and.w	r3, r3, #8
80001f2e:	2b00      	cmp	r3, #0
80001f30:	d009      	beq.n	80001f46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
80001f32:	4b12      	ldr	r3, [pc, #72]	; (80001f7c <HAL_RCC_ClockConfig+0x1bc>)
80001f34:	689b      	ldr	r3, [r3, #8]
80001f36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
80001f3a:	687b      	ldr	r3, [r7, #4]
80001f3c:	691b      	ldr	r3, [r3, #16]
80001f3e:	00db      	lsls	r3, r3, #3
80001f40:	490e      	ldr	r1, [pc, #56]	; (80001f7c <HAL_RCC_ClockConfig+0x1bc>)
80001f42:	4313      	orrs	r3, r2
80001f44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
80001f46:	f000 f855 	bl	80001ff4 <HAL_RCC_GetSysClockFreq>
80001f4a:	4602      	mov	r2, r0
80001f4c:	4b0b      	ldr	r3, [pc, #44]	; (80001f7c <HAL_RCC_ClockConfig+0x1bc>)
80001f4e:	689b      	ldr	r3, [r3, #8]
80001f50:	091b      	lsrs	r3, r3, #4
80001f52:	f003 030f 	and.w	r3, r3, #15
80001f56:	490a      	ldr	r1, [pc, #40]	; (80001f80 <HAL_RCC_ClockConfig+0x1c0>)
80001f58:	5ccb      	ldrb	r3, [r1, r3]
80001f5a:	fa22 f303 	lsr.w	r3, r2, r3
80001f5e:	4a09      	ldr	r2, [pc, #36]	; (80001f84 <HAL_RCC_ClockConfig+0x1c4>)
80001f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
80001f62:	4b09      	ldr	r3, [pc, #36]	; (80001f88 <HAL_RCC_ClockConfig+0x1c8>)
80001f64:	681b      	ldr	r3, [r3, #0]
80001f66:	4618      	mov	r0, r3
80001f68:	f7ff f864 	bl	80001034 <HAL_InitTick>

  return HAL_OK;
80001f6c:	2300      	movs	r3, #0
}
80001f6e:	4618      	mov	r0, r3
80001f70:	3710      	adds	r7, #16
80001f72:	46bd      	mov	sp, r7
80001f74:	bd80      	pop	{r7, pc}
80001f76:	bf00      	nop
80001f78:	40023c00 	.word	0x40023c00
80001f7c:	40023800 	.word	0x40023800
80001f80:	80004c30 	.word	0x80004c30
80001f84:	20000000 	.word	0x20000000
80001f88:	20000004 	.word	0x20000004

80001f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
80001f8c:	b480      	push	{r7}
80001f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
80001f90:	4b03      	ldr	r3, [pc, #12]	; (80001fa0 <HAL_RCC_GetHCLKFreq+0x14>)
80001f92:	681b      	ldr	r3, [r3, #0]
}
80001f94:	4618      	mov	r0, r3
80001f96:	46bd      	mov	sp, r7
80001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
80001f9c:	4770      	bx	lr
80001f9e:	bf00      	nop
80001fa0:	20000000 	.word	0x20000000

80001fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
80001fa4:	b580      	push	{r7, lr}
80001fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
80001fa8:	f7ff fff0 	bl	80001f8c <HAL_RCC_GetHCLKFreq>
80001fac:	4602      	mov	r2, r0
80001fae:	4b05      	ldr	r3, [pc, #20]	; (80001fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
80001fb0:	689b      	ldr	r3, [r3, #8]
80001fb2:	0a9b      	lsrs	r3, r3, #10
80001fb4:	f003 0307 	and.w	r3, r3, #7
80001fb8:	4903      	ldr	r1, [pc, #12]	; (80001fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
80001fba:	5ccb      	ldrb	r3, [r1, r3]
80001fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
80001fc0:	4618      	mov	r0, r3
80001fc2:	bd80      	pop	{r7, pc}
80001fc4:	40023800 	.word	0x40023800
80001fc8:	80004c40 	.word	0x80004c40

80001fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
80001fcc:	b580      	push	{r7, lr}
80001fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
80001fd0:	f7ff ffdc 	bl	80001f8c <HAL_RCC_GetHCLKFreq>
80001fd4:	4602      	mov	r2, r0
80001fd6:	4b05      	ldr	r3, [pc, #20]	; (80001fec <HAL_RCC_GetPCLK2Freq+0x20>)
80001fd8:	689b      	ldr	r3, [r3, #8]
80001fda:	0b5b      	lsrs	r3, r3, #13
80001fdc:	f003 0307 	and.w	r3, r3, #7
80001fe0:	4903      	ldr	r1, [pc, #12]	; (80001ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
80001fe2:	5ccb      	ldrb	r3, [r1, r3]
80001fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
80001fe8:	4618      	mov	r0, r3
80001fea:	bd80      	pop	{r7, pc}
80001fec:	40023800 	.word	0x40023800
80001ff0:	80004c40 	.word	0x80004c40

80001ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
80001ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
80001ff8:	b0ae      	sub	sp, #184	; 0xb8
80001ffa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
80001ffc:	2300      	movs	r3, #0
80001ffe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
80002002:	2300      	movs	r3, #0
80002004:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
80002008:	2300      	movs	r3, #0
8000200a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
8000200e:	2300      	movs	r3, #0
80002010:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
80002014:	2300      	movs	r3, #0
80002016:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
8000201a:	4bcb      	ldr	r3, [pc, #812]	; (80002348 <HAL_RCC_GetSysClockFreq+0x354>)
8000201c:	689b      	ldr	r3, [r3, #8]
8000201e:	f003 030c 	and.w	r3, r3, #12
80002022:	2b0c      	cmp	r3, #12
80002024:	f200 8206 	bhi.w	80002434 <HAL_RCC_GetSysClockFreq+0x440>
80002028:	a201      	add	r2, pc, #4	; (adr r2, 80002030 <HAL_RCC_GetSysClockFreq+0x3c>)
8000202a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
8000202e:	bf00      	nop
80002030:	80002065 	.word	0x80002065
80002034:	80002435 	.word	0x80002435
80002038:	80002435 	.word	0x80002435
8000203c:	80002435 	.word	0x80002435
80002040:	8000206d 	.word	0x8000206d
80002044:	80002435 	.word	0x80002435
80002048:	80002435 	.word	0x80002435
8000204c:	80002435 	.word	0x80002435
80002050:	80002075 	.word	0x80002075
80002054:	80002435 	.word	0x80002435
80002058:	80002435 	.word	0x80002435
8000205c:	80002435 	.word	0x80002435
80002060:	80002265 	.word	0x80002265
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
80002064:	4bb9      	ldr	r3, [pc, #740]	; (8000234c <HAL_RCC_GetSysClockFreq+0x358>)
80002066:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
8000206a:	e1e7      	b.n	8000243c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
8000206c:	4bb8      	ldr	r3, [pc, #736]	; (80002350 <HAL_RCC_GetSysClockFreq+0x35c>)
8000206e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
80002072:	e1e3      	b.n	8000243c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
80002074:	4bb4      	ldr	r3, [pc, #720]	; (80002348 <HAL_RCC_GetSysClockFreq+0x354>)
80002076:	685b      	ldr	r3, [r3, #4]
80002078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
8000207c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
80002080:	4bb1      	ldr	r3, [pc, #708]	; (80002348 <HAL_RCC_GetSysClockFreq+0x354>)
80002082:	685b      	ldr	r3, [r3, #4]
80002084:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
80002088:	2b00      	cmp	r3, #0
8000208a:	d071      	beq.n	80002170 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
8000208c:	4bae      	ldr	r3, [pc, #696]	; (80002348 <HAL_RCC_GetSysClockFreq+0x354>)
8000208e:	685b      	ldr	r3, [r3, #4]
80002090:	099b      	lsrs	r3, r3, #6
80002092:	2200      	movs	r2, #0
80002094:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
80002098:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
8000209c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
800020a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
800020a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
800020a8:	2300      	movs	r3, #0
800020aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
800020ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
800020b2:	4622      	mov	r2, r4
800020b4:	462b      	mov	r3, r5
800020b6:	f04f 0000 	mov.w	r0, #0
800020ba:	f04f 0100 	mov.w	r1, #0
800020be:	0159      	lsls	r1, r3, #5
800020c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
800020c4:	0150      	lsls	r0, r2, #5
800020c6:	4602      	mov	r2, r0
800020c8:	460b      	mov	r3, r1
800020ca:	4621      	mov	r1, r4
800020cc:	1a51      	subs	r1, r2, r1
800020ce:	6439      	str	r1, [r7, #64]	; 0x40
800020d0:	4629      	mov	r1, r5
800020d2:	eb63 0301 	sbc.w	r3, r3, r1
800020d6:	647b      	str	r3, [r7, #68]	; 0x44
800020d8:	f04f 0200 	mov.w	r2, #0
800020dc:	f04f 0300 	mov.w	r3, #0
800020e0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
800020e4:	4649      	mov	r1, r9
800020e6:	018b      	lsls	r3, r1, #6
800020e8:	4641      	mov	r1, r8
800020ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
800020ee:	4641      	mov	r1, r8
800020f0:	018a      	lsls	r2, r1, #6
800020f2:	4641      	mov	r1, r8
800020f4:	1a51      	subs	r1, r2, r1
800020f6:	63b9      	str	r1, [r7, #56]	; 0x38
800020f8:	4649      	mov	r1, r9
800020fa:	eb63 0301 	sbc.w	r3, r3, r1
800020fe:	63fb      	str	r3, [r7, #60]	; 0x3c
80002100:	f04f 0200 	mov.w	r2, #0
80002104:	f04f 0300 	mov.w	r3, #0
80002108:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
8000210c:	4649      	mov	r1, r9
8000210e:	00cb      	lsls	r3, r1, #3
80002110:	4641      	mov	r1, r8
80002112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
80002116:	4641      	mov	r1, r8
80002118:	00ca      	lsls	r2, r1, #3
8000211a:	4610      	mov	r0, r2
8000211c:	4619      	mov	r1, r3
8000211e:	4603      	mov	r3, r0
80002120:	4622      	mov	r2, r4
80002122:	189b      	adds	r3, r3, r2
80002124:	633b      	str	r3, [r7, #48]	; 0x30
80002126:	462b      	mov	r3, r5
80002128:	460a      	mov	r2, r1
8000212a:	eb42 0303 	adc.w	r3, r2, r3
8000212e:	637b      	str	r3, [r7, #52]	; 0x34
80002130:	f04f 0200 	mov.w	r2, #0
80002134:	f04f 0300 	mov.w	r3, #0
80002138:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
8000213c:	4629      	mov	r1, r5
8000213e:	024b      	lsls	r3, r1, #9
80002140:	4621      	mov	r1, r4
80002142:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
80002146:	4621      	mov	r1, r4
80002148:	024a      	lsls	r2, r1, #9
8000214a:	4610      	mov	r0, r2
8000214c:	4619      	mov	r1, r3
8000214e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
80002152:	2200      	movs	r2, #0
80002154:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
80002158:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
8000215c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
80002160:	f7fe f850 	bl	80000204 <__aeabi_uldivmod>
80002164:	4602      	mov	r2, r0
80002166:	460b      	mov	r3, r1
80002168:	4613      	mov	r3, r2
8000216a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
8000216e:	e067      	b.n	80002240 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
80002170:	4b75      	ldr	r3, [pc, #468]	; (80002348 <HAL_RCC_GetSysClockFreq+0x354>)
80002172:	685b      	ldr	r3, [r3, #4]
80002174:	099b      	lsrs	r3, r3, #6
80002176:	2200      	movs	r2, #0
80002178:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
8000217c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
80002180:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
80002184:	f3c3 0308 	ubfx	r3, r3, #0, #9
80002188:	67bb      	str	r3, [r7, #120]	; 0x78
8000218a:	2300      	movs	r3, #0
8000218c:	67fb      	str	r3, [r7, #124]	; 0x7c
8000218e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
80002192:	4622      	mov	r2, r4
80002194:	462b      	mov	r3, r5
80002196:	f04f 0000 	mov.w	r0, #0
8000219a:	f04f 0100 	mov.w	r1, #0
8000219e:	0159      	lsls	r1, r3, #5
800021a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
800021a4:	0150      	lsls	r0, r2, #5
800021a6:	4602      	mov	r2, r0
800021a8:	460b      	mov	r3, r1
800021aa:	4621      	mov	r1, r4
800021ac:	1a51      	subs	r1, r2, r1
800021ae:	62b9      	str	r1, [r7, #40]	; 0x28
800021b0:	4629      	mov	r1, r5
800021b2:	eb63 0301 	sbc.w	r3, r3, r1
800021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
800021b8:	f04f 0200 	mov.w	r2, #0
800021bc:	f04f 0300 	mov.w	r3, #0
800021c0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
800021c4:	4649      	mov	r1, r9
800021c6:	018b      	lsls	r3, r1, #6
800021c8:	4641      	mov	r1, r8
800021ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
800021ce:	4641      	mov	r1, r8
800021d0:	018a      	lsls	r2, r1, #6
800021d2:	4641      	mov	r1, r8
800021d4:	ebb2 0a01 	subs.w	sl, r2, r1
800021d8:	4649      	mov	r1, r9
800021da:	eb63 0b01 	sbc.w	fp, r3, r1
800021de:	f04f 0200 	mov.w	r2, #0
800021e2:	f04f 0300 	mov.w	r3, #0
800021e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
800021ea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
800021ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
800021f2:	4692      	mov	sl, r2
800021f4:	469b      	mov	fp, r3
800021f6:	4623      	mov	r3, r4
800021f8:	eb1a 0303 	adds.w	r3, sl, r3
800021fc:	623b      	str	r3, [r7, #32]
800021fe:	462b      	mov	r3, r5
80002200:	eb4b 0303 	adc.w	r3, fp, r3
80002204:	627b      	str	r3, [r7, #36]	; 0x24
80002206:	f04f 0200 	mov.w	r2, #0
8000220a:	f04f 0300 	mov.w	r3, #0
8000220e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
80002212:	4629      	mov	r1, r5
80002214:	028b      	lsls	r3, r1, #10
80002216:	4621      	mov	r1, r4
80002218:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
8000221c:	4621      	mov	r1, r4
8000221e:	028a      	lsls	r2, r1, #10
80002220:	4610      	mov	r0, r2
80002222:	4619      	mov	r1, r3
80002224:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
80002228:	2200      	movs	r2, #0
8000222a:	673b      	str	r3, [r7, #112]	; 0x70
8000222c:	677a      	str	r2, [r7, #116]	; 0x74
8000222e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
80002232:	f7fd ffe7 	bl	80000204 <__aeabi_uldivmod>
80002236:	4602      	mov	r2, r0
80002238:	460b      	mov	r3, r1
8000223a:	4613      	mov	r3, r2
8000223c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
80002240:	4b41      	ldr	r3, [pc, #260]	; (80002348 <HAL_RCC_GetSysClockFreq+0x354>)
80002242:	685b      	ldr	r3, [r3, #4]
80002244:	0c1b      	lsrs	r3, r3, #16
80002246:	f003 0303 	and.w	r3, r3, #3
8000224a:	3301      	adds	r3, #1
8000224c:	005b      	lsls	r3, r3, #1
8000224e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
80002252:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
80002256:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
8000225a:	fbb2 f3f3 	udiv	r3, r2, r3
8000225e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
80002262:	e0eb      	b.n	8000243c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
80002264:	4b38      	ldr	r3, [pc, #224]	; (80002348 <HAL_RCC_GetSysClockFreq+0x354>)
80002266:	685b      	ldr	r3, [r3, #4]
80002268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
8000226c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
80002270:	4b35      	ldr	r3, [pc, #212]	; (80002348 <HAL_RCC_GetSysClockFreq+0x354>)
80002272:	685b      	ldr	r3, [r3, #4]
80002274:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
80002278:	2b00      	cmp	r3, #0
8000227a:	d06b      	beq.n	80002354 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
8000227c:	4b32      	ldr	r3, [pc, #200]	; (80002348 <HAL_RCC_GetSysClockFreq+0x354>)
8000227e:	685b      	ldr	r3, [r3, #4]
80002280:	099b      	lsrs	r3, r3, #6
80002282:	2200      	movs	r2, #0
80002284:	66bb      	str	r3, [r7, #104]	; 0x68
80002286:	66fa      	str	r2, [r7, #108]	; 0x6c
80002288:	6ebb      	ldr	r3, [r7, #104]	; 0x68
8000228a:	f3c3 0308 	ubfx	r3, r3, #0, #9
8000228e:	663b      	str	r3, [r7, #96]	; 0x60
80002290:	2300      	movs	r3, #0
80002292:	667b      	str	r3, [r7, #100]	; 0x64
80002294:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
80002298:	4622      	mov	r2, r4
8000229a:	462b      	mov	r3, r5
8000229c:	f04f 0000 	mov.w	r0, #0
800022a0:	f04f 0100 	mov.w	r1, #0
800022a4:	0159      	lsls	r1, r3, #5
800022a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
800022aa:	0150      	lsls	r0, r2, #5
800022ac:	4602      	mov	r2, r0
800022ae:	460b      	mov	r3, r1
800022b0:	4621      	mov	r1, r4
800022b2:	1a51      	subs	r1, r2, r1
800022b4:	61b9      	str	r1, [r7, #24]
800022b6:	4629      	mov	r1, r5
800022b8:	eb63 0301 	sbc.w	r3, r3, r1
800022bc:	61fb      	str	r3, [r7, #28]
800022be:	f04f 0200 	mov.w	r2, #0
800022c2:	f04f 0300 	mov.w	r3, #0
800022c6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
800022ca:	4659      	mov	r1, fp
800022cc:	018b      	lsls	r3, r1, #6
800022ce:	4651      	mov	r1, sl
800022d0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
800022d4:	4651      	mov	r1, sl
800022d6:	018a      	lsls	r2, r1, #6
800022d8:	4651      	mov	r1, sl
800022da:	ebb2 0801 	subs.w	r8, r2, r1
800022de:	4659      	mov	r1, fp
800022e0:	eb63 0901 	sbc.w	r9, r3, r1
800022e4:	f04f 0200 	mov.w	r2, #0
800022e8:	f04f 0300 	mov.w	r3, #0
800022ec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
800022f0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
800022f4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
800022f8:	4690      	mov	r8, r2
800022fa:	4699      	mov	r9, r3
800022fc:	4623      	mov	r3, r4
800022fe:	eb18 0303 	adds.w	r3, r8, r3
80002302:	613b      	str	r3, [r7, #16]
80002304:	462b      	mov	r3, r5
80002306:	eb49 0303 	adc.w	r3, r9, r3
8000230a:	617b      	str	r3, [r7, #20]
8000230c:	f04f 0200 	mov.w	r2, #0
80002310:	f04f 0300 	mov.w	r3, #0
80002314:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
80002318:	4629      	mov	r1, r5
8000231a:	024b      	lsls	r3, r1, #9
8000231c:	4621      	mov	r1, r4
8000231e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
80002322:	4621      	mov	r1, r4
80002324:	024a      	lsls	r2, r1, #9
80002326:	4610      	mov	r0, r2
80002328:	4619      	mov	r1, r3
8000232a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
8000232e:	2200      	movs	r2, #0
80002330:	65bb      	str	r3, [r7, #88]	; 0x58
80002332:	65fa      	str	r2, [r7, #92]	; 0x5c
80002334:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
80002338:	f7fd ff64 	bl	80000204 <__aeabi_uldivmod>
8000233c:	4602      	mov	r2, r0
8000233e:	460b      	mov	r3, r1
80002340:	4613      	mov	r3, r2
80002342:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
80002346:	e065      	b.n	80002414 <HAL_RCC_GetSysClockFreq+0x420>
80002348:	40023800 	.word	0x40023800
8000234c:	00f42400 	.word	0x00f42400
80002350:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
80002354:	4b3d      	ldr	r3, [pc, #244]	; (8000244c <HAL_RCC_GetSysClockFreq+0x458>)
80002356:	685b      	ldr	r3, [r3, #4]
80002358:	099b      	lsrs	r3, r3, #6
8000235a:	2200      	movs	r2, #0
8000235c:	4618      	mov	r0, r3
8000235e:	4611      	mov	r1, r2
80002360:	f3c0 0308 	ubfx	r3, r0, #0, #9
80002364:	653b      	str	r3, [r7, #80]	; 0x50
80002366:	2300      	movs	r3, #0
80002368:	657b      	str	r3, [r7, #84]	; 0x54
8000236a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
8000236e:	4642      	mov	r2, r8
80002370:	464b      	mov	r3, r9
80002372:	f04f 0000 	mov.w	r0, #0
80002376:	f04f 0100 	mov.w	r1, #0
8000237a:	0159      	lsls	r1, r3, #5
8000237c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
80002380:	0150      	lsls	r0, r2, #5
80002382:	4602      	mov	r2, r0
80002384:	460b      	mov	r3, r1
80002386:	4641      	mov	r1, r8
80002388:	1a51      	subs	r1, r2, r1
8000238a:	60b9      	str	r1, [r7, #8]
8000238c:	4649      	mov	r1, r9
8000238e:	eb63 0301 	sbc.w	r3, r3, r1
80002392:	60fb      	str	r3, [r7, #12]
80002394:	f04f 0200 	mov.w	r2, #0
80002398:	f04f 0300 	mov.w	r3, #0
8000239c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
800023a0:	4659      	mov	r1, fp
800023a2:	018b      	lsls	r3, r1, #6
800023a4:	4651      	mov	r1, sl
800023a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
800023aa:	4651      	mov	r1, sl
800023ac:	018a      	lsls	r2, r1, #6
800023ae:	4651      	mov	r1, sl
800023b0:	1a54      	subs	r4, r2, r1
800023b2:	4659      	mov	r1, fp
800023b4:	eb63 0501 	sbc.w	r5, r3, r1
800023b8:	f04f 0200 	mov.w	r2, #0
800023bc:	f04f 0300 	mov.w	r3, #0
800023c0:	00eb      	lsls	r3, r5, #3
800023c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
800023c6:	00e2      	lsls	r2, r4, #3
800023c8:	4614      	mov	r4, r2
800023ca:	461d      	mov	r5, r3
800023cc:	4643      	mov	r3, r8
800023ce:	18e3      	adds	r3, r4, r3
800023d0:	603b      	str	r3, [r7, #0]
800023d2:	464b      	mov	r3, r9
800023d4:	eb45 0303 	adc.w	r3, r5, r3
800023d8:	607b      	str	r3, [r7, #4]
800023da:	f04f 0200 	mov.w	r2, #0
800023de:	f04f 0300 	mov.w	r3, #0
800023e2:	e9d7 4500 	ldrd	r4, r5, [r7]
800023e6:	4629      	mov	r1, r5
800023e8:	028b      	lsls	r3, r1, #10
800023ea:	4621      	mov	r1, r4
800023ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
800023f0:	4621      	mov	r1, r4
800023f2:	028a      	lsls	r2, r1, #10
800023f4:	4610      	mov	r0, r2
800023f6:	4619      	mov	r1, r3
800023f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
800023fc:	2200      	movs	r2, #0
800023fe:	64bb      	str	r3, [r7, #72]	; 0x48
80002400:	64fa      	str	r2, [r7, #76]	; 0x4c
80002402:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
80002406:	f7fd fefd 	bl	80000204 <__aeabi_uldivmod>
8000240a:	4602      	mov	r2, r0
8000240c:	460b      	mov	r3, r1
8000240e:	4613      	mov	r3, r2
80002410:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
80002414:	4b0d      	ldr	r3, [pc, #52]	; (8000244c <HAL_RCC_GetSysClockFreq+0x458>)
80002416:	685b      	ldr	r3, [r3, #4]
80002418:	0f1b      	lsrs	r3, r3, #28
8000241a:	f003 0307 	and.w	r3, r3, #7
8000241e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
80002422:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
80002426:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
8000242a:	fbb2 f3f3 	udiv	r3, r2, r3
8000242e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
80002432:	e003      	b.n	8000243c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
80002434:	4b06      	ldr	r3, [pc, #24]	; (80002450 <HAL_RCC_GetSysClockFreq+0x45c>)
80002436:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
8000243a:	bf00      	nop
    }
  }
  return sysclockfreq;
8000243c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
80002440:	4618      	mov	r0, r3
80002442:	37b8      	adds	r7, #184	; 0xb8
80002444:	46bd      	mov	sp, r7
80002446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
8000244a:	bf00      	nop
8000244c:	40023800 	.word	0x40023800
80002450:	00f42400 	.word	0x00f42400

80002454 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
80002454:	b580      	push	{r7, lr}
80002456:	b086      	sub	sp, #24
80002458:	af00      	add	r7, sp, #0
8000245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
8000245c:	687b      	ldr	r3, [r7, #4]
8000245e:	2b00      	cmp	r3, #0
80002460:	d101      	bne.n	80002466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
80002462:	2301      	movs	r3, #1
80002464:	e28d      	b.n	80002982 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
80002466:	687b      	ldr	r3, [r7, #4]
80002468:	681b      	ldr	r3, [r3, #0]
8000246a:	f003 0301 	and.w	r3, r3, #1
8000246e:	2b00      	cmp	r3, #0
80002470:	f000 8083 	beq.w	8000257a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
80002474:	4b94      	ldr	r3, [pc, #592]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
80002476:	689b      	ldr	r3, [r3, #8]
80002478:	f003 030c 	and.w	r3, r3, #12
8000247c:	2b04      	cmp	r3, #4
8000247e:	d019      	beq.n	800024b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
80002480:	4b91      	ldr	r3, [pc, #580]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
80002482:	689b      	ldr	r3, [r3, #8]
80002484:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
80002488:	2b08      	cmp	r3, #8
8000248a:	d106      	bne.n	8000249a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
8000248c:	4b8e      	ldr	r3, [pc, #568]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
8000248e:	685b      	ldr	r3, [r3, #4]
80002490:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
80002494:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
80002498:	d00c      	beq.n	800024b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
8000249a:	4b8b      	ldr	r3, [pc, #556]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
8000249c:	689b      	ldr	r3, [r3, #8]
8000249e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
800024a2:	2b0c      	cmp	r3, #12
800024a4:	d112      	bne.n	800024cc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
800024a6:	4b88      	ldr	r3, [pc, #544]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
800024a8:	685b      	ldr	r3, [r3, #4]
800024aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
800024ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
800024b2:	d10b      	bne.n	800024cc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
800024b4:	4b84      	ldr	r3, [pc, #528]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
800024b6:	681b      	ldr	r3, [r3, #0]
800024b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
800024bc:	2b00      	cmp	r3, #0
800024be:	d05b      	beq.n	80002578 <HAL_RCC_OscConfig+0x124>
800024c0:	687b      	ldr	r3, [r7, #4]
800024c2:	685b      	ldr	r3, [r3, #4]
800024c4:	2b00      	cmp	r3, #0
800024c6:	d157      	bne.n	80002578 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
800024c8:	2301      	movs	r3, #1
800024ca:	e25a      	b.n	80002982 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
800024cc:	687b      	ldr	r3, [r7, #4]
800024ce:	685b      	ldr	r3, [r3, #4]
800024d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
800024d4:	d106      	bne.n	800024e4 <HAL_RCC_OscConfig+0x90>
800024d6:	4b7c      	ldr	r3, [pc, #496]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
800024d8:	681b      	ldr	r3, [r3, #0]
800024da:	4a7b      	ldr	r2, [pc, #492]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
800024dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
800024e0:	6013      	str	r3, [r2, #0]
800024e2:	e01d      	b.n	80002520 <HAL_RCC_OscConfig+0xcc>
800024e4:	687b      	ldr	r3, [r7, #4]
800024e6:	685b      	ldr	r3, [r3, #4]
800024e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
800024ec:	d10c      	bne.n	80002508 <HAL_RCC_OscConfig+0xb4>
800024ee:	4b76      	ldr	r3, [pc, #472]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
800024f0:	681b      	ldr	r3, [r3, #0]
800024f2:	4a75      	ldr	r2, [pc, #468]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
800024f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
800024f8:	6013      	str	r3, [r2, #0]
800024fa:	4b73      	ldr	r3, [pc, #460]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
800024fc:	681b      	ldr	r3, [r3, #0]
800024fe:	4a72      	ldr	r2, [pc, #456]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
80002500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
80002504:	6013      	str	r3, [r2, #0]
80002506:	e00b      	b.n	80002520 <HAL_RCC_OscConfig+0xcc>
80002508:	4b6f      	ldr	r3, [pc, #444]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
8000250a:	681b      	ldr	r3, [r3, #0]
8000250c:	4a6e      	ldr	r2, [pc, #440]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
8000250e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
80002512:	6013      	str	r3, [r2, #0]
80002514:	4b6c      	ldr	r3, [pc, #432]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
80002516:	681b      	ldr	r3, [r3, #0]
80002518:	4a6b      	ldr	r2, [pc, #428]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
8000251a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
8000251e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
80002520:	687b      	ldr	r3, [r7, #4]
80002522:	685b      	ldr	r3, [r3, #4]
80002524:	2b00      	cmp	r3, #0
80002526:	d013      	beq.n	80002550 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
80002528:	f7fe fdc8 	bl	800010bc <HAL_GetTick>
8000252c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
8000252e:	e008      	b.n	80002542 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
80002530:	f7fe fdc4 	bl	800010bc <HAL_GetTick>
80002534:	4602      	mov	r2, r0
80002536:	693b      	ldr	r3, [r7, #16]
80002538:	1ad3      	subs	r3, r2, r3
8000253a:	2b64      	cmp	r3, #100	; 0x64
8000253c:	d901      	bls.n	80002542 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
8000253e:	2303      	movs	r3, #3
80002540:	e21f      	b.n	80002982 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
80002542:	4b61      	ldr	r3, [pc, #388]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
80002544:	681b      	ldr	r3, [r3, #0]
80002546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
8000254a:	2b00      	cmp	r3, #0
8000254c:	d0f0      	beq.n	80002530 <HAL_RCC_OscConfig+0xdc>
8000254e:	e014      	b.n	8000257a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
80002550:	f7fe fdb4 	bl	800010bc <HAL_GetTick>
80002554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
80002556:	e008      	b.n	8000256a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
80002558:	f7fe fdb0 	bl	800010bc <HAL_GetTick>
8000255c:	4602      	mov	r2, r0
8000255e:	693b      	ldr	r3, [r7, #16]
80002560:	1ad3      	subs	r3, r2, r3
80002562:	2b64      	cmp	r3, #100	; 0x64
80002564:	d901      	bls.n	8000256a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
80002566:	2303      	movs	r3, #3
80002568:	e20b      	b.n	80002982 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
8000256a:	4b57      	ldr	r3, [pc, #348]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
8000256c:	681b      	ldr	r3, [r3, #0]
8000256e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
80002572:	2b00      	cmp	r3, #0
80002574:	d1f0      	bne.n	80002558 <HAL_RCC_OscConfig+0x104>
80002576:	e000      	b.n	8000257a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
80002578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
8000257a:	687b      	ldr	r3, [r7, #4]
8000257c:	681b      	ldr	r3, [r3, #0]
8000257e:	f003 0302 	and.w	r3, r3, #2
80002582:	2b00      	cmp	r3, #0
80002584:	d06f      	beq.n	80002666 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
80002586:	4b50      	ldr	r3, [pc, #320]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
80002588:	689b      	ldr	r3, [r3, #8]
8000258a:	f003 030c 	and.w	r3, r3, #12
8000258e:	2b00      	cmp	r3, #0
80002590:	d017      	beq.n	800025c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
80002592:	4b4d      	ldr	r3, [pc, #308]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
80002594:	689b      	ldr	r3, [r3, #8]
80002596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
8000259a:	2b08      	cmp	r3, #8
8000259c:	d105      	bne.n	800025aa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
8000259e:	4b4a      	ldr	r3, [pc, #296]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
800025a0:	685b      	ldr	r3, [r3, #4]
800025a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
800025a6:	2b00      	cmp	r3, #0
800025a8:	d00b      	beq.n	800025c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
800025aa:	4b47      	ldr	r3, [pc, #284]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
800025ac:	689b      	ldr	r3, [r3, #8]
800025ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
800025b2:	2b0c      	cmp	r3, #12
800025b4:	d11c      	bne.n	800025f0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
800025b6:	4b44      	ldr	r3, [pc, #272]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
800025b8:	685b      	ldr	r3, [r3, #4]
800025ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
800025be:	2b00      	cmp	r3, #0
800025c0:	d116      	bne.n	800025f0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
800025c2:	4b41      	ldr	r3, [pc, #260]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
800025c4:	681b      	ldr	r3, [r3, #0]
800025c6:	f003 0302 	and.w	r3, r3, #2
800025ca:	2b00      	cmp	r3, #0
800025cc:	d005      	beq.n	800025da <HAL_RCC_OscConfig+0x186>
800025ce:	687b      	ldr	r3, [r7, #4]
800025d0:	68db      	ldr	r3, [r3, #12]
800025d2:	2b01      	cmp	r3, #1
800025d4:	d001      	beq.n	800025da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
800025d6:	2301      	movs	r3, #1
800025d8:	e1d3      	b.n	80002982 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
800025da:	4b3b      	ldr	r3, [pc, #236]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
800025dc:	681b      	ldr	r3, [r3, #0]
800025de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
800025e2:	687b      	ldr	r3, [r7, #4]
800025e4:	691b      	ldr	r3, [r3, #16]
800025e6:	00db      	lsls	r3, r3, #3
800025e8:	4937      	ldr	r1, [pc, #220]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
800025ea:	4313      	orrs	r3, r2
800025ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
800025ee:	e03a      	b.n	80002666 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
800025f0:	687b      	ldr	r3, [r7, #4]
800025f2:	68db      	ldr	r3, [r3, #12]
800025f4:	2b00      	cmp	r3, #0
800025f6:	d020      	beq.n	8000263a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
800025f8:	4b34      	ldr	r3, [pc, #208]	; (800026cc <HAL_RCC_OscConfig+0x278>)
800025fa:	2201      	movs	r2, #1
800025fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
800025fe:	f7fe fd5d 	bl	800010bc <HAL_GetTick>
80002602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
80002604:	e008      	b.n	80002618 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
80002606:	f7fe fd59 	bl	800010bc <HAL_GetTick>
8000260a:	4602      	mov	r2, r0
8000260c:	693b      	ldr	r3, [r7, #16]
8000260e:	1ad3      	subs	r3, r2, r3
80002610:	2b02      	cmp	r3, #2
80002612:	d901      	bls.n	80002618 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
80002614:	2303      	movs	r3, #3
80002616:	e1b4      	b.n	80002982 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
80002618:	4b2b      	ldr	r3, [pc, #172]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
8000261a:	681b      	ldr	r3, [r3, #0]
8000261c:	f003 0302 	and.w	r3, r3, #2
80002620:	2b00      	cmp	r3, #0
80002622:	d0f0      	beq.n	80002606 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
80002624:	4b28      	ldr	r3, [pc, #160]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
80002626:	681b      	ldr	r3, [r3, #0]
80002628:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
8000262c:	687b      	ldr	r3, [r7, #4]
8000262e:	691b      	ldr	r3, [r3, #16]
80002630:	00db      	lsls	r3, r3, #3
80002632:	4925      	ldr	r1, [pc, #148]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
80002634:	4313      	orrs	r3, r2
80002636:	600b      	str	r3, [r1, #0]
80002638:	e015      	b.n	80002666 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
8000263a:	4b24      	ldr	r3, [pc, #144]	; (800026cc <HAL_RCC_OscConfig+0x278>)
8000263c:	2200      	movs	r2, #0
8000263e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
80002640:	f7fe fd3c 	bl	800010bc <HAL_GetTick>
80002644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
80002646:	e008      	b.n	8000265a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
80002648:	f7fe fd38 	bl	800010bc <HAL_GetTick>
8000264c:	4602      	mov	r2, r0
8000264e:	693b      	ldr	r3, [r7, #16]
80002650:	1ad3      	subs	r3, r2, r3
80002652:	2b02      	cmp	r3, #2
80002654:	d901      	bls.n	8000265a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
80002656:	2303      	movs	r3, #3
80002658:	e193      	b.n	80002982 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
8000265a:	4b1b      	ldr	r3, [pc, #108]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
8000265c:	681b      	ldr	r3, [r3, #0]
8000265e:	f003 0302 	and.w	r3, r3, #2
80002662:	2b00      	cmp	r3, #0
80002664:	d1f0      	bne.n	80002648 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
80002666:	687b      	ldr	r3, [r7, #4]
80002668:	681b      	ldr	r3, [r3, #0]
8000266a:	f003 0308 	and.w	r3, r3, #8
8000266e:	2b00      	cmp	r3, #0
80002670:	d036      	beq.n	800026e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
80002672:	687b      	ldr	r3, [r7, #4]
80002674:	695b      	ldr	r3, [r3, #20]
80002676:	2b00      	cmp	r3, #0
80002678:	d016      	beq.n	800026a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
8000267a:	4b15      	ldr	r3, [pc, #84]	; (800026d0 <HAL_RCC_OscConfig+0x27c>)
8000267c:	2201      	movs	r2, #1
8000267e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
80002680:	f7fe fd1c 	bl	800010bc <HAL_GetTick>
80002684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
80002686:	e008      	b.n	8000269a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
80002688:	f7fe fd18 	bl	800010bc <HAL_GetTick>
8000268c:	4602      	mov	r2, r0
8000268e:	693b      	ldr	r3, [r7, #16]
80002690:	1ad3      	subs	r3, r2, r3
80002692:	2b02      	cmp	r3, #2
80002694:	d901      	bls.n	8000269a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
80002696:	2303      	movs	r3, #3
80002698:	e173      	b.n	80002982 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
8000269a:	4b0b      	ldr	r3, [pc, #44]	; (800026c8 <HAL_RCC_OscConfig+0x274>)
8000269c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
8000269e:	f003 0302 	and.w	r3, r3, #2
800026a2:	2b00      	cmp	r3, #0
800026a4:	d0f0      	beq.n	80002688 <HAL_RCC_OscConfig+0x234>
800026a6:	e01b      	b.n	800026e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
800026a8:	4b09      	ldr	r3, [pc, #36]	; (800026d0 <HAL_RCC_OscConfig+0x27c>)
800026aa:	2200      	movs	r2, #0
800026ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
800026ae:	f7fe fd05 	bl	800010bc <HAL_GetTick>
800026b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
800026b4:	e00e      	b.n	800026d4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
800026b6:	f7fe fd01 	bl	800010bc <HAL_GetTick>
800026ba:	4602      	mov	r2, r0
800026bc:	693b      	ldr	r3, [r7, #16]
800026be:	1ad3      	subs	r3, r2, r3
800026c0:	2b02      	cmp	r3, #2
800026c2:	d907      	bls.n	800026d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
800026c4:	2303      	movs	r3, #3
800026c6:	e15c      	b.n	80002982 <HAL_RCC_OscConfig+0x52e>
800026c8:	40023800 	.word	0x40023800
800026cc:	42470000 	.word	0x42470000
800026d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
800026d4:	4b8a      	ldr	r3, [pc, #552]	; (80002900 <HAL_RCC_OscConfig+0x4ac>)
800026d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
800026d8:	f003 0302 	and.w	r3, r3, #2
800026dc:	2b00      	cmp	r3, #0
800026de:	d1ea      	bne.n	800026b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
800026e0:	687b      	ldr	r3, [r7, #4]
800026e2:	681b      	ldr	r3, [r3, #0]
800026e4:	f003 0304 	and.w	r3, r3, #4
800026e8:	2b00      	cmp	r3, #0
800026ea:	f000 8097 	beq.w	8000281c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
800026ee:	2300      	movs	r3, #0
800026f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
800026f2:	4b83      	ldr	r3, [pc, #524]	; (80002900 <HAL_RCC_OscConfig+0x4ac>)
800026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
800026f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
800026fa:	2b00      	cmp	r3, #0
800026fc:	d10f      	bne.n	8000271e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
800026fe:	2300      	movs	r3, #0
80002700:	60bb      	str	r3, [r7, #8]
80002702:	4b7f      	ldr	r3, [pc, #508]	; (80002900 <HAL_RCC_OscConfig+0x4ac>)
80002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
80002706:	4a7e      	ldr	r2, [pc, #504]	; (80002900 <HAL_RCC_OscConfig+0x4ac>)
80002708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
8000270c:	6413      	str	r3, [r2, #64]	; 0x40
8000270e:	4b7c      	ldr	r3, [pc, #496]	; (80002900 <HAL_RCC_OscConfig+0x4ac>)
80002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
80002712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
80002716:	60bb      	str	r3, [r7, #8]
80002718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
8000271a:	2301      	movs	r3, #1
8000271c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
8000271e:	4b79      	ldr	r3, [pc, #484]	; (80002904 <HAL_RCC_OscConfig+0x4b0>)
80002720:	681b      	ldr	r3, [r3, #0]
80002722:	f403 7380 	and.w	r3, r3, #256	; 0x100
80002726:	2b00      	cmp	r3, #0
80002728:	d118      	bne.n	8000275c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
8000272a:	4b76      	ldr	r3, [pc, #472]	; (80002904 <HAL_RCC_OscConfig+0x4b0>)
8000272c:	681b      	ldr	r3, [r3, #0]
8000272e:	4a75      	ldr	r2, [pc, #468]	; (80002904 <HAL_RCC_OscConfig+0x4b0>)
80002730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
80002734:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
80002736:	f7fe fcc1 	bl	800010bc <HAL_GetTick>
8000273a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
8000273c:	e008      	b.n	80002750 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
8000273e:	f7fe fcbd 	bl	800010bc <HAL_GetTick>
80002742:	4602      	mov	r2, r0
80002744:	693b      	ldr	r3, [r7, #16]
80002746:	1ad3      	subs	r3, r2, r3
80002748:	2b02      	cmp	r3, #2
8000274a:	d901      	bls.n	80002750 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
8000274c:	2303      	movs	r3, #3
8000274e:	e118      	b.n	80002982 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
80002750:	4b6c      	ldr	r3, [pc, #432]	; (80002904 <HAL_RCC_OscConfig+0x4b0>)
80002752:	681b      	ldr	r3, [r3, #0]
80002754:	f403 7380 	and.w	r3, r3, #256	; 0x100
80002758:	2b00      	cmp	r3, #0
8000275a:	d0f0      	beq.n	8000273e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
8000275c:	687b      	ldr	r3, [r7, #4]
8000275e:	689b      	ldr	r3, [r3, #8]
80002760:	2b01      	cmp	r3, #1
80002762:	d106      	bne.n	80002772 <HAL_RCC_OscConfig+0x31e>
80002764:	4b66      	ldr	r3, [pc, #408]	; (80002900 <HAL_RCC_OscConfig+0x4ac>)
80002766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
80002768:	4a65      	ldr	r2, [pc, #404]	; (80002900 <HAL_RCC_OscConfig+0x4ac>)
8000276a:	f043 0301 	orr.w	r3, r3, #1
8000276e:	6713      	str	r3, [r2, #112]	; 0x70
80002770:	e01c      	b.n	800027ac <HAL_RCC_OscConfig+0x358>
80002772:	687b      	ldr	r3, [r7, #4]
80002774:	689b      	ldr	r3, [r3, #8]
80002776:	2b05      	cmp	r3, #5
80002778:	d10c      	bne.n	80002794 <HAL_RCC_OscConfig+0x340>
8000277a:	4b61      	ldr	r3, [pc, #388]	; (80002900 <HAL_RCC_OscConfig+0x4ac>)
8000277c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
8000277e:	4a60      	ldr	r2, [pc, #384]	; (80002900 <HAL_RCC_OscConfig+0x4ac>)
80002780:	f043 0304 	orr.w	r3, r3, #4
80002784:	6713      	str	r3, [r2, #112]	; 0x70
80002786:	4b5e      	ldr	r3, [pc, #376]	; (80002900 <HAL_RCC_OscConfig+0x4ac>)
80002788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
8000278a:	4a5d      	ldr	r2, [pc, #372]	; (80002900 <HAL_RCC_OscConfig+0x4ac>)
8000278c:	f043 0301 	orr.w	r3, r3, #1
80002790:	6713      	str	r3, [r2, #112]	; 0x70
80002792:	e00b      	b.n	800027ac <HAL_RCC_OscConfig+0x358>
80002794:	4b5a      	ldr	r3, [pc, #360]	; (80002900 <HAL_RCC_OscConfig+0x4ac>)
80002796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
80002798:	4a59      	ldr	r2, [pc, #356]	; (80002900 <HAL_RCC_OscConfig+0x4ac>)
8000279a:	f023 0301 	bic.w	r3, r3, #1
8000279e:	6713      	str	r3, [r2, #112]	; 0x70
800027a0:	4b57      	ldr	r3, [pc, #348]	; (80002900 <HAL_RCC_OscConfig+0x4ac>)
800027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
800027a4:	4a56      	ldr	r2, [pc, #344]	; (80002900 <HAL_RCC_OscConfig+0x4ac>)
800027a6:	f023 0304 	bic.w	r3, r3, #4
800027aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
800027ac:	687b      	ldr	r3, [r7, #4]
800027ae:	689b      	ldr	r3, [r3, #8]
800027b0:	2b00      	cmp	r3, #0
800027b2:	d015      	beq.n	800027e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
800027b4:	f7fe fc82 	bl	800010bc <HAL_GetTick>
800027b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
800027ba:	e00a      	b.n	800027d2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
800027bc:	f7fe fc7e 	bl	800010bc <HAL_GetTick>
800027c0:	4602      	mov	r2, r0
800027c2:	693b      	ldr	r3, [r7, #16]
800027c4:	1ad3      	subs	r3, r2, r3
800027c6:	f241 3288 	movw	r2, #5000	; 0x1388
800027ca:	4293      	cmp	r3, r2
800027cc:	d901      	bls.n	800027d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
800027ce:	2303      	movs	r3, #3
800027d0:	e0d7      	b.n	80002982 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
800027d2:	4b4b      	ldr	r3, [pc, #300]	; (80002900 <HAL_RCC_OscConfig+0x4ac>)
800027d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
800027d6:	f003 0302 	and.w	r3, r3, #2
800027da:	2b00      	cmp	r3, #0
800027dc:	d0ee      	beq.n	800027bc <HAL_RCC_OscConfig+0x368>
800027de:	e014      	b.n	8000280a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
800027e0:	f7fe fc6c 	bl	800010bc <HAL_GetTick>
800027e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
800027e6:	e00a      	b.n	800027fe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
800027e8:	f7fe fc68 	bl	800010bc <HAL_GetTick>
800027ec:	4602      	mov	r2, r0
800027ee:	693b      	ldr	r3, [r7, #16]
800027f0:	1ad3      	subs	r3, r2, r3
800027f2:	f241 3288 	movw	r2, #5000	; 0x1388
800027f6:	4293      	cmp	r3, r2
800027f8:	d901      	bls.n	800027fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
800027fa:	2303      	movs	r3, #3
800027fc:	e0c1      	b.n	80002982 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
800027fe:	4b40      	ldr	r3, [pc, #256]	; (80002900 <HAL_RCC_OscConfig+0x4ac>)
80002800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
80002802:	f003 0302 	and.w	r3, r3, #2
80002806:	2b00      	cmp	r3, #0
80002808:	d1ee      	bne.n	800027e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
8000280a:	7dfb      	ldrb	r3, [r7, #23]
8000280c:	2b01      	cmp	r3, #1
8000280e:	d105      	bne.n	8000281c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
80002810:	4b3b      	ldr	r3, [pc, #236]	; (80002900 <HAL_RCC_OscConfig+0x4ac>)
80002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
80002814:	4a3a      	ldr	r2, [pc, #232]	; (80002900 <HAL_RCC_OscConfig+0x4ac>)
80002816:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
8000281a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
8000281c:	687b      	ldr	r3, [r7, #4]
8000281e:	699b      	ldr	r3, [r3, #24]
80002820:	2b00      	cmp	r3, #0
80002822:	f000 80ad 	beq.w	80002980 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
80002826:	4b36      	ldr	r3, [pc, #216]	; (80002900 <HAL_RCC_OscConfig+0x4ac>)
80002828:	689b      	ldr	r3, [r3, #8]
8000282a:	f003 030c 	and.w	r3, r3, #12
8000282e:	2b08      	cmp	r3, #8
80002830:	d060      	beq.n	800028f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
80002832:	687b      	ldr	r3, [r7, #4]
80002834:	699b      	ldr	r3, [r3, #24]
80002836:	2b02      	cmp	r3, #2
80002838:	d145      	bne.n	800028c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
8000283a:	4b33      	ldr	r3, [pc, #204]	; (80002908 <HAL_RCC_OscConfig+0x4b4>)
8000283c:	2200      	movs	r2, #0
8000283e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
80002840:	f7fe fc3c 	bl	800010bc <HAL_GetTick>
80002844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
80002846:	e008      	b.n	8000285a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
80002848:	f7fe fc38 	bl	800010bc <HAL_GetTick>
8000284c:	4602      	mov	r2, r0
8000284e:	693b      	ldr	r3, [r7, #16]
80002850:	1ad3      	subs	r3, r2, r3
80002852:	2b02      	cmp	r3, #2
80002854:	d901      	bls.n	8000285a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
80002856:	2303      	movs	r3, #3
80002858:	e093      	b.n	80002982 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
8000285a:	4b29      	ldr	r3, [pc, #164]	; (80002900 <HAL_RCC_OscConfig+0x4ac>)
8000285c:	681b      	ldr	r3, [r3, #0]
8000285e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
80002862:	2b00      	cmp	r3, #0
80002864:	d1f0      	bne.n	80002848 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
80002866:	687b      	ldr	r3, [r7, #4]
80002868:	69da      	ldr	r2, [r3, #28]
8000286a:	687b      	ldr	r3, [r7, #4]
8000286c:	6a1b      	ldr	r3, [r3, #32]
8000286e:	431a      	orrs	r2, r3
80002870:	687b      	ldr	r3, [r7, #4]
80002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
80002874:	019b      	lsls	r3, r3, #6
80002876:	431a      	orrs	r2, r3
80002878:	687b      	ldr	r3, [r7, #4]
8000287a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
8000287c:	085b      	lsrs	r3, r3, #1
8000287e:	3b01      	subs	r3, #1
80002880:	041b      	lsls	r3, r3, #16
80002882:	431a      	orrs	r2, r3
80002884:	687b      	ldr	r3, [r7, #4]
80002886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
80002888:	061b      	lsls	r3, r3, #24
8000288a:	431a      	orrs	r2, r3
8000288c:	687b      	ldr	r3, [r7, #4]
8000288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
80002890:	071b      	lsls	r3, r3, #28
80002892:	491b      	ldr	r1, [pc, #108]	; (80002900 <HAL_RCC_OscConfig+0x4ac>)
80002894:	4313      	orrs	r3, r2
80002896:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
80002898:	4b1b      	ldr	r3, [pc, #108]	; (80002908 <HAL_RCC_OscConfig+0x4b4>)
8000289a:	2201      	movs	r2, #1
8000289c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
8000289e:	f7fe fc0d 	bl	800010bc <HAL_GetTick>
800028a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
800028a4:	e008      	b.n	800028b8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
800028a6:	f7fe fc09 	bl	800010bc <HAL_GetTick>
800028aa:	4602      	mov	r2, r0
800028ac:	693b      	ldr	r3, [r7, #16]
800028ae:	1ad3      	subs	r3, r2, r3
800028b0:	2b02      	cmp	r3, #2
800028b2:	d901      	bls.n	800028b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
800028b4:	2303      	movs	r3, #3
800028b6:	e064      	b.n	80002982 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
800028b8:	4b11      	ldr	r3, [pc, #68]	; (80002900 <HAL_RCC_OscConfig+0x4ac>)
800028ba:	681b      	ldr	r3, [r3, #0]
800028bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
800028c0:	2b00      	cmp	r3, #0
800028c2:	d0f0      	beq.n	800028a6 <HAL_RCC_OscConfig+0x452>
800028c4:	e05c      	b.n	80002980 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
800028c6:	4b10      	ldr	r3, [pc, #64]	; (80002908 <HAL_RCC_OscConfig+0x4b4>)
800028c8:	2200      	movs	r2, #0
800028ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
800028cc:	f7fe fbf6 	bl	800010bc <HAL_GetTick>
800028d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
800028d2:	e008      	b.n	800028e6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
800028d4:	f7fe fbf2 	bl	800010bc <HAL_GetTick>
800028d8:	4602      	mov	r2, r0
800028da:	693b      	ldr	r3, [r7, #16]
800028dc:	1ad3      	subs	r3, r2, r3
800028de:	2b02      	cmp	r3, #2
800028e0:	d901      	bls.n	800028e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
800028e2:	2303      	movs	r3, #3
800028e4:	e04d      	b.n	80002982 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
800028e6:	4b06      	ldr	r3, [pc, #24]	; (80002900 <HAL_RCC_OscConfig+0x4ac>)
800028e8:	681b      	ldr	r3, [r3, #0]
800028ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
800028ee:	2b00      	cmp	r3, #0
800028f0:	d1f0      	bne.n	800028d4 <HAL_RCC_OscConfig+0x480>
800028f2:	e045      	b.n	80002980 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
800028f4:	687b      	ldr	r3, [r7, #4]
800028f6:	699b      	ldr	r3, [r3, #24]
800028f8:	2b01      	cmp	r3, #1
800028fa:	d107      	bne.n	8000290c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
800028fc:	2301      	movs	r3, #1
800028fe:	e040      	b.n	80002982 <HAL_RCC_OscConfig+0x52e>
80002900:	40023800 	.word	0x40023800
80002904:	40007000 	.word	0x40007000
80002908:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
8000290c:	4b1f      	ldr	r3, [pc, #124]	; (8000298c <HAL_RCC_OscConfig+0x538>)
8000290e:	685b      	ldr	r3, [r3, #4]
80002910:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
80002912:	687b      	ldr	r3, [r7, #4]
80002914:	699b      	ldr	r3, [r3, #24]
80002916:	2b01      	cmp	r3, #1
80002918:	d030      	beq.n	8000297c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
8000291a:	68fb      	ldr	r3, [r7, #12]
8000291c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
80002920:	687b      	ldr	r3, [r7, #4]
80002922:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
80002924:	429a      	cmp	r2, r3
80002926:	d129      	bne.n	8000297c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
80002928:	68fb      	ldr	r3, [r7, #12]
8000292a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
8000292e:	687b      	ldr	r3, [r7, #4]
80002930:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
80002932:	429a      	cmp	r2, r3
80002934:	d122      	bne.n	8000297c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
80002936:	68fa      	ldr	r2, [r7, #12]
80002938:	f647 73c0 	movw	r3, #32704	; 0x7fc0
8000293c:	4013      	ands	r3, r2
8000293e:	687a      	ldr	r2, [r7, #4]
80002940:	6a52      	ldr	r2, [r2, #36]	; 0x24
80002942:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
80002944:	4293      	cmp	r3, r2
80002946:	d119      	bne.n	8000297c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
80002948:	68fb      	ldr	r3, [r7, #12]
8000294a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
8000294e:	687b      	ldr	r3, [r7, #4]
80002950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
80002952:	085b      	lsrs	r3, r3, #1
80002954:	3b01      	subs	r3, #1
80002956:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
80002958:	429a      	cmp	r2, r3
8000295a:	d10f      	bne.n	8000297c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
8000295c:	68fb      	ldr	r3, [r7, #12]
8000295e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
80002962:	687b      	ldr	r3, [r7, #4]
80002964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
80002966:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
80002968:	429a      	cmp	r2, r3
8000296a:	d107      	bne.n	8000297c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
8000296c:	68fb      	ldr	r3, [r7, #12]
8000296e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
80002972:	687b      	ldr	r3, [r7, #4]
80002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
80002976:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
80002978:	429a      	cmp	r2, r3
8000297a:	d001      	beq.n	80002980 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
8000297c:	2301      	movs	r3, #1
8000297e:	e000      	b.n	80002982 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
80002980:	2300      	movs	r3, #0
}
80002982:	4618      	mov	r0, r3
80002984:	3718      	adds	r7, #24
80002986:	46bd      	mov	sp, r7
80002988:	bd80      	pop	{r7, pc}
8000298a:	bf00      	nop
8000298c:	40023800 	.word	0x40023800

80002990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
80002990:	b580      	push	{r7, lr}
80002992:	b082      	sub	sp, #8
80002994:	af00      	add	r7, sp, #0
80002996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
80002998:	687b      	ldr	r3, [r7, #4]
8000299a:	2b00      	cmp	r3, #0
8000299c:	d101      	bne.n	800029a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
8000299e:	2301      	movs	r3, #1
800029a0:	e041      	b.n	80002a26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
800029a2:	687b      	ldr	r3, [r7, #4]
800029a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
800029a8:	b2db      	uxtb	r3, r3
800029aa:	2b00      	cmp	r3, #0
800029ac:	d106      	bne.n	800029bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
800029ae:	687b      	ldr	r3, [r7, #4]
800029b0:	2200      	movs	r2, #0
800029b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
800029b6:	6878      	ldr	r0, [r7, #4]
800029b8:	f7fe f986 	bl	80000cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
800029bc:	687b      	ldr	r3, [r7, #4]
800029be:	2202      	movs	r2, #2
800029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
800029c4:	687b      	ldr	r3, [r7, #4]
800029c6:	681a      	ldr	r2, [r3, #0]
800029c8:	687b      	ldr	r3, [r7, #4]
800029ca:	3304      	adds	r3, #4
800029cc:	4619      	mov	r1, r3
800029ce:	4610      	mov	r0, r2
800029d0:	f001 f918 	bl	80003c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
800029d4:	687b      	ldr	r3, [r7, #4]
800029d6:	2201      	movs	r2, #1
800029d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
800029dc:	687b      	ldr	r3, [r7, #4]
800029de:	2201      	movs	r2, #1
800029e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
800029e4:	687b      	ldr	r3, [r7, #4]
800029e6:	2201      	movs	r2, #1
800029e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
800029ec:	687b      	ldr	r3, [r7, #4]
800029ee:	2201      	movs	r2, #1
800029f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
800029f4:	687b      	ldr	r3, [r7, #4]
800029f6:	2201      	movs	r2, #1
800029f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
800029fc:	687b      	ldr	r3, [r7, #4]
800029fe:	2201      	movs	r2, #1
80002a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
80002a04:	687b      	ldr	r3, [r7, #4]
80002a06:	2201      	movs	r2, #1
80002a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
80002a0c:	687b      	ldr	r3, [r7, #4]
80002a0e:	2201      	movs	r2, #1
80002a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
80002a14:	687b      	ldr	r3, [r7, #4]
80002a16:	2201      	movs	r2, #1
80002a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
80002a1c:	687b      	ldr	r3, [r7, #4]
80002a1e:	2201      	movs	r2, #1
80002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
80002a24:	2300      	movs	r3, #0
}
80002a26:	4618      	mov	r0, r3
80002a28:	3708      	adds	r7, #8
80002a2a:	46bd      	mov	sp, r7
80002a2c:	bd80      	pop	{r7, pc}

80002a2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
80002a2e:	b580      	push	{r7, lr}
80002a30:	b082      	sub	sp, #8
80002a32:	af00      	add	r7, sp, #0
80002a34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
80002a36:	687b      	ldr	r3, [r7, #4]
80002a38:	2b00      	cmp	r3, #0
80002a3a:	d101      	bne.n	80002a40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
80002a3c:	2301      	movs	r3, #1
80002a3e:	e041      	b.n	80002ac4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
80002a40:	687b      	ldr	r3, [r7, #4]
80002a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
80002a46:	b2db      	uxtb	r3, r3
80002a48:	2b00      	cmp	r3, #0
80002a4a:	d106      	bne.n	80002a5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
80002a4c:	687b      	ldr	r3, [r7, #4]
80002a4e:	2200      	movs	r2, #0
80002a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
80002a54:	6878      	ldr	r0, [r7, #4]
80002a56:	f000 f839 	bl	80002acc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
80002a5a:	687b      	ldr	r3, [r7, #4]
80002a5c:	2202      	movs	r2, #2
80002a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
80002a62:	687b      	ldr	r3, [r7, #4]
80002a64:	681a      	ldr	r2, [r3, #0]
80002a66:	687b      	ldr	r3, [r7, #4]
80002a68:	3304      	adds	r3, #4
80002a6a:	4619      	mov	r1, r3
80002a6c:	4610      	mov	r0, r2
80002a6e:	f001 f8c9 	bl	80003c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
80002a72:	687b      	ldr	r3, [r7, #4]
80002a74:	2201      	movs	r2, #1
80002a76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
80002a7a:	687b      	ldr	r3, [r7, #4]
80002a7c:	2201      	movs	r2, #1
80002a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
80002a82:	687b      	ldr	r3, [r7, #4]
80002a84:	2201      	movs	r2, #1
80002a86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
80002a8a:	687b      	ldr	r3, [r7, #4]
80002a8c:	2201      	movs	r2, #1
80002a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
80002a92:	687b      	ldr	r3, [r7, #4]
80002a94:	2201      	movs	r2, #1
80002a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
80002a9a:	687b      	ldr	r3, [r7, #4]
80002a9c:	2201      	movs	r2, #1
80002a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
80002aa2:	687b      	ldr	r3, [r7, #4]
80002aa4:	2201      	movs	r2, #1
80002aa6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
80002aaa:	687b      	ldr	r3, [r7, #4]
80002aac:	2201      	movs	r2, #1
80002aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
80002ab2:	687b      	ldr	r3, [r7, #4]
80002ab4:	2201      	movs	r2, #1
80002ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
80002aba:	687b      	ldr	r3, [r7, #4]
80002abc:	2201      	movs	r2, #1
80002abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
80002ac2:	2300      	movs	r3, #0
}
80002ac4:	4618      	mov	r0, r3
80002ac6:	3708      	adds	r7, #8
80002ac8:	46bd      	mov	sp, r7
80002aca:	bd80      	pop	{r7, pc}

80002acc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
80002acc:	b480      	push	{r7}
80002ace:	b083      	sub	sp, #12
80002ad0:	af00      	add	r7, sp, #0
80002ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
80002ad4:	bf00      	nop
80002ad6:	370c      	adds	r7, #12
80002ad8:	46bd      	mov	sp, r7
80002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
80002ade:	4770      	bx	lr

80002ae0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
80002ae0:	b580      	push	{r7, lr}
80002ae2:	b086      	sub	sp, #24
80002ae4:	af00      	add	r7, sp, #0
80002ae6:	60f8      	str	r0, [r7, #12]
80002ae8:	60b9      	str	r1, [r7, #8]
80002aea:	607a      	str	r2, [r7, #4]
80002aec:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
80002aee:	2300      	movs	r3, #0
80002af0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
80002af2:	68bb      	ldr	r3, [r7, #8]
80002af4:	2b00      	cmp	r3, #0
80002af6:	d109      	bne.n	80002b0c <HAL_TIM_PWM_Start_DMA+0x2c>
80002af8:	68fb      	ldr	r3, [r7, #12]
80002afa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
80002afe:	b2db      	uxtb	r3, r3
80002b00:	2b02      	cmp	r3, #2
80002b02:	bf0c      	ite	eq
80002b04:	2301      	moveq	r3, #1
80002b06:	2300      	movne	r3, #0
80002b08:	b2db      	uxtb	r3, r3
80002b0a:	e022      	b.n	80002b52 <HAL_TIM_PWM_Start_DMA+0x72>
80002b0c:	68bb      	ldr	r3, [r7, #8]
80002b0e:	2b04      	cmp	r3, #4
80002b10:	d109      	bne.n	80002b26 <HAL_TIM_PWM_Start_DMA+0x46>
80002b12:	68fb      	ldr	r3, [r7, #12]
80002b14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
80002b18:	b2db      	uxtb	r3, r3
80002b1a:	2b02      	cmp	r3, #2
80002b1c:	bf0c      	ite	eq
80002b1e:	2301      	moveq	r3, #1
80002b20:	2300      	movne	r3, #0
80002b22:	b2db      	uxtb	r3, r3
80002b24:	e015      	b.n	80002b52 <HAL_TIM_PWM_Start_DMA+0x72>
80002b26:	68bb      	ldr	r3, [r7, #8]
80002b28:	2b08      	cmp	r3, #8
80002b2a:	d109      	bne.n	80002b40 <HAL_TIM_PWM_Start_DMA+0x60>
80002b2c:	68fb      	ldr	r3, [r7, #12]
80002b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
80002b32:	b2db      	uxtb	r3, r3
80002b34:	2b02      	cmp	r3, #2
80002b36:	bf0c      	ite	eq
80002b38:	2301      	moveq	r3, #1
80002b3a:	2300      	movne	r3, #0
80002b3c:	b2db      	uxtb	r3, r3
80002b3e:	e008      	b.n	80002b52 <HAL_TIM_PWM_Start_DMA+0x72>
80002b40:	68fb      	ldr	r3, [r7, #12]
80002b42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
80002b46:	b2db      	uxtb	r3, r3
80002b48:	2b02      	cmp	r3, #2
80002b4a:	bf0c      	ite	eq
80002b4c:	2301      	moveq	r3, #1
80002b4e:	2300      	movne	r3, #0
80002b50:	b2db      	uxtb	r3, r3
80002b52:	2b00      	cmp	r3, #0
80002b54:	d001      	beq.n	80002b5a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
80002b56:	2302      	movs	r3, #2
80002b58:	e171      	b.n	80002e3e <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
80002b5a:	68bb      	ldr	r3, [r7, #8]
80002b5c:	2b00      	cmp	r3, #0
80002b5e:	d109      	bne.n	80002b74 <HAL_TIM_PWM_Start_DMA+0x94>
80002b60:	68fb      	ldr	r3, [r7, #12]
80002b62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
80002b66:	b2db      	uxtb	r3, r3
80002b68:	2b01      	cmp	r3, #1
80002b6a:	bf0c      	ite	eq
80002b6c:	2301      	moveq	r3, #1
80002b6e:	2300      	movne	r3, #0
80002b70:	b2db      	uxtb	r3, r3
80002b72:	e022      	b.n	80002bba <HAL_TIM_PWM_Start_DMA+0xda>
80002b74:	68bb      	ldr	r3, [r7, #8]
80002b76:	2b04      	cmp	r3, #4
80002b78:	d109      	bne.n	80002b8e <HAL_TIM_PWM_Start_DMA+0xae>
80002b7a:	68fb      	ldr	r3, [r7, #12]
80002b7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
80002b80:	b2db      	uxtb	r3, r3
80002b82:	2b01      	cmp	r3, #1
80002b84:	bf0c      	ite	eq
80002b86:	2301      	moveq	r3, #1
80002b88:	2300      	movne	r3, #0
80002b8a:	b2db      	uxtb	r3, r3
80002b8c:	e015      	b.n	80002bba <HAL_TIM_PWM_Start_DMA+0xda>
80002b8e:	68bb      	ldr	r3, [r7, #8]
80002b90:	2b08      	cmp	r3, #8
80002b92:	d109      	bne.n	80002ba8 <HAL_TIM_PWM_Start_DMA+0xc8>
80002b94:	68fb      	ldr	r3, [r7, #12]
80002b96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
80002b9a:	b2db      	uxtb	r3, r3
80002b9c:	2b01      	cmp	r3, #1
80002b9e:	bf0c      	ite	eq
80002ba0:	2301      	moveq	r3, #1
80002ba2:	2300      	movne	r3, #0
80002ba4:	b2db      	uxtb	r3, r3
80002ba6:	e008      	b.n	80002bba <HAL_TIM_PWM_Start_DMA+0xda>
80002ba8:	68fb      	ldr	r3, [r7, #12]
80002baa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
80002bae:	b2db      	uxtb	r3, r3
80002bb0:	2b01      	cmp	r3, #1
80002bb2:	bf0c      	ite	eq
80002bb4:	2301      	moveq	r3, #1
80002bb6:	2300      	movne	r3, #0
80002bb8:	b2db      	uxtb	r3, r3
80002bba:	2b00      	cmp	r3, #0
80002bbc:	d024      	beq.n	80002c08 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
80002bbe:	687b      	ldr	r3, [r7, #4]
80002bc0:	2b00      	cmp	r3, #0
80002bc2:	d104      	bne.n	80002bce <HAL_TIM_PWM_Start_DMA+0xee>
80002bc4:	887b      	ldrh	r3, [r7, #2]
80002bc6:	2b00      	cmp	r3, #0
80002bc8:	d001      	beq.n	80002bce <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
80002bca:	2301      	movs	r3, #1
80002bcc:	e137      	b.n	80002e3e <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
80002bce:	68bb      	ldr	r3, [r7, #8]
80002bd0:	2b00      	cmp	r3, #0
80002bd2:	d104      	bne.n	80002bde <HAL_TIM_PWM_Start_DMA+0xfe>
80002bd4:	68fb      	ldr	r3, [r7, #12]
80002bd6:	2202      	movs	r2, #2
80002bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
80002bdc:	e016      	b.n	80002c0c <HAL_TIM_PWM_Start_DMA+0x12c>
80002bde:	68bb      	ldr	r3, [r7, #8]
80002be0:	2b04      	cmp	r3, #4
80002be2:	d104      	bne.n	80002bee <HAL_TIM_PWM_Start_DMA+0x10e>
80002be4:	68fb      	ldr	r3, [r7, #12]
80002be6:	2202      	movs	r2, #2
80002be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
80002bec:	e00e      	b.n	80002c0c <HAL_TIM_PWM_Start_DMA+0x12c>
80002bee:	68bb      	ldr	r3, [r7, #8]
80002bf0:	2b08      	cmp	r3, #8
80002bf2:	d104      	bne.n	80002bfe <HAL_TIM_PWM_Start_DMA+0x11e>
80002bf4:	68fb      	ldr	r3, [r7, #12]
80002bf6:	2202      	movs	r2, #2
80002bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
80002bfc:	e006      	b.n	80002c0c <HAL_TIM_PWM_Start_DMA+0x12c>
80002bfe:	68fb      	ldr	r3, [r7, #12]
80002c00:	2202      	movs	r2, #2
80002c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
80002c06:	e001      	b.n	80002c0c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
80002c08:	2301      	movs	r3, #1
80002c0a:	e118      	b.n	80002e3e <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
80002c0c:	68bb      	ldr	r3, [r7, #8]
80002c0e:	2b0c      	cmp	r3, #12
80002c10:	f200 80ae 	bhi.w	80002d70 <HAL_TIM_PWM_Start_DMA+0x290>
80002c14:	a201      	add	r2, pc, #4	; (adr r2, 80002c1c <HAL_TIM_PWM_Start_DMA+0x13c>)
80002c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
80002c1a:	bf00      	nop
80002c1c:	80002c51 	.word	0x80002c51
80002c20:	80002d71 	.word	0x80002d71
80002c24:	80002d71 	.word	0x80002d71
80002c28:	80002d71 	.word	0x80002d71
80002c2c:	80002c99 	.word	0x80002c99
80002c30:	80002d71 	.word	0x80002d71
80002c34:	80002d71 	.word	0x80002d71
80002c38:	80002d71 	.word	0x80002d71
80002c3c:	80002ce1 	.word	0x80002ce1
80002c40:	80002d71 	.word	0x80002d71
80002c44:	80002d71 	.word	0x80002d71
80002c48:	80002d71 	.word	0x80002d71
80002c4c:	80002d29 	.word	0x80002d29
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
80002c50:	68fb      	ldr	r3, [r7, #12]
80002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
80002c54:	4a7c      	ldr	r2, [pc, #496]	; (80002e48 <HAL_TIM_PWM_Start_DMA+0x368>)
80002c56:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
80002c58:	68fb      	ldr	r3, [r7, #12]
80002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
80002c5c:	4a7b      	ldr	r2, [pc, #492]	; (80002e4c <HAL_TIM_PWM_Start_DMA+0x36c>)
80002c5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
80002c60:	68fb      	ldr	r3, [r7, #12]
80002c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
80002c64:	4a7a      	ldr	r2, [pc, #488]	; (80002e50 <HAL_TIM_PWM_Start_DMA+0x370>)
80002c66:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
80002c68:	68fb      	ldr	r3, [r7, #12]
80002c6a:	6a58      	ldr	r0, [r3, #36]	; 0x24
80002c6c:	6879      	ldr	r1, [r7, #4]
80002c6e:	68fb      	ldr	r3, [r7, #12]
80002c70:	681b      	ldr	r3, [r3, #0]
80002c72:	3334      	adds	r3, #52	; 0x34
80002c74:	461a      	mov	r2, r3
80002c76:	887b      	ldrh	r3, [r7, #2]
80002c78:	f7fe fc10 	bl	8000149c <HAL_DMA_Start_IT>
80002c7c:	4603      	mov	r3, r0
80002c7e:	2b00      	cmp	r3, #0
80002c80:	d001      	beq.n	80002c86 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
80002c82:	2301      	movs	r3, #1
80002c84:	e0db      	b.n	80002e3e <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
80002c86:	68fb      	ldr	r3, [r7, #12]
80002c88:	681b      	ldr	r3, [r3, #0]
80002c8a:	68da      	ldr	r2, [r3, #12]
80002c8c:	68fb      	ldr	r3, [r7, #12]
80002c8e:	681b      	ldr	r3, [r3, #0]
80002c90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
80002c94:	60da      	str	r2, [r3, #12]
      break;
80002c96:	e06e      	b.n	80002d76 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
80002c98:	68fb      	ldr	r3, [r7, #12]
80002c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
80002c9c:	4a6a      	ldr	r2, [pc, #424]	; (80002e48 <HAL_TIM_PWM_Start_DMA+0x368>)
80002c9e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
80002ca0:	68fb      	ldr	r3, [r7, #12]
80002ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
80002ca4:	4a69      	ldr	r2, [pc, #420]	; (80002e4c <HAL_TIM_PWM_Start_DMA+0x36c>)
80002ca6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
80002ca8:	68fb      	ldr	r3, [r7, #12]
80002caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
80002cac:	4a68      	ldr	r2, [pc, #416]	; (80002e50 <HAL_TIM_PWM_Start_DMA+0x370>)
80002cae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
80002cb0:	68fb      	ldr	r3, [r7, #12]
80002cb2:	6a98      	ldr	r0, [r3, #40]	; 0x28
80002cb4:	6879      	ldr	r1, [r7, #4]
80002cb6:	68fb      	ldr	r3, [r7, #12]
80002cb8:	681b      	ldr	r3, [r3, #0]
80002cba:	3338      	adds	r3, #56	; 0x38
80002cbc:	461a      	mov	r2, r3
80002cbe:	887b      	ldrh	r3, [r7, #2]
80002cc0:	f7fe fbec 	bl	8000149c <HAL_DMA_Start_IT>
80002cc4:	4603      	mov	r3, r0
80002cc6:	2b00      	cmp	r3, #0
80002cc8:	d001      	beq.n	80002cce <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
80002cca:	2301      	movs	r3, #1
80002ccc:	e0b7      	b.n	80002e3e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
80002cce:	68fb      	ldr	r3, [r7, #12]
80002cd0:	681b      	ldr	r3, [r3, #0]
80002cd2:	68da      	ldr	r2, [r3, #12]
80002cd4:	68fb      	ldr	r3, [r7, #12]
80002cd6:	681b      	ldr	r3, [r3, #0]
80002cd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
80002cdc:	60da      	str	r2, [r3, #12]
      break;
80002cde:	e04a      	b.n	80002d76 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
80002ce0:	68fb      	ldr	r3, [r7, #12]
80002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
80002ce4:	4a58      	ldr	r2, [pc, #352]	; (80002e48 <HAL_TIM_PWM_Start_DMA+0x368>)
80002ce6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
80002ce8:	68fb      	ldr	r3, [r7, #12]
80002cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
80002cec:	4a57      	ldr	r2, [pc, #348]	; (80002e4c <HAL_TIM_PWM_Start_DMA+0x36c>)
80002cee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
80002cf0:	68fb      	ldr	r3, [r7, #12]
80002cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
80002cf4:	4a56      	ldr	r2, [pc, #344]	; (80002e50 <HAL_TIM_PWM_Start_DMA+0x370>)
80002cf6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
80002cf8:	68fb      	ldr	r3, [r7, #12]
80002cfa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
80002cfc:	6879      	ldr	r1, [r7, #4]
80002cfe:	68fb      	ldr	r3, [r7, #12]
80002d00:	681b      	ldr	r3, [r3, #0]
80002d02:	333c      	adds	r3, #60	; 0x3c
80002d04:	461a      	mov	r2, r3
80002d06:	887b      	ldrh	r3, [r7, #2]
80002d08:	f7fe fbc8 	bl	8000149c <HAL_DMA_Start_IT>
80002d0c:	4603      	mov	r3, r0
80002d0e:	2b00      	cmp	r3, #0
80002d10:	d001      	beq.n	80002d16 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
80002d12:	2301      	movs	r3, #1
80002d14:	e093      	b.n	80002e3e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
80002d16:	68fb      	ldr	r3, [r7, #12]
80002d18:	681b      	ldr	r3, [r3, #0]
80002d1a:	68da      	ldr	r2, [r3, #12]
80002d1c:	68fb      	ldr	r3, [r7, #12]
80002d1e:	681b      	ldr	r3, [r3, #0]
80002d20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
80002d24:	60da      	str	r2, [r3, #12]
      break;
80002d26:	e026      	b.n	80002d76 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
80002d28:	68fb      	ldr	r3, [r7, #12]
80002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
80002d2c:	4a46      	ldr	r2, [pc, #280]	; (80002e48 <HAL_TIM_PWM_Start_DMA+0x368>)
80002d2e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
80002d30:	68fb      	ldr	r3, [r7, #12]
80002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
80002d34:	4a45      	ldr	r2, [pc, #276]	; (80002e4c <HAL_TIM_PWM_Start_DMA+0x36c>)
80002d36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
80002d38:	68fb      	ldr	r3, [r7, #12]
80002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
80002d3c:	4a44      	ldr	r2, [pc, #272]	; (80002e50 <HAL_TIM_PWM_Start_DMA+0x370>)
80002d3e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
80002d40:	68fb      	ldr	r3, [r7, #12]
80002d42:	6b18      	ldr	r0, [r3, #48]	; 0x30
80002d44:	6879      	ldr	r1, [r7, #4]
80002d46:	68fb      	ldr	r3, [r7, #12]
80002d48:	681b      	ldr	r3, [r3, #0]
80002d4a:	3340      	adds	r3, #64	; 0x40
80002d4c:	461a      	mov	r2, r3
80002d4e:	887b      	ldrh	r3, [r7, #2]
80002d50:	f7fe fba4 	bl	8000149c <HAL_DMA_Start_IT>
80002d54:	4603      	mov	r3, r0
80002d56:	2b00      	cmp	r3, #0
80002d58:	d001      	beq.n	80002d5e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
80002d5a:	2301      	movs	r3, #1
80002d5c:	e06f      	b.n	80002e3e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
80002d5e:	68fb      	ldr	r3, [r7, #12]
80002d60:	681b      	ldr	r3, [r3, #0]
80002d62:	68da      	ldr	r2, [r3, #12]
80002d64:	68fb      	ldr	r3, [r7, #12]
80002d66:	681b      	ldr	r3, [r3, #0]
80002d68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
80002d6c:	60da      	str	r2, [r3, #12]
      break;
80002d6e:	e002      	b.n	80002d76 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
80002d70:	2301      	movs	r3, #1
80002d72:	75fb      	strb	r3, [r7, #23]
      break;
80002d74:	bf00      	nop
  }

  if (status == HAL_OK)
80002d76:	7dfb      	ldrb	r3, [r7, #23]
80002d78:	2b00      	cmp	r3, #0
80002d7a:	d15f      	bne.n	80002e3c <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
80002d7c:	68fb      	ldr	r3, [r7, #12]
80002d7e:	681b      	ldr	r3, [r3, #0]
80002d80:	2201      	movs	r2, #1
80002d82:	68b9      	ldr	r1, [r7, #8]
80002d84:	4618      	mov	r0, r3
80002d86:	f001 fb51 	bl	8000442c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
80002d8a:	68fb      	ldr	r3, [r7, #12]
80002d8c:	681b      	ldr	r3, [r3, #0]
80002d8e:	4a31      	ldr	r2, [pc, #196]	; (80002e54 <HAL_TIM_PWM_Start_DMA+0x374>)
80002d90:	4293      	cmp	r3, r2
80002d92:	d004      	beq.n	80002d9e <HAL_TIM_PWM_Start_DMA+0x2be>
80002d94:	68fb      	ldr	r3, [r7, #12]
80002d96:	681b      	ldr	r3, [r3, #0]
80002d98:	4a2f      	ldr	r2, [pc, #188]	; (80002e58 <HAL_TIM_PWM_Start_DMA+0x378>)
80002d9a:	4293      	cmp	r3, r2
80002d9c:	d101      	bne.n	80002da2 <HAL_TIM_PWM_Start_DMA+0x2c2>
80002d9e:	2301      	movs	r3, #1
80002da0:	e000      	b.n	80002da4 <HAL_TIM_PWM_Start_DMA+0x2c4>
80002da2:	2300      	movs	r3, #0
80002da4:	2b00      	cmp	r3, #0
80002da6:	d007      	beq.n	80002db8 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
80002da8:	68fb      	ldr	r3, [r7, #12]
80002daa:	681b      	ldr	r3, [r3, #0]
80002dac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
80002dae:	68fb      	ldr	r3, [r7, #12]
80002db0:	681b      	ldr	r3, [r3, #0]
80002db2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
80002db6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
80002db8:	68fb      	ldr	r3, [r7, #12]
80002dba:	681b      	ldr	r3, [r3, #0]
80002dbc:	4a25      	ldr	r2, [pc, #148]	; (80002e54 <HAL_TIM_PWM_Start_DMA+0x374>)
80002dbe:	4293      	cmp	r3, r2
80002dc0:	d022      	beq.n	80002e08 <HAL_TIM_PWM_Start_DMA+0x328>
80002dc2:	68fb      	ldr	r3, [r7, #12]
80002dc4:	681b      	ldr	r3, [r3, #0]
80002dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
80002dca:	d01d      	beq.n	80002e08 <HAL_TIM_PWM_Start_DMA+0x328>
80002dcc:	68fb      	ldr	r3, [r7, #12]
80002dce:	681b      	ldr	r3, [r3, #0]
80002dd0:	4a22      	ldr	r2, [pc, #136]	; (80002e5c <HAL_TIM_PWM_Start_DMA+0x37c>)
80002dd2:	4293      	cmp	r3, r2
80002dd4:	d018      	beq.n	80002e08 <HAL_TIM_PWM_Start_DMA+0x328>
80002dd6:	68fb      	ldr	r3, [r7, #12]
80002dd8:	681b      	ldr	r3, [r3, #0]
80002dda:	4a21      	ldr	r2, [pc, #132]	; (80002e60 <HAL_TIM_PWM_Start_DMA+0x380>)
80002ddc:	4293      	cmp	r3, r2
80002dde:	d013      	beq.n	80002e08 <HAL_TIM_PWM_Start_DMA+0x328>
80002de0:	68fb      	ldr	r3, [r7, #12]
80002de2:	681b      	ldr	r3, [r3, #0]
80002de4:	4a1f      	ldr	r2, [pc, #124]	; (80002e64 <HAL_TIM_PWM_Start_DMA+0x384>)
80002de6:	4293      	cmp	r3, r2
80002de8:	d00e      	beq.n	80002e08 <HAL_TIM_PWM_Start_DMA+0x328>
80002dea:	68fb      	ldr	r3, [r7, #12]
80002dec:	681b      	ldr	r3, [r3, #0]
80002dee:	4a1a      	ldr	r2, [pc, #104]	; (80002e58 <HAL_TIM_PWM_Start_DMA+0x378>)
80002df0:	4293      	cmp	r3, r2
80002df2:	d009      	beq.n	80002e08 <HAL_TIM_PWM_Start_DMA+0x328>
80002df4:	68fb      	ldr	r3, [r7, #12]
80002df6:	681b      	ldr	r3, [r3, #0]
80002df8:	4a1b      	ldr	r2, [pc, #108]	; (80002e68 <HAL_TIM_PWM_Start_DMA+0x388>)
80002dfa:	4293      	cmp	r3, r2
80002dfc:	d004      	beq.n	80002e08 <HAL_TIM_PWM_Start_DMA+0x328>
80002dfe:	68fb      	ldr	r3, [r7, #12]
80002e00:	681b      	ldr	r3, [r3, #0]
80002e02:	4a1a      	ldr	r2, [pc, #104]	; (80002e6c <HAL_TIM_PWM_Start_DMA+0x38c>)
80002e04:	4293      	cmp	r3, r2
80002e06:	d111      	bne.n	80002e2c <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
80002e08:	68fb      	ldr	r3, [r7, #12]
80002e0a:	681b      	ldr	r3, [r3, #0]
80002e0c:	689b      	ldr	r3, [r3, #8]
80002e0e:	f003 0307 	and.w	r3, r3, #7
80002e12:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
80002e14:	693b      	ldr	r3, [r7, #16]
80002e16:	2b06      	cmp	r3, #6
80002e18:	d010      	beq.n	80002e3c <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
80002e1a:	68fb      	ldr	r3, [r7, #12]
80002e1c:	681b      	ldr	r3, [r3, #0]
80002e1e:	681a      	ldr	r2, [r3, #0]
80002e20:	68fb      	ldr	r3, [r7, #12]
80002e22:	681b      	ldr	r3, [r3, #0]
80002e24:	f042 0201 	orr.w	r2, r2, #1
80002e28:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
80002e2a:	e007      	b.n	80002e3c <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
80002e2c:	68fb      	ldr	r3, [r7, #12]
80002e2e:	681b      	ldr	r3, [r3, #0]
80002e30:	681a      	ldr	r2, [r3, #0]
80002e32:	68fb      	ldr	r3, [r7, #12]
80002e34:	681b      	ldr	r3, [r3, #0]
80002e36:	f042 0201 	orr.w	r2, r2, #1
80002e3a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
80002e3c:	7dfb      	ldrb	r3, [r7, #23]
}
80002e3e:	4618      	mov	r0, r3
80002e40:	3718      	adds	r7, #24
80002e42:	46bd      	mov	sp, r7
80002e44:	bd80      	pop	{r7, pc}
80002e46:	bf00      	nop
80002e48:	80003af3 	.word	0x80003af3
80002e4c:	80003b9b 	.word	0x80003b9b
80002e50:	80003a61 	.word	0x80003a61
80002e54:	40010000 	.word	0x40010000
80002e58:	40010400 	.word	0x40010400
80002e5c:	40000400 	.word	0x40000400
80002e60:	40000800 	.word	0x40000800
80002e64:	40000c00 	.word	0x40000c00
80002e68:	40014000 	.word	0x40014000
80002e6c:	40001800 	.word	0x40001800

80002e70 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
80002e70:	b580      	push	{r7, lr}
80002e72:	b084      	sub	sp, #16
80002e74:	af00      	add	r7, sp, #0
80002e76:	6078      	str	r0, [r7, #4]
80002e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
80002e7a:	2300      	movs	r3, #0
80002e7c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
80002e7e:	683b      	ldr	r3, [r7, #0]
80002e80:	2b0c      	cmp	r3, #12
80002e82:	d855      	bhi.n	80002f30 <HAL_TIM_PWM_Stop_DMA+0xc0>
80002e84:	a201      	add	r2, pc, #4	; (adr r2, 80002e8c <HAL_TIM_PWM_Stop_DMA+0x1c>)
80002e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
80002e8a:	bf00      	nop
80002e8c:	80002ec1 	.word	0x80002ec1
80002e90:	80002f31 	.word	0x80002f31
80002e94:	80002f31 	.word	0x80002f31
80002e98:	80002f31 	.word	0x80002f31
80002e9c:	80002edd 	.word	0x80002edd
80002ea0:	80002f31 	.word	0x80002f31
80002ea4:	80002f31 	.word	0x80002f31
80002ea8:	80002f31 	.word	0x80002f31
80002eac:	80002ef9 	.word	0x80002ef9
80002eb0:	80002f31 	.word	0x80002f31
80002eb4:	80002f31 	.word	0x80002f31
80002eb8:	80002f31 	.word	0x80002f31
80002ebc:	80002f15 	.word	0x80002f15
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
80002ec0:	687b      	ldr	r3, [r7, #4]
80002ec2:	681b      	ldr	r3, [r3, #0]
80002ec4:	68da      	ldr	r2, [r3, #12]
80002ec6:	687b      	ldr	r3, [r7, #4]
80002ec8:	681b      	ldr	r3, [r3, #0]
80002eca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
80002ece:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
80002ed0:	687b      	ldr	r3, [r7, #4]
80002ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
80002ed4:	4618      	mov	r0, r3
80002ed6:	f7fe fb39 	bl	8000154c <HAL_DMA_Abort_IT>
      break;
80002eda:	e02c      	b.n	80002f36 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
80002edc:	687b      	ldr	r3, [r7, #4]
80002ede:	681b      	ldr	r3, [r3, #0]
80002ee0:	68da      	ldr	r2, [r3, #12]
80002ee2:	687b      	ldr	r3, [r7, #4]
80002ee4:	681b      	ldr	r3, [r3, #0]
80002ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
80002eea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
80002eec:	687b      	ldr	r3, [r7, #4]
80002eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
80002ef0:	4618      	mov	r0, r3
80002ef2:	f7fe fb2b 	bl	8000154c <HAL_DMA_Abort_IT>
      break;
80002ef6:	e01e      	b.n	80002f36 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
80002ef8:	687b      	ldr	r3, [r7, #4]
80002efa:	681b      	ldr	r3, [r3, #0]
80002efc:	68da      	ldr	r2, [r3, #12]
80002efe:	687b      	ldr	r3, [r7, #4]
80002f00:	681b      	ldr	r3, [r3, #0]
80002f02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
80002f06:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
80002f08:	687b      	ldr	r3, [r7, #4]
80002f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
80002f0c:	4618      	mov	r0, r3
80002f0e:	f7fe fb1d 	bl	8000154c <HAL_DMA_Abort_IT>
      break;
80002f12:	e010      	b.n	80002f36 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
80002f14:	687b      	ldr	r3, [r7, #4]
80002f16:	681b      	ldr	r3, [r3, #0]
80002f18:	68da      	ldr	r2, [r3, #12]
80002f1a:	687b      	ldr	r3, [r7, #4]
80002f1c:	681b      	ldr	r3, [r3, #0]
80002f1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
80002f22:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
80002f24:	687b      	ldr	r3, [r7, #4]
80002f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
80002f28:	4618      	mov	r0, r3
80002f2a:	f7fe fb0f 	bl	8000154c <HAL_DMA_Abort_IT>
      break;
80002f2e:	e002      	b.n	80002f36 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
80002f30:	2301      	movs	r3, #1
80002f32:	73fb      	strb	r3, [r7, #15]
      break;
80002f34:	bf00      	nop
  }

  if (status == HAL_OK)
80002f36:	7bfb      	ldrb	r3, [r7, #15]
80002f38:	2b00      	cmp	r3, #0
80002f3a:	d161      	bne.n	80003000 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
80002f3c:	687b      	ldr	r3, [r7, #4]
80002f3e:	681b      	ldr	r3, [r3, #0]
80002f40:	2200      	movs	r2, #0
80002f42:	6839      	ldr	r1, [r7, #0]
80002f44:	4618      	mov	r0, r3
80002f46:	f001 fa71 	bl	8000442c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
80002f4a:	687b      	ldr	r3, [r7, #4]
80002f4c:	681b      	ldr	r3, [r3, #0]
80002f4e:	4a2f      	ldr	r2, [pc, #188]	; (8000300c <HAL_TIM_PWM_Stop_DMA+0x19c>)
80002f50:	4293      	cmp	r3, r2
80002f52:	d004      	beq.n	80002f5e <HAL_TIM_PWM_Stop_DMA+0xee>
80002f54:	687b      	ldr	r3, [r7, #4]
80002f56:	681b      	ldr	r3, [r3, #0]
80002f58:	4a2d      	ldr	r2, [pc, #180]	; (80003010 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
80002f5a:	4293      	cmp	r3, r2
80002f5c:	d101      	bne.n	80002f62 <HAL_TIM_PWM_Stop_DMA+0xf2>
80002f5e:	2301      	movs	r3, #1
80002f60:	e000      	b.n	80002f64 <HAL_TIM_PWM_Stop_DMA+0xf4>
80002f62:	2300      	movs	r3, #0
80002f64:	2b00      	cmp	r3, #0
80002f66:	d017      	beq.n	80002f98 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
80002f68:	687b      	ldr	r3, [r7, #4]
80002f6a:	681b      	ldr	r3, [r3, #0]
80002f6c:	6a1a      	ldr	r2, [r3, #32]
80002f6e:	f241 1311 	movw	r3, #4369	; 0x1111
80002f72:	4013      	ands	r3, r2
80002f74:	2b00      	cmp	r3, #0
80002f76:	d10f      	bne.n	80002f98 <HAL_TIM_PWM_Stop_DMA+0x128>
80002f78:	687b      	ldr	r3, [r7, #4]
80002f7a:	681b      	ldr	r3, [r3, #0]
80002f7c:	6a1a      	ldr	r2, [r3, #32]
80002f7e:	f240 4344 	movw	r3, #1092	; 0x444
80002f82:	4013      	ands	r3, r2
80002f84:	2b00      	cmp	r3, #0
80002f86:	d107      	bne.n	80002f98 <HAL_TIM_PWM_Stop_DMA+0x128>
80002f88:	687b      	ldr	r3, [r7, #4]
80002f8a:	681b      	ldr	r3, [r3, #0]
80002f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
80002f8e:	687b      	ldr	r3, [r7, #4]
80002f90:	681b      	ldr	r3, [r3, #0]
80002f92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
80002f96:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
80002f98:	687b      	ldr	r3, [r7, #4]
80002f9a:	681b      	ldr	r3, [r3, #0]
80002f9c:	6a1a      	ldr	r2, [r3, #32]
80002f9e:	f241 1311 	movw	r3, #4369	; 0x1111
80002fa2:	4013      	ands	r3, r2
80002fa4:	2b00      	cmp	r3, #0
80002fa6:	d10f      	bne.n	80002fc8 <HAL_TIM_PWM_Stop_DMA+0x158>
80002fa8:	687b      	ldr	r3, [r7, #4]
80002faa:	681b      	ldr	r3, [r3, #0]
80002fac:	6a1a      	ldr	r2, [r3, #32]
80002fae:	f240 4344 	movw	r3, #1092	; 0x444
80002fb2:	4013      	ands	r3, r2
80002fb4:	2b00      	cmp	r3, #0
80002fb6:	d107      	bne.n	80002fc8 <HAL_TIM_PWM_Stop_DMA+0x158>
80002fb8:	687b      	ldr	r3, [r7, #4]
80002fba:	681b      	ldr	r3, [r3, #0]
80002fbc:	681a      	ldr	r2, [r3, #0]
80002fbe:	687b      	ldr	r3, [r7, #4]
80002fc0:	681b      	ldr	r3, [r3, #0]
80002fc2:	f022 0201 	bic.w	r2, r2, #1
80002fc6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
80002fc8:	683b      	ldr	r3, [r7, #0]
80002fca:	2b00      	cmp	r3, #0
80002fcc:	d104      	bne.n	80002fd8 <HAL_TIM_PWM_Stop_DMA+0x168>
80002fce:	687b      	ldr	r3, [r7, #4]
80002fd0:	2201      	movs	r2, #1
80002fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
80002fd6:	e013      	b.n	80003000 <HAL_TIM_PWM_Stop_DMA+0x190>
80002fd8:	683b      	ldr	r3, [r7, #0]
80002fda:	2b04      	cmp	r3, #4
80002fdc:	d104      	bne.n	80002fe8 <HAL_TIM_PWM_Stop_DMA+0x178>
80002fde:	687b      	ldr	r3, [r7, #4]
80002fe0:	2201      	movs	r2, #1
80002fe2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
80002fe6:	e00b      	b.n	80003000 <HAL_TIM_PWM_Stop_DMA+0x190>
80002fe8:	683b      	ldr	r3, [r7, #0]
80002fea:	2b08      	cmp	r3, #8
80002fec:	d104      	bne.n	80002ff8 <HAL_TIM_PWM_Stop_DMA+0x188>
80002fee:	687b      	ldr	r3, [r7, #4]
80002ff0:	2201      	movs	r2, #1
80002ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
80002ff6:	e003      	b.n	80003000 <HAL_TIM_PWM_Stop_DMA+0x190>
80002ff8:	687b      	ldr	r3, [r7, #4]
80002ffa:	2201      	movs	r2, #1
80002ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
80003000:	7bfb      	ldrb	r3, [r7, #15]
}
80003002:	4618      	mov	r0, r3
80003004:	3710      	adds	r7, #16
80003006:	46bd      	mov	sp, r7
80003008:	bd80      	pop	{r7, pc}
8000300a:	bf00      	nop
8000300c:	40010000 	.word	0x40010000
80003010:	40010400 	.word	0x40010400

80003014 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
80003014:	b580      	push	{r7, lr}
80003016:	b082      	sub	sp, #8
80003018:	af00      	add	r7, sp, #0
8000301a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
8000301c:	687b      	ldr	r3, [r7, #4]
8000301e:	2b00      	cmp	r3, #0
80003020:	d101      	bne.n	80003026 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
80003022:	2301      	movs	r3, #1
80003024:	e041      	b.n	800030aa <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
80003026:	687b      	ldr	r3, [r7, #4]
80003028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
8000302c:	b2db      	uxtb	r3, r3
8000302e:	2b00      	cmp	r3, #0
80003030:	d106      	bne.n	80003040 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
80003032:	687b      	ldr	r3, [r7, #4]
80003034:	2200      	movs	r2, #0
80003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
8000303a:	6878      	ldr	r0, [r7, #4]
8000303c:	f000 f839 	bl	800030b2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
80003040:	687b      	ldr	r3, [r7, #4]
80003042:	2202      	movs	r2, #2
80003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
80003048:	687b      	ldr	r3, [r7, #4]
8000304a:	681a      	ldr	r2, [r3, #0]
8000304c:	687b      	ldr	r3, [r7, #4]
8000304e:	3304      	adds	r3, #4
80003050:	4619      	mov	r1, r3
80003052:	4610      	mov	r0, r2
80003054:	f000 fdd6 	bl	80003c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
80003058:	687b      	ldr	r3, [r7, #4]
8000305a:	2201      	movs	r2, #1
8000305c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
80003060:	687b      	ldr	r3, [r7, #4]
80003062:	2201      	movs	r2, #1
80003064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
80003068:	687b      	ldr	r3, [r7, #4]
8000306a:	2201      	movs	r2, #1
8000306c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
80003070:	687b      	ldr	r3, [r7, #4]
80003072:	2201      	movs	r2, #1
80003074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
80003078:	687b      	ldr	r3, [r7, #4]
8000307a:	2201      	movs	r2, #1
8000307c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
80003080:	687b      	ldr	r3, [r7, #4]
80003082:	2201      	movs	r2, #1
80003084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
80003088:	687b      	ldr	r3, [r7, #4]
8000308a:	2201      	movs	r2, #1
8000308c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
80003090:	687b      	ldr	r3, [r7, #4]
80003092:	2201      	movs	r2, #1
80003094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
80003098:	687b      	ldr	r3, [r7, #4]
8000309a:	2201      	movs	r2, #1
8000309c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
800030a0:	687b      	ldr	r3, [r7, #4]
800030a2:	2201      	movs	r2, #1
800030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
800030a8:	2300      	movs	r3, #0
}
800030aa:	4618      	mov	r0, r3
800030ac:	3708      	adds	r7, #8
800030ae:	46bd      	mov	sp, r7
800030b0:	bd80      	pop	{r7, pc}

800030b2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
800030b2:	b480      	push	{r7}
800030b4:	b083      	sub	sp, #12
800030b6:	af00      	add	r7, sp, #0
800030b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
800030ba:	bf00      	nop
800030bc:	370c      	adds	r7, #12
800030be:	46bd      	mov	sp, r7
800030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
800030c4:	4770      	bx	lr
	...

800030c8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
800030c8:	b580      	push	{r7, lr}
800030ca:	b084      	sub	sp, #16
800030cc:	af00      	add	r7, sp, #0
800030ce:	6078      	str	r0, [r7, #4]
800030d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
800030d2:	2300      	movs	r3, #0
800030d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
800030d6:	683b      	ldr	r3, [r7, #0]
800030d8:	2b00      	cmp	r3, #0
800030da:	d104      	bne.n	800030e6 <HAL_TIM_IC_Start_IT+0x1e>
800030dc:	687b      	ldr	r3, [r7, #4]
800030de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
800030e2:	b2db      	uxtb	r3, r3
800030e4:	e013      	b.n	8000310e <HAL_TIM_IC_Start_IT+0x46>
800030e6:	683b      	ldr	r3, [r7, #0]
800030e8:	2b04      	cmp	r3, #4
800030ea:	d104      	bne.n	800030f6 <HAL_TIM_IC_Start_IT+0x2e>
800030ec:	687b      	ldr	r3, [r7, #4]
800030ee:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
800030f2:	b2db      	uxtb	r3, r3
800030f4:	e00b      	b.n	8000310e <HAL_TIM_IC_Start_IT+0x46>
800030f6:	683b      	ldr	r3, [r7, #0]
800030f8:	2b08      	cmp	r3, #8
800030fa:	d104      	bne.n	80003106 <HAL_TIM_IC_Start_IT+0x3e>
800030fc:	687b      	ldr	r3, [r7, #4]
800030fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
80003102:	b2db      	uxtb	r3, r3
80003104:	e003      	b.n	8000310e <HAL_TIM_IC_Start_IT+0x46>
80003106:	687b      	ldr	r3, [r7, #4]
80003108:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
8000310c:	b2db      	uxtb	r3, r3
8000310e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
80003110:	683b      	ldr	r3, [r7, #0]
80003112:	2b00      	cmp	r3, #0
80003114:	d104      	bne.n	80003120 <HAL_TIM_IC_Start_IT+0x58>
80003116:	687b      	ldr	r3, [r7, #4]
80003118:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
8000311c:	b2db      	uxtb	r3, r3
8000311e:	e013      	b.n	80003148 <HAL_TIM_IC_Start_IT+0x80>
80003120:	683b      	ldr	r3, [r7, #0]
80003122:	2b04      	cmp	r3, #4
80003124:	d104      	bne.n	80003130 <HAL_TIM_IC_Start_IT+0x68>
80003126:	687b      	ldr	r3, [r7, #4]
80003128:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
8000312c:	b2db      	uxtb	r3, r3
8000312e:	e00b      	b.n	80003148 <HAL_TIM_IC_Start_IT+0x80>
80003130:	683b      	ldr	r3, [r7, #0]
80003132:	2b08      	cmp	r3, #8
80003134:	d104      	bne.n	80003140 <HAL_TIM_IC_Start_IT+0x78>
80003136:	687b      	ldr	r3, [r7, #4]
80003138:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
8000313c:	b2db      	uxtb	r3, r3
8000313e:	e003      	b.n	80003148 <HAL_TIM_IC_Start_IT+0x80>
80003140:	687b      	ldr	r3, [r7, #4]
80003142:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
80003146:	b2db      	uxtb	r3, r3
80003148:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
8000314a:	7bbb      	ldrb	r3, [r7, #14]
8000314c:	2b01      	cmp	r3, #1
8000314e:	d102      	bne.n	80003156 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
80003150:	7b7b      	ldrb	r3, [r7, #13]
80003152:	2b01      	cmp	r3, #1
80003154:	d001      	beq.n	8000315a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
80003156:	2301      	movs	r3, #1
80003158:	e0cc      	b.n	800032f4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
8000315a:	683b      	ldr	r3, [r7, #0]
8000315c:	2b00      	cmp	r3, #0
8000315e:	d104      	bne.n	8000316a <HAL_TIM_IC_Start_IT+0xa2>
80003160:	687b      	ldr	r3, [r7, #4]
80003162:	2202      	movs	r2, #2
80003164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
80003168:	e013      	b.n	80003192 <HAL_TIM_IC_Start_IT+0xca>
8000316a:	683b      	ldr	r3, [r7, #0]
8000316c:	2b04      	cmp	r3, #4
8000316e:	d104      	bne.n	8000317a <HAL_TIM_IC_Start_IT+0xb2>
80003170:	687b      	ldr	r3, [r7, #4]
80003172:	2202      	movs	r2, #2
80003174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
80003178:	e00b      	b.n	80003192 <HAL_TIM_IC_Start_IT+0xca>
8000317a:	683b      	ldr	r3, [r7, #0]
8000317c:	2b08      	cmp	r3, #8
8000317e:	d104      	bne.n	8000318a <HAL_TIM_IC_Start_IT+0xc2>
80003180:	687b      	ldr	r3, [r7, #4]
80003182:	2202      	movs	r2, #2
80003184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
80003188:	e003      	b.n	80003192 <HAL_TIM_IC_Start_IT+0xca>
8000318a:	687b      	ldr	r3, [r7, #4]
8000318c:	2202      	movs	r2, #2
8000318e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
80003192:	683b      	ldr	r3, [r7, #0]
80003194:	2b00      	cmp	r3, #0
80003196:	d104      	bne.n	800031a2 <HAL_TIM_IC_Start_IT+0xda>
80003198:	687b      	ldr	r3, [r7, #4]
8000319a:	2202      	movs	r2, #2
8000319c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
800031a0:	e013      	b.n	800031ca <HAL_TIM_IC_Start_IT+0x102>
800031a2:	683b      	ldr	r3, [r7, #0]
800031a4:	2b04      	cmp	r3, #4
800031a6:	d104      	bne.n	800031b2 <HAL_TIM_IC_Start_IT+0xea>
800031a8:	687b      	ldr	r3, [r7, #4]
800031aa:	2202      	movs	r2, #2
800031ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
800031b0:	e00b      	b.n	800031ca <HAL_TIM_IC_Start_IT+0x102>
800031b2:	683b      	ldr	r3, [r7, #0]
800031b4:	2b08      	cmp	r3, #8
800031b6:	d104      	bne.n	800031c2 <HAL_TIM_IC_Start_IT+0xfa>
800031b8:	687b      	ldr	r3, [r7, #4]
800031ba:	2202      	movs	r2, #2
800031bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
800031c0:	e003      	b.n	800031ca <HAL_TIM_IC_Start_IT+0x102>
800031c2:	687b      	ldr	r3, [r7, #4]
800031c4:	2202      	movs	r2, #2
800031c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
800031ca:	683b      	ldr	r3, [r7, #0]
800031cc:	2b0c      	cmp	r3, #12
800031ce:	d841      	bhi.n	80003254 <HAL_TIM_IC_Start_IT+0x18c>
800031d0:	a201      	add	r2, pc, #4	; (adr r2, 800031d8 <HAL_TIM_IC_Start_IT+0x110>)
800031d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
800031d6:	bf00      	nop
800031d8:	8000320d 	.word	0x8000320d
800031dc:	80003255 	.word	0x80003255
800031e0:	80003255 	.word	0x80003255
800031e4:	80003255 	.word	0x80003255
800031e8:	8000321f 	.word	0x8000321f
800031ec:	80003255 	.word	0x80003255
800031f0:	80003255 	.word	0x80003255
800031f4:	80003255 	.word	0x80003255
800031f8:	80003231 	.word	0x80003231
800031fc:	80003255 	.word	0x80003255
80003200:	80003255 	.word	0x80003255
80003204:	80003255 	.word	0x80003255
80003208:	80003243 	.word	0x80003243
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
8000320c:	687b      	ldr	r3, [r7, #4]
8000320e:	681b      	ldr	r3, [r3, #0]
80003210:	68da      	ldr	r2, [r3, #12]
80003212:	687b      	ldr	r3, [r7, #4]
80003214:	681b      	ldr	r3, [r3, #0]
80003216:	f042 0202 	orr.w	r2, r2, #2
8000321a:	60da      	str	r2, [r3, #12]
      break;
8000321c:	e01d      	b.n	8000325a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
8000321e:	687b      	ldr	r3, [r7, #4]
80003220:	681b      	ldr	r3, [r3, #0]
80003222:	68da      	ldr	r2, [r3, #12]
80003224:	687b      	ldr	r3, [r7, #4]
80003226:	681b      	ldr	r3, [r3, #0]
80003228:	f042 0204 	orr.w	r2, r2, #4
8000322c:	60da      	str	r2, [r3, #12]
      break;
8000322e:	e014      	b.n	8000325a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
80003230:	687b      	ldr	r3, [r7, #4]
80003232:	681b      	ldr	r3, [r3, #0]
80003234:	68da      	ldr	r2, [r3, #12]
80003236:	687b      	ldr	r3, [r7, #4]
80003238:	681b      	ldr	r3, [r3, #0]
8000323a:	f042 0208 	orr.w	r2, r2, #8
8000323e:	60da      	str	r2, [r3, #12]
      break;
80003240:	e00b      	b.n	8000325a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
80003242:	687b      	ldr	r3, [r7, #4]
80003244:	681b      	ldr	r3, [r3, #0]
80003246:	68da      	ldr	r2, [r3, #12]
80003248:	687b      	ldr	r3, [r7, #4]
8000324a:	681b      	ldr	r3, [r3, #0]
8000324c:	f042 0210 	orr.w	r2, r2, #16
80003250:	60da      	str	r2, [r3, #12]
      break;
80003252:	e002      	b.n	8000325a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
80003254:	2301      	movs	r3, #1
80003256:	73fb      	strb	r3, [r7, #15]
      break;
80003258:	bf00      	nop
  }

  if (status == HAL_OK)
8000325a:	7bfb      	ldrb	r3, [r7, #15]
8000325c:	2b00      	cmp	r3, #0
8000325e:	d148      	bne.n	800032f2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
80003260:	687b      	ldr	r3, [r7, #4]
80003262:	681b      	ldr	r3, [r3, #0]
80003264:	2201      	movs	r2, #1
80003266:	6839      	ldr	r1, [r7, #0]
80003268:	4618      	mov	r0, r3
8000326a:	f001 f8df 	bl	8000442c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
8000326e:	687b      	ldr	r3, [r7, #4]
80003270:	681b      	ldr	r3, [r3, #0]
80003272:	4a22      	ldr	r2, [pc, #136]	; (800032fc <HAL_TIM_IC_Start_IT+0x234>)
80003274:	4293      	cmp	r3, r2
80003276:	d022      	beq.n	800032be <HAL_TIM_IC_Start_IT+0x1f6>
80003278:	687b      	ldr	r3, [r7, #4]
8000327a:	681b      	ldr	r3, [r3, #0]
8000327c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
80003280:	d01d      	beq.n	800032be <HAL_TIM_IC_Start_IT+0x1f6>
80003282:	687b      	ldr	r3, [r7, #4]
80003284:	681b      	ldr	r3, [r3, #0]
80003286:	4a1e      	ldr	r2, [pc, #120]	; (80003300 <HAL_TIM_IC_Start_IT+0x238>)
80003288:	4293      	cmp	r3, r2
8000328a:	d018      	beq.n	800032be <HAL_TIM_IC_Start_IT+0x1f6>
8000328c:	687b      	ldr	r3, [r7, #4]
8000328e:	681b      	ldr	r3, [r3, #0]
80003290:	4a1c      	ldr	r2, [pc, #112]	; (80003304 <HAL_TIM_IC_Start_IT+0x23c>)
80003292:	4293      	cmp	r3, r2
80003294:	d013      	beq.n	800032be <HAL_TIM_IC_Start_IT+0x1f6>
80003296:	687b      	ldr	r3, [r7, #4]
80003298:	681b      	ldr	r3, [r3, #0]
8000329a:	4a1b      	ldr	r2, [pc, #108]	; (80003308 <HAL_TIM_IC_Start_IT+0x240>)
8000329c:	4293      	cmp	r3, r2
8000329e:	d00e      	beq.n	800032be <HAL_TIM_IC_Start_IT+0x1f6>
800032a0:	687b      	ldr	r3, [r7, #4]
800032a2:	681b      	ldr	r3, [r3, #0]
800032a4:	4a19      	ldr	r2, [pc, #100]	; (8000330c <HAL_TIM_IC_Start_IT+0x244>)
800032a6:	4293      	cmp	r3, r2
800032a8:	d009      	beq.n	800032be <HAL_TIM_IC_Start_IT+0x1f6>
800032aa:	687b      	ldr	r3, [r7, #4]
800032ac:	681b      	ldr	r3, [r3, #0]
800032ae:	4a18      	ldr	r2, [pc, #96]	; (80003310 <HAL_TIM_IC_Start_IT+0x248>)
800032b0:	4293      	cmp	r3, r2
800032b2:	d004      	beq.n	800032be <HAL_TIM_IC_Start_IT+0x1f6>
800032b4:	687b      	ldr	r3, [r7, #4]
800032b6:	681b      	ldr	r3, [r3, #0]
800032b8:	4a16      	ldr	r2, [pc, #88]	; (80003314 <HAL_TIM_IC_Start_IT+0x24c>)
800032ba:	4293      	cmp	r3, r2
800032bc:	d111      	bne.n	800032e2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
800032be:	687b      	ldr	r3, [r7, #4]
800032c0:	681b      	ldr	r3, [r3, #0]
800032c2:	689b      	ldr	r3, [r3, #8]
800032c4:	f003 0307 	and.w	r3, r3, #7
800032c8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
800032ca:	68bb      	ldr	r3, [r7, #8]
800032cc:	2b06      	cmp	r3, #6
800032ce:	d010      	beq.n	800032f2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
800032d0:	687b      	ldr	r3, [r7, #4]
800032d2:	681b      	ldr	r3, [r3, #0]
800032d4:	681a      	ldr	r2, [r3, #0]
800032d6:	687b      	ldr	r3, [r7, #4]
800032d8:	681b      	ldr	r3, [r3, #0]
800032da:	f042 0201 	orr.w	r2, r2, #1
800032de:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
800032e0:	e007      	b.n	800032f2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
800032e2:	687b      	ldr	r3, [r7, #4]
800032e4:	681b      	ldr	r3, [r3, #0]
800032e6:	681a      	ldr	r2, [r3, #0]
800032e8:	687b      	ldr	r3, [r7, #4]
800032ea:	681b      	ldr	r3, [r3, #0]
800032ec:	f042 0201 	orr.w	r2, r2, #1
800032f0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
800032f2:	7bfb      	ldrb	r3, [r7, #15]
}
800032f4:	4618      	mov	r0, r3
800032f6:	3710      	adds	r7, #16
800032f8:	46bd      	mov	sp, r7
800032fa:	bd80      	pop	{r7, pc}
800032fc:	40010000 	.word	0x40010000
80003300:	40000400 	.word	0x40000400
80003304:	40000800 	.word	0x40000800
80003308:	40000c00 	.word	0x40000c00
8000330c:	40010400 	.word	0x40010400
80003310:	40014000 	.word	0x40014000
80003314:	40001800 	.word	0x40001800

80003318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
80003318:	b580      	push	{r7, lr}
8000331a:	b082      	sub	sp, #8
8000331c:	af00      	add	r7, sp, #0
8000331e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
80003320:	687b      	ldr	r3, [r7, #4]
80003322:	681b      	ldr	r3, [r3, #0]
80003324:	691b      	ldr	r3, [r3, #16]
80003326:	f003 0302 	and.w	r3, r3, #2
8000332a:	2b02      	cmp	r3, #2
8000332c:	d122      	bne.n	80003374 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
8000332e:	687b      	ldr	r3, [r7, #4]
80003330:	681b      	ldr	r3, [r3, #0]
80003332:	68db      	ldr	r3, [r3, #12]
80003334:	f003 0302 	and.w	r3, r3, #2
80003338:	2b02      	cmp	r3, #2
8000333a:	d11b      	bne.n	80003374 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
8000333c:	687b      	ldr	r3, [r7, #4]
8000333e:	681b      	ldr	r3, [r3, #0]
80003340:	f06f 0202 	mvn.w	r2, #2
80003344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
80003346:	687b      	ldr	r3, [r7, #4]
80003348:	2201      	movs	r2, #1
8000334a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
8000334c:	687b      	ldr	r3, [r7, #4]
8000334e:	681b      	ldr	r3, [r3, #0]
80003350:	699b      	ldr	r3, [r3, #24]
80003352:	f003 0303 	and.w	r3, r3, #3
80003356:	2b00      	cmp	r3, #0
80003358:	d003      	beq.n	80003362 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
8000335a:	6878      	ldr	r0, [r7, #4]
8000335c:	f7fd f97c 	bl	80000658 <HAL_TIM_IC_CaptureCallback>
80003360:	e005      	b.n	8000336e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
80003362:	6878      	ldr	r0, [r7, #4]
80003364:	f000 fb54 	bl	80003a10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
80003368:	6878      	ldr	r0, [r7, #4]
8000336a:	f7fd f961 	bl	80000630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
8000336e:	687b      	ldr	r3, [r7, #4]
80003370:	2200      	movs	r2, #0
80003372:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
80003374:	687b      	ldr	r3, [r7, #4]
80003376:	681b      	ldr	r3, [r3, #0]
80003378:	691b      	ldr	r3, [r3, #16]
8000337a:	f003 0304 	and.w	r3, r3, #4
8000337e:	2b04      	cmp	r3, #4
80003380:	d122      	bne.n	800033c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
80003382:	687b      	ldr	r3, [r7, #4]
80003384:	681b      	ldr	r3, [r3, #0]
80003386:	68db      	ldr	r3, [r3, #12]
80003388:	f003 0304 	and.w	r3, r3, #4
8000338c:	2b04      	cmp	r3, #4
8000338e:	d11b      	bne.n	800033c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
80003390:	687b      	ldr	r3, [r7, #4]
80003392:	681b      	ldr	r3, [r3, #0]
80003394:	f06f 0204 	mvn.w	r2, #4
80003398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
8000339a:	687b      	ldr	r3, [r7, #4]
8000339c:	2202      	movs	r2, #2
8000339e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
800033a0:	687b      	ldr	r3, [r7, #4]
800033a2:	681b      	ldr	r3, [r3, #0]
800033a4:	699b      	ldr	r3, [r3, #24]
800033a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
800033aa:	2b00      	cmp	r3, #0
800033ac:	d003      	beq.n	800033b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
800033ae:	6878      	ldr	r0, [r7, #4]
800033b0:	f7fd f952 	bl	80000658 <HAL_TIM_IC_CaptureCallback>
800033b4:	e005      	b.n	800033c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
800033b6:	6878      	ldr	r0, [r7, #4]
800033b8:	f000 fb2a 	bl	80003a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
800033bc:	6878      	ldr	r0, [r7, #4]
800033be:	f7fd f937 	bl	80000630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
800033c2:	687b      	ldr	r3, [r7, #4]
800033c4:	2200      	movs	r2, #0
800033c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
800033c8:	687b      	ldr	r3, [r7, #4]
800033ca:	681b      	ldr	r3, [r3, #0]
800033cc:	691b      	ldr	r3, [r3, #16]
800033ce:	f003 0308 	and.w	r3, r3, #8
800033d2:	2b08      	cmp	r3, #8
800033d4:	d122      	bne.n	8000341c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
800033d6:	687b      	ldr	r3, [r7, #4]
800033d8:	681b      	ldr	r3, [r3, #0]
800033da:	68db      	ldr	r3, [r3, #12]
800033dc:	f003 0308 	and.w	r3, r3, #8
800033e0:	2b08      	cmp	r3, #8
800033e2:	d11b      	bne.n	8000341c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
800033e4:	687b      	ldr	r3, [r7, #4]
800033e6:	681b      	ldr	r3, [r3, #0]
800033e8:	f06f 0208 	mvn.w	r2, #8
800033ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
800033ee:	687b      	ldr	r3, [r7, #4]
800033f0:	2204      	movs	r2, #4
800033f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
800033f4:	687b      	ldr	r3, [r7, #4]
800033f6:	681b      	ldr	r3, [r3, #0]
800033f8:	69db      	ldr	r3, [r3, #28]
800033fa:	f003 0303 	and.w	r3, r3, #3
800033fe:	2b00      	cmp	r3, #0
80003400:	d003      	beq.n	8000340a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
80003402:	6878      	ldr	r0, [r7, #4]
80003404:	f7fd f928 	bl	80000658 <HAL_TIM_IC_CaptureCallback>
80003408:	e005      	b.n	80003416 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
8000340a:	6878      	ldr	r0, [r7, #4]
8000340c:	f000 fb00 	bl	80003a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
80003410:	6878      	ldr	r0, [r7, #4]
80003412:	f7fd f90d 	bl	80000630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
80003416:	687b      	ldr	r3, [r7, #4]
80003418:	2200      	movs	r2, #0
8000341a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
8000341c:	687b      	ldr	r3, [r7, #4]
8000341e:	681b      	ldr	r3, [r3, #0]
80003420:	691b      	ldr	r3, [r3, #16]
80003422:	f003 0310 	and.w	r3, r3, #16
80003426:	2b10      	cmp	r3, #16
80003428:	d122      	bne.n	80003470 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
8000342a:	687b      	ldr	r3, [r7, #4]
8000342c:	681b      	ldr	r3, [r3, #0]
8000342e:	68db      	ldr	r3, [r3, #12]
80003430:	f003 0310 	and.w	r3, r3, #16
80003434:	2b10      	cmp	r3, #16
80003436:	d11b      	bne.n	80003470 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
80003438:	687b      	ldr	r3, [r7, #4]
8000343a:	681b      	ldr	r3, [r3, #0]
8000343c:	f06f 0210 	mvn.w	r2, #16
80003440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
80003442:	687b      	ldr	r3, [r7, #4]
80003444:	2208      	movs	r2, #8
80003446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
80003448:	687b      	ldr	r3, [r7, #4]
8000344a:	681b      	ldr	r3, [r3, #0]
8000344c:	69db      	ldr	r3, [r3, #28]
8000344e:	f403 7340 	and.w	r3, r3, #768	; 0x300
80003452:	2b00      	cmp	r3, #0
80003454:	d003      	beq.n	8000345e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
80003456:	6878      	ldr	r0, [r7, #4]
80003458:	f7fd f8fe 	bl	80000658 <HAL_TIM_IC_CaptureCallback>
8000345c:	e005      	b.n	8000346a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
8000345e:	6878      	ldr	r0, [r7, #4]
80003460:	f000 fad6 	bl	80003a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
80003464:	6878      	ldr	r0, [r7, #4]
80003466:	f7fd f8e3 	bl	80000630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
8000346a:	687b      	ldr	r3, [r7, #4]
8000346c:	2200      	movs	r2, #0
8000346e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
80003470:	687b      	ldr	r3, [r7, #4]
80003472:	681b      	ldr	r3, [r3, #0]
80003474:	691b      	ldr	r3, [r3, #16]
80003476:	f003 0301 	and.w	r3, r3, #1
8000347a:	2b01      	cmp	r3, #1
8000347c:	d10e      	bne.n	8000349c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
8000347e:	687b      	ldr	r3, [r7, #4]
80003480:	681b      	ldr	r3, [r3, #0]
80003482:	68db      	ldr	r3, [r3, #12]
80003484:	f003 0301 	and.w	r3, r3, #1
80003488:	2b01      	cmp	r3, #1
8000348a:	d107      	bne.n	8000349c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
8000348c:	687b      	ldr	r3, [r7, #4]
8000348e:	681b      	ldr	r3, [r3, #0]
80003490:	f06f 0201 	mvn.w	r2, #1
80003494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
80003496:	6878      	ldr	r0, [r7, #4]
80003498:	f000 fab0 	bl	800039fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
8000349c:	687b      	ldr	r3, [r7, #4]
8000349e:	681b      	ldr	r3, [r3, #0]
800034a0:	691b      	ldr	r3, [r3, #16]
800034a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
800034a6:	2b80      	cmp	r3, #128	; 0x80
800034a8:	d10e      	bne.n	800034c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
800034aa:	687b      	ldr	r3, [r7, #4]
800034ac:	681b      	ldr	r3, [r3, #0]
800034ae:	68db      	ldr	r3, [r3, #12]
800034b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
800034b4:	2b80      	cmp	r3, #128	; 0x80
800034b6:	d107      	bne.n	800034c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
800034b8:	687b      	ldr	r3, [r7, #4]
800034ba:	681b      	ldr	r3, [r3, #0]
800034bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
800034c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
800034c2:	6878      	ldr	r0, [r7, #4]
800034c4:	f001 f8b0 	bl	80004628 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
800034c8:	687b      	ldr	r3, [r7, #4]
800034ca:	681b      	ldr	r3, [r3, #0]
800034cc:	691b      	ldr	r3, [r3, #16]
800034ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
800034d2:	2b40      	cmp	r3, #64	; 0x40
800034d4:	d10e      	bne.n	800034f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
800034d6:	687b      	ldr	r3, [r7, #4]
800034d8:	681b      	ldr	r3, [r3, #0]
800034da:	68db      	ldr	r3, [r3, #12]
800034dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
800034e0:	2b40      	cmp	r3, #64	; 0x40
800034e2:	d107      	bne.n	800034f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
800034e4:	687b      	ldr	r3, [r7, #4]
800034e6:	681b      	ldr	r3, [r3, #0]
800034e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
800034ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
800034ee:	6878      	ldr	r0, [r7, #4]
800034f0:	f000 faa2 	bl	80003a38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
800034f4:	687b      	ldr	r3, [r7, #4]
800034f6:	681b      	ldr	r3, [r3, #0]
800034f8:	691b      	ldr	r3, [r3, #16]
800034fa:	f003 0320 	and.w	r3, r3, #32
800034fe:	2b20      	cmp	r3, #32
80003500:	d10e      	bne.n	80003520 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
80003502:	687b      	ldr	r3, [r7, #4]
80003504:	681b      	ldr	r3, [r3, #0]
80003506:	68db      	ldr	r3, [r3, #12]
80003508:	f003 0320 	and.w	r3, r3, #32
8000350c:	2b20      	cmp	r3, #32
8000350e:	d107      	bne.n	80003520 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
80003510:	687b      	ldr	r3, [r7, #4]
80003512:	681b      	ldr	r3, [r3, #0]
80003514:	f06f 0220 	mvn.w	r2, #32
80003518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
8000351a:	6878      	ldr	r0, [r7, #4]
8000351c:	f001 f87a 	bl	80004614 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
80003520:	bf00      	nop
80003522:	3708      	adds	r7, #8
80003524:	46bd      	mov	sp, r7
80003526:	bd80      	pop	{r7, pc}

80003528 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
80003528:	b580      	push	{r7, lr}
8000352a:	b086      	sub	sp, #24
8000352c:	af00      	add	r7, sp, #0
8000352e:	60f8      	str	r0, [r7, #12]
80003530:	60b9      	str	r1, [r7, #8]
80003532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
80003534:	2300      	movs	r3, #0
80003536:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
80003538:	68fb      	ldr	r3, [r7, #12]
8000353a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
8000353e:	2b01      	cmp	r3, #1
80003540:	d101      	bne.n	80003546 <HAL_TIM_IC_ConfigChannel+0x1e>
80003542:	2302      	movs	r3, #2
80003544:	e088      	b.n	80003658 <HAL_TIM_IC_ConfigChannel+0x130>
80003546:	68fb      	ldr	r3, [r7, #12]
80003548:	2201      	movs	r2, #1
8000354a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
8000354e:	687b      	ldr	r3, [r7, #4]
80003550:	2b00      	cmp	r3, #0
80003552:	d11b      	bne.n	8000358c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
80003554:	68fb      	ldr	r3, [r7, #12]
80003556:	6818      	ldr	r0, [r3, #0]
80003558:	68bb      	ldr	r3, [r7, #8]
8000355a:	6819      	ldr	r1, [r3, #0]
8000355c:	68bb      	ldr	r3, [r7, #8]
8000355e:	685a      	ldr	r2, [r3, #4]
80003560:	68bb      	ldr	r3, [r7, #8]
80003562:	68db      	ldr	r3, [r3, #12]
80003564:	f000 fd9e 	bl	800040a4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
80003568:	68fb      	ldr	r3, [r7, #12]
8000356a:	681b      	ldr	r3, [r3, #0]
8000356c:	699a      	ldr	r2, [r3, #24]
8000356e:	68fb      	ldr	r3, [r7, #12]
80003570:	681b      	ldr	r3, [r3, #0]
80003572:	f022 020c 	bic.w	r2, r2, #12
80003576:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
80003578:	68fb      	ldr	r3, [r7, #12]
8000357a:	681b      	ldr	r3, [r3, #0]
8000357c:	6999      	ldr	r1, [r3, #24]
8000357e:	68bb      	ldr	r3, [r7, #8]
80003580:	689a      	ldr	r2, [r3, #8]
80003582:	68fb      	ldr	r3, [r7, #12]
80003584:	681b      	ldr	r3, [r3, #0]
80003586:	430a      	orrs	r2, r1
80003588:	619a      	str	r2, [r3, #24]
8000358a:	e060      	b.n	8000364e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
8000358c:	687b      	ldr	r3, [r7, #4]
8000358e:	2b04      	cmp	r3, #4
80003590:	d11c      	bne.n	800035cc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
80003592:	68fb      	ldr	r3, [r7, #12]
80003594:	6818      	ldr	r0, [r3, #0]
80003596:	68bb      	ldr	r3, [r7, #8]
80003598:	6819      	ldr	r1, [r3, #0]
8000359a:	68bb      	ldr	r3, [r7, #8]
8000359c:	685a      	ldr	r2, [r3, #4]
8000359e:	68bb      	ldr	r3, [r7, #8]
800035a0:	68db      	ldr	r3, [r3, #12]
800035a2:	f000 fe22 	bl	800041ea <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
800035a6:	68fb      	ldr	r3, [r7, #12]
800035a8:	681b      	ldr	r3, [r3, #0]
800035aa:	699a      	ldr	r2, [r3, #24]
800035ac:	68fb      	ldr	r3, [r7, #12]
800035ae:	681b      	ldr	r3, [r3, #0]
800035b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
800035b4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
800035b6:	68fb      	ldr	r3, [r7, #12]
800035b8:	681b      	ldr	r3, [r3, #0]
800035ba:	6999      	ldr	r1, [r3, #24]
800035bc:	68bb      	ldr	r3, [r7, #8]
800035be:	689b      	ldr	r3, [r3, #8]
800035c0:	021a      	lsls	r2, r3, #8
800035c2:	68fb      	ldr	r3, [r7, #12]
800035c4:	681b      	ldr	r3, [r3, #0]
800035c6:	430a      	orrs	r2, r1
800035c8:	619a      	str	r2, [r3, #24]
800035ca:	e040      	b.n	8000364e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
800035cc:	687b      	ldr	r3, [r7, #4]
800035ce:	2b08      	cmp	r3, #8
800035d0:	d11b      	bne.n	8000360a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
800035d2:	68fb      	ldr	r3, [r7, #12]
800035d4:	6818      	ldr	r0, [r3, #0]
800035d6:	68bb      	ldr	r3, [r7, #8]
800035d8:	6819      	ldr	r1, [r3, #0]
800035da:	68bb      	ldr	r3, [r7, #8]
800035dc:	685a      	ldr	r2, [r3, #4]
800035de:	68bb      	ldr	r3, [r7, #8]
800035e0:	68db      	ldr	r3, [r3, #12]
800035e2:	f000 fe6f 	bl	800042c4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
800035e6:	68fb      	ldr	r3, [r7, #12]
800035e8:	681b      	ldr	r3, [r3, #0]
800035ea:	69da      	ldr	r2, [r3, #28]
800035ec:	68fb      	ldr	r3, [r7, #12]
800035ee:	681b      	ldr	r3, [r3, #0]
800035f0:	f022 020c 	bic.w	r2, r2, #12
800035f4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
800035f6:	68fb      	ldr	r3, [r7, #12]
800035f8:	681b      	ldr	r3, [r3, #0]
800035fa:	69d9      	ldr	r1, [r3, #28]
800035fc:	68bb      	ldr	r3, [r7, #8]
800035fe:	689a      	ldr	r2, [r3, #8]
80003600:	68fb      	ldr	r3, [r7, #12]
80003602:	681b      	ldr	r3, [r3, #0]
80003604:	430a      	orrs	r2, r1
80003606:	61da      	str	r2, [r3, #28]
80003608:	e021      	b.n	8000364e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
8000360a:	687b      	ldr	r3, [r7, #4]
8000360c:	2b0c      	cmp	r3, #12
8000360e:	d11c      	bne.n	8000364a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
80003610:	68fb      	ldr	r3, [r7, #12]
80003612:	6818      	ldr	r0, [r3, #0]
80003614:	68bb      	ldr	r3, [r7, #8]
80003616:	6819      	ldr	r1, [r3, #0]
80003618:	68bb      	ldr	r3, [r7, #8]
8000361a:	685a      	ldr	r2, [r3, #4]
8000361c:	68bb      	ldr	r3, [r7, #8]
8000361e:	68db      	ldr	r3, [r3, #12]
80003620:	f000 fe8c 	bl	8000433c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
80003624:	68fb      	ldr	r3, [r7, #12]
80003626:	681b      	ldr	r3, [r3, #0]
80003628:	69da      	ldr	r2, [r3, #28]
8000362a:	68fb      	ldr	r3, [r7, #12]
8000362c:	681b      	ldr	r3, [r3, #0]
8000362e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
80003632:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
80003634:	68fb      	ldr	r3, [r7, #12]
80003636:	681b      	ldr	r3, [r3, #0]
80003638:	69d9      	ldr	r1, [r3, #28]
8000363a:	68bb      	ldr	r3, [r7, #8]
8000363c:	689b      	ldr	r3, [r3, #8]
8000363e:	021a      	lsls	r2, r3, #8
80003640:	68fb      	ldr	r3, [r7, #12]
80003642:	681b      	ldr	r3, [r3, #0]
80003644:	430a      	orrs	r2, r1
80003646:	61da      	str	r2, [r3, #28]
80003648:	e001      	b.n	8000364e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
8000364a:	2301      	movs	r3, #1
8000364c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
8000364e:	68fb      	ldr	r3, [r7, #12]
80003650:	2200      	movs	r2, #0
80003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
80003656:	7dfb      	ldrb	r3, [r7, #23]
}
80003658:	4618      	mov	r0, r3
8000365a:	3718      	adds	r7, #24
8000365c:	46bd      	mov	sp, r7
8000365e:	bd80      	pop	{r7, pc}

80003660 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
80003660:	b580      	push	{r7, lr}
80003662:	b086      	sub	sp, #24
80003664:	af00      	add	r7, sp, #0
80003666:	60f8      	str	r0, [r7, #12]
80003668:	60b9      	str	r1, [r7, #8]
8000366a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
8000366c:	2300      	movs	r3, #0
8000366e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
80003670:	68fb      	ldr	r3, [r7, #12]
80003672:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
80003676:	2b01      	cmp	r3, #1
80003678:	d101      	bne.n	8000367e <HAL_TIM_PWM_ConfigChannel+0x1e>
8000367a:	2302      	movs	r3, #2
8000367c:	e0ae      	b.n	800037dc <HAL_TIM_PWM_ConfigChannel+0x17c>
8000367e:	68fb      	ldr	r3, [r7, #12]
80003680:	2201      	movs	r2, #1
80003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
80003686:	687b      	ldr	r3, [r7, #4]
80003688:	2b0c      	cmp	r3, #12
8000368a:	f200 809f 	bhi.w	800037cc <HAL_TIM_PWM_ConfigChannel+0x16c>
8000368e:	a201      	add	r2, pc, #4	; (adr r2, 80003694 <HAL_TIM_PWM_ConfigChannel+0x34>)
80003690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
80003694:	800036c9 	.word	0x800036c9
80003698:	800037cd 	.word	0x800037cd
8000369c:	800037cd 	.word	0x800037cd
800036a0:	800037cd 	.word	0x800037cd
800036a4:	80003709 	.word	0x80003709
800036a8:	800037cd 	.word	0x800037cd
800036ac:	800037cd 	.word	0x800037cd
800036b0:	800037cd 	.word	0x800037cd
800036b4:	8000374b 	.word	0x8000374b
800036b8:	800037cd 	.word	0x800037cd
800036bc:	800037cd 	.word	0x800037cd
800036c0:	800037cd 	.word	0x800037cd
800036c4:	8000378b 	.word	0x8000378b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
800036c8:	68fb      	ldr	r3, [r7, #12]
800036ca:	681b      	ldr	r3, [r3, #0]
800036cc:	68b9      	ldr	r1, [r7, #8]
800036ce:	4618      	mov	r0, r3
800036d0:	f000 fb38 	bl	80003d44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
800036d4:	68fb      	ldr	r3, [r7, #12]
800036d6:	681b      	ldr	r3, [r3, #0]
800036d8:	699a      	ldr	r2, [r3, #24]
800036da:	68fb      	ldr	r3, [r7, #12]
800036dc:	681b      	ldr	r3, [r3, #0]
800036de:	f042 0208 	orr.w	r2, r2, #8
800036e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
800036e4:	68fb      	ldr	r3, [r7, #12]
800036e6:	681b      	ldr	r3, [r3, #0]
800036e8:	699a      	ldr	r2, [r3, #24]
800036ea:	68fb      	ldr	r3, [r7, #12]
800036ec:	681b      	ldr	r3, [r3, #0]
800036ee:	f022 0204 	bic.w	r2, r2, #4
800036f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
800036f4:	68fb      	ldr	r3, [r7, #12]
800036f6:	681b      	ldr	r3, [r3, #0]
800036f8:	6999      	ldr	r1, [r3, #24]
800036fa:	68bb      	ldr	r3, [r7, #8]
800036fc:	691a      	ldr	r2, [r3, #16]
800036fe:	68fb      	ldr	r3, [r7, #12]
80003700:	681b      	ldr	r3, [r3, #0]
80003702:	430a      	orrs	r2, r1
80003704:	619a      	str	r2, [r3, #24]
      break;
80003706:	e064      	b.n	800037d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
80003708:	68fb      	ldr	r3, [r7, #12]
8000370a:	681b      	ldr	r3, [r3, #0]
8000370c:	68b9      	ldr	r1, [r7, #8]
8000370e:	4618      	mov	r0, r3
80003710:	f000 fb88 	bl	80003e24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
80003714:	68fb      	ldr	r3, [r7, #12]
80003716:	681b      	ldr	r3, [r3, #0]
80003718:	699a      	ldr	r2, [r3, #24]
8000371a:	68fb      	ldr	r3, [r7, #12]
8000371c:	681b      	ldr	r3, [r3, #0]
8000371e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
80003722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
80003724:	68fb      	ldr	r3, [r7, #12]
80003726:	681b      	ldr	r3, [r3, #0]
80003728:	699a      	ldr	r2, [r3, #24]
8000372a:	68fb      	ldr	r3, [r7, #12]
8000372c:	681b      	ldr	r3, [r3, #0]
8000372e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
80003732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
80003734:	68fb      	ldr	r3, [r7, #12]
80003736:	681b      	ldr	r3, [r3, #0]
80003738:	6999      	ldr	r1, [r3, #24]
8000373a:	68bb      	ldr	r3, [r7, #8]
8000373c:	691b      	ldr	r3, [r3, #16]
8000373e:	021a      	lsls	r2, r3, #8
80003740:	68fb      	ldr	r3, [r7, #12]
80003742:	681b      	ldr	r3, [r3, #0]
80003744:	430a      	orrs	r2, r1
80003746:	619a      	str	r2, [r3, #24]
      break;
80003748:	e043      	b.n	800037d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
8000374a:	68fb      	ldr	r3, [r7, #12]
8000374c:	681b      	ldr	r3, [r3, #0]
8000374e:	68b9      	ldr	r1, [r7, #8]
80003750:	4618      	mov	r0, r3
80003752:	f000 fbdd 	bl	80003f10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
80003756:	68fb      	ldr	r3, [r7, #12]
80003758:	681b      	ldr	r3, [r3, #0]
8000375a:	69da      	ldr	r2, [r3, #28]
8000375c:	68fb      	ldr	r3, [r7, #12]
8000375e:	681b      	ldr	r3, [r3, #0]
80003760:	f042 0208 	orr.w	r2, r2, #8
80003764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
80003766:	68fb      	ldr	r3, [r7, #12]
80003768:	681b      	ldr	r3, [r3, #0]
8000376a:	69da      	ldr	r2, [r3, #28]
8000376c:	68fb      	ldr	r3, [r7, #12]
8000376e:	681b      	ldr	r3, [r3, #0]
80003770:	f022 0204 	bic.w	r2, r2, #4
80003774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
80003776:	68fb      	ldr	r3, [r7, #12]
80003778:	681b      	ldr	r3, [r3, #0]
8000377a:	69d9      	ldr	r1, [r3, #28]
8000377c:	68bb      	ldr	r3, [r7, #8]
8000377e:	691a      	ldr	r2, [r3, #16]
80003780:	68fb      	ldr	r3, [r7, #12]
80003782:	681b      	ldr	r3, [r3, #0]
80003784:	430a      	orrs	r2, r1
80003786:	61da      	str	r2, [r3, #28]
      break;
80003788:	e023      	b.n	800037d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
8000378a:	68fb      	ldr	r3, [r7, #12]
8000378c:	681b      	ldr	r3, [r3, #0]
8000378e:	68b9      	ldr	r1, [r7, #8]
80003790:	4618      	mov	r0, r3
80003792:	f000 fc31 	bl	80003ff8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
80003796:	68fb      	ldr	r3, [r7, #12]
80003798:	681b      	ldr	r3, [r3, #0]
8000379a:	69da      	ldr	r2, [r3, #28]
8000379c:	68fb      	ldr	r3, [r7, #12]
8000379e:	681b      	ldr	r3, [r3, #0]
800037a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
800037a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
800037a6:	68fb      	ldr	r3, [r7, #12]
800037a8:	681b      	ldr	r3, [r3, #0]
800037aa:	69da      	ldr	r2, [r3, #28]
800037ac:	68fb      	ldr	r3, [r7, #12]
800037ae:	681b      	ldr	r3, [r3, #0]
800037b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
800037b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
800037b6:	68fb      	ldr	r3, [r7, #12]
800037b8:	681b      	ldr	r3, [r3, #0]
800037ba:	69d9      	ldr	r1, [r3, #28]
800037bc:	68bb      	ldr	r3, [r7, #8]
800037be:	691b      	ldr	r3, [r3, #16]
800037c0:	021a      	lsls	r2, r3, #8
800037c2:	68fb      	ldr	r3, [r7, #12]
800037c4:	681b      	ldr	r3, [r3, #0]
800037c6:	430a      	orrs	r2, r1
800037c8:	61da      	str	r2, [r3, #28]
      break;
800037ca:	e002      	b.n	800037d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
800037cc:	2301      	movs	r3, #1
800037ce:	75fb      	strb	r3, [r7, #23]
      break;
800037d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
800037d2:	68fb      	ldr	r3, [r7, #12]
800037d4:	2200      	movs	r2, #0
800037d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
800037da:	7dfb      	ldrb	r3, [r7, #23]
}
800037dc:	4618      	mov	r0, r3
800037de:	3718      	adds	r7, #24
800037e0:	46bd      	mov	sp, r7
800037e2:	bd80      	pop	{r7, pc}

800037e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
800037e4:	b580      	push	{r7, lr}
800037e6:	b084      	sub	sp, #16
800037e8:	af00      	add	r7, sp, #0
800037ea:	6078      	str	r0, [r7, #4]
800037ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
800037ee:	2300      	movs	r3, #0
800037f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
800037f2:	687b      	ldr	r3, [r7, #4]
800037f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
800037f8:	2b01      	cmp	r3, #1
800037fa:	d101      	bne.n	80003800 <HAL_TIM_ConfigClockSource+0x1c>
800037fc:	2302      	movs	r3, #2
800037fe:	e0b4      	b.n	8000396a <HAL_TIM_ConfigClockSource+0x186>
80003800:	687b      	ldr	r3, [r7, #4]
80003802:	2201      	movs	r2, #1
80003804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
80003808:	687b      	ldr	r3, [r7, #4]
8000380a:	2202      	movs	r2, #2
8000380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
80003810:	687b      	ldr	r3, [r7, #4]
80003812:	681b      	ldr	r3, [r3, #0]
80003814:	689b      	ldr	r3, [r3, #8]
80003816:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
80003818:	68bb      	ldr	r3, [r7, #8]
8000381a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
8000381e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
80003820:	68bb      	ldr	r3, [r7, #8]
80003822:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
80003826:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
80003828:	687b      	ldr	r3, [r7, #4]
8000382a:	681b      	ldr	r3, [r3, #0]
8000382c:	68ba      	ldr	r2, [r7, #8]
8000382e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
80003830:	683b      	ldr	r3, [r7, #0]
80003832:	681b      	ldr	r3, [r3, #0]
80003834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
80003838:	d03e      	beq.n	800038b8 <HAL_TIM_ConfigClockSource+0xd4>
8000383a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
8000383e:	f200 8087 	bhi.w	80003950 <HAL_TIM_ConfigClockSource+0x16c>
80003842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
80003846:	f000 8086 	beq.w	80003956 <HAL_TIM_ConfigClockSource+0x172>
8000384a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
8000384e:	d87f      	bhi.n	80003950 <HAL_TIM_ConfigClockSource+0x16c>
80003850:	2b70      	cmp	r3, #112	; 0x70
80003852:	d01a      	beq.n	8000388a <HAL_TIM_ConfigClockSource+0xa6>
80003854:	2b70      	cmp	r3, #112	; 0x70
80003856:	d87b      	bhi.n	80003950 <HAL_TIM_ConfigClockSource+0x16c>
80003858:	2b60      	cmp	r3, #96	; 0x60
8000385a:	d050      	beq.n	800038fe <HAL_TIM_ConfigClockSource+0x11a>
8000385c:	2b60      	cmp	r3, #96	; 0x60
8000385e:	d877      	bhi.n	80003950 <HAL_TIM_ConfigClockSource+0x16c>
80003860:	2b50      	cmp	r3, #80	; 0x50
80003862:	d03c      	beq.n	800038de <HAL_TIM_ConfigClockSource+0xfa>
80003864:	2b50      	cmp	r3, #80	; 0x50
80003866:	d873      	bhi.n	80003950 <HAL_TIM_ConfigClockSource+0x16c>
80003868:	2b40      	cmp	r3, #64	; 0x40
8000386a:	d058      	beq.n	8000391e <HAL_TIM_ConfigClockSource+0x13a>
8000386c:	2b40      	cmp	r3, #64	; 0x40
8000386e:	d86f      	bhi.n	80003950 <HAL_TIM_ConfigClockSource+0x16c>
80003870:	2b30      	cmp	r3, #48	; 0x30
80003872:	d064      	beq.n	8000393e <HAL_TIM_ConfigClockSource+0x15a>
80003874:	2b30      	cmp	r3, #48	; 0x30
80003876:	d86b      	bhi.n	80003950 <HAL_TIM_ConfigClockSource+0x16c>
80003878:	2b20      	cmp	r3, #32
8000387a:	d060      	beq.n	8000393e <HAL_TIM_ConfigClockSource+0x15a>
8000387c:	2b20      	cmp	r3, #32
8000387e:	d867      	bhi.n	80003950 <HAL_TIM_ConfigClockSource+0x16c>
80003880:	2b00      	cmp	r3, #0
80003882:	d05c      	beq.n	8000393e <HAL_TIM_ConfigClockSource+0x15a>
80003884:	2b10      	cmp	r3, #16
80003886:	d05a      	beq.n	8000393e <HAL_TIM_ConfigClockSource+0x15a>
80003888:	e062      	b.n	80003950 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
8000388a:	687b      	ldr	r3, [r7, #4]
8000388c:	6818      	ldr	r0, [r3, #0]
8000388e:	683b      	ldr	r3, [r7, #0]
80003890:	6899      	ldr	r1, [r3, #8]
80003892:	683b      	ldr	r3, [r7, #0]
80003894:	685a      	ldr	r2, [r3, #4]
80003896:	683b      	ldr	r3, [r7, #0]
80003898:	68db      	ldr	r3, [r3, #12]
8000389a:	f000 fda7 	bl	800043ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
8000389e:	687b      	ldr	r3, [r7, #4]
800038a0:	681b      	ldr	r3, [r3, #0]
800038a2:	689b      	ldr	r3, [r3, #8]
800038a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
800038a6:	68bb      	ldr	r3, [r7, #8]
800038a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
800038ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
800038ae:	687b      	ldr	r3, [r7, #4]
800038b0:	681b      	ldr	r3, [r3, #0]
800038b2:	68ba      	ldr	r2, [r7, #8]
800038b4:	609a      	str	r2, [r3, #8]
      break;
800038b6:	e04f      	b.n	80003958 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
800038b8:	687b      	ldr	r3, [r7, #4]
800038ba:	6818      	ldr	r0, [r3, #0]
800038bc:	683b      	ldr	r3, [r7, #0]
800038be:	6899      	ldr	r1, [r3, #8]
800038c0:	683b      	ldr	r3, [r7, #0]
800038c2:	685a      	ldr	r2, [r3, #4]
800038c4:	683b      	ldr	r3, [r7, #0]
800038c6:	68db      	ldr	r3, [r3, #12]
800038c8:	f000 fd90 	bl	800043ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
800038cc:	687b      	ldr	r3, [r7, #4]
800038ce:	681b      	ldr	r3, [r3, #0]
800038d0:	689a      	ldr	r2, [r3, #8]
800038d2:	687b      	ldr	r3, [r7, #4]
800038d4:	681b      	ldr	r3, [r3, #0]
800038d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
800038da:	609a      	str	r2, [r3, #8]
      break;
800038dc:	e03c      	b.n	80003958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
800038de:	687b      	ldr	r3, [r7, #4]
800038e0:	6818      	ldr	r0, [r3, #0]
800038e2:	683b      	ldr	r3, [r7, #0]
800038e4:	6859      	ldr	r1, [r3, #4]
800038e6:	683b      	ldr	r3, [r7, #0]
800038e8:	68db      	ldr	r3, [r3, #12]
800038ea:	461a      	mov	r2, r3
800038ec:	f000 fc4e 	bl	8000418c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
800038f0:	687b      	ldr	r3, [r7, #4]
800038f2:	681b      	ldr	r3, [r3, #0]
800038f4:	2150      	movs	r1, #80	; 0x50
800038f6:	4618      	mov	r0, r3
800038f8:	f000 fd5d 	bl	800043b6 <TIM_ITRx_SetConfig>
      break;
800038fc:	e02c      	b.n	80003958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
800038fe:	687b      	ldr	r3, [r7, #4]
80003900:	6818      	ldr	r0, [r3, #0]
80003902:	683b      	ldr	r3, [r7, #0]
80003904:	6859      	ldr	r1, [r3, #4]
80003906:	683b      	ldr	r3, [r7, #0]
80003908:	68db      	ldr	r3, [r3, #12]
8000390a:	461a      	mov	r2, r3
8000390c:	f000 fcaa 	bl	80004264 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
80003910:	687b      	ldr	r3, [r7, #4]
80003912:	681b      	ldr	r3, [r3, #0]
80003914:	2160      	movs	r1, #96	; 0x60
80003916:	4618      	mov	r0, r3
80003918:	f000 fd4d 	bl	800043b6 <TIM_ITRx_SetConfig>
      break;
8000391c:	e01c      	b.n	80003958 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
8000391e:	687b      	ldr	r3, [r7, #4]
80003920:	6818      	ldr	r0, [r3, #0]
80003922:	683b      	ldr	r3, [r7, #0]
80003924:	6859      	ldr	r1, [r3, #4]
80003926:	683b      	ldr	r3, [r7, #0]
80003928:	68db      	ldr	r3, [r3, #12]
8000392a:	461a      	mov	r2, r3
8000392c:	f000 fc2e 	bl	8000418c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
80003930:	687b      	ldr	r3, [r7, #4]
80003932:	681b      	ldr	r3, [r3, #0]
80003934:	2140      	movs	r1, #64	; 0x40
80003936:	4618      	mov	r0, r3
80003938:	f000 fd3d 	bl	800043b6 <TIM_ITRx_SetConfig>
      break;
8000393c:	e00c      	b.n	80003958 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
8000393e:	687b      	ldr	r3, [r7, #4]
80003940:	681a      	ldr	r2, [r3, #0]
80003942:	683b      	ldr	r3, [r7, #0]
80003944:	681b      	ldr	r3, [r3, #0]
80003946:	4619      	mov	r1, r3
80003948:	4610      	mov	r0, r2
8000394a:	f000 fd34 	bl	800043b6 <TIM_ITRx_SetConfig>
      break;
8000394e:	e003      	b.n	80003958 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
80003950:	2301      	movs	r3, #1
80003952:	73fb      	strb	r3, [r7, #15]
      break;
80003954:	e000      	b.n	80003958 <HAL_TIM_ConfigClockSource+0x174>
      break;
80003956:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
80003958:	687b      	ldr	r3, [r7, #4]
8000395a:	2201      	movs	r2, #1
8000395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
80003960:	687b      	ldr	r3, [r7, #4]
80003962:	2200      	movs	r2, #0
80003964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
80003968:	7bfb      	ldrb	r3, [r7, #15]
}
8000396a:	4618      	mov	r0, r3
8000396c:	3710      	adds	r7, #16
8000396e:	46bd      	mov	sp, r7
80003970:	bd80      	pop	{r7, pc}
	...

80003974 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
80003974:	b480      	push	{r7}
80003976:	b085      	sub	sp, #20
80003978:	af00      	add	r7, sp, #0
8000397a:	6078      	str	r0, [r7, #4]
8000397c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
8000397e:	2300      	movs	r3, #0
80003980:	60fb      	str	r3, [r7, #12]

  switch (Channel)
80003982:	683b      	ldr	r3, [r7, #0]
80003984:	2b0c      	cmp	r3, #12
80003986:	d831      	bhi.n	800039ec <HAL_TIM_ReadCapturedValue+0x78>
80003988:	a201      	add	r2, pc, #4	; (adr r2, 80003990 <HAL_TIM_ReadCapturedValue+0x1c>)
8000398a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
8000398e:	bf00      	nop
80003990:	800039c5 	.word	0x800039c5
80003994:	800039ed 	.word	0x800039ed
80003998:	800039ed 	.word	0x800039ed
8000399c:	800039ed 	.word	0x800039ed
800039a0:	800039cf 	.word	0x800039cf
800039a4:	800039ed 	.word	0x800039ed
800039a8:	800039ed 	.word	0x800039ed
800039ac:	800039ed 	.word	0x800039ed
800039b0:	800039d9 	.word	0x800039d9
800039b4:	800039ed 	.word	0x800039ed
800039b8:	800039ed 	.word	0x800039ed
800039bc:	800039ed 	.word	0x800039ed
800039c0:	800039e3 	.word	0x800039e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
800039c4:	687b      	ldr	r3, [r7, #4]
800039c6:	681b      	ldr	r3, [r3, #0]
800039c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
800039ca:	60fb      	str	r3, [r7, #12]

      break;
800039cc:	e00f      	b.n	800039ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
800039ce:	687b      	ldr	r3, [r7, #4]
800039d0:	681b      	ldr	r3, [r3, #0]
800039d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
800039d4:	60fb      	str	r3, [r7, #12]

      break;
800039d6:	e00a      	b.n	800039ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
800039d8:	687b      	ldr	r3, [r7, #4]
800039da:	681b      	ldr	r3, [r3, #0]
800039dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
800039de:	60fb      	str	r3, [r7, #12]

      break;
800039e0:	e005      	b.n	800039ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
800039e2:	687b      	ldr	r3, [r7, #4]
800039e4:	681b      	ldr	r3, [r3, #0]
800039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
800039e8:	60fb      	str	r3, [r7, #12]

      break;
800039ea:	e000      	b.n	800039ee <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
800039ec:	bf00      	nop
  }

  return tmpreg;
800039ee:	68fb      	ldr	r3, [r7, #12]
}
800039f0:	4618      	mov	r0, r3
800039f2:	3714      	adds	r7, #20
800039f4:	46bd      	mov	sp, r7
800039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
800039fa:	4770      	bx	lr

800039fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
800039fc:	b480      	push	{r7}
800039fe:	b083      	sub	sp, #12
80003a00:	af00      	add	r7, sp, #0
80003a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
80003a04:	bf00      	nop
80003a06:	370c      	adds	r7, #12
80003a08:	46bd      	mov	sp, r7
80003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
80003a0e:	4770      	bx	lr

80003a10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
80003a10:	b480      	push	{r7}
80003a12:	b083      	sub	sp, #12
80003a14:	af00      	add	r7, sp, #0
80003a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
80003a18:	bf00      	nop
80003a1a:	370c      	adds	r7, #12
80003a1c:	46bd      	mov	sp, r7
80003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
80003a22:	4770      	bx	lr

80003a24 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
80003a24:	b480      	push	{r7}
80003a26:	b083      	sub	sp, #12
80003a28:	af00      	add	r7, sp, #0
80003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
80003a2c:	bf00      	nop
80003a2e:	370c      	adds	r7, #12
80003a30:	46bd      	mov	sp, r7
80003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
80003a36:	4770      	bx	lr

80003a38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
80003a38:	b480      	push	{r7}
80003a3a:	b083      	sub	sp, #12
80003a3c:	af00      	add	r7, sp, #0
80003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
80003a40:	bf00      	nop
80003a42:	370c      	adds	r7, #12
80003a44:	46bd      	mov	sp, r7
80003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
80003a4a:	4770      	bx	lr

80003a4c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
80003a4c:	b480      	push	{r7}
80003a4e:	b083      	sub	sp, #12
80003a50:	af00      	add	r7, sp, #0
80003a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
80003a54:	bf00      	nop
80003a56:	370c      	adds	r7, #12
80003a58:	46bd      	mov	sp, r7
80003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
80003a5e:	4770      	bx	lr

80003a60 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
80003a60:	b580      	push	{r7, lr}
80003a62:	b084      	sub	sp, #16
80003a64:	af00      	add	r7, sp, #0
80003a66:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
80003a68:	687b      	ldr	r3, [r7, #4]
80003a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
80003a6c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
80003a6e:	68fb      	ldr	r3, [r7, #12]
80003a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
80003a72:	687a      	ldr	r2, [r7, #4]
80003a74:	429a      	cmp	r2, r3
80003a76:	d107      	bne.n	80003a88 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
80003a78:	68fb      	ldr	r3, [r7, #12]
80003a7a:	2201      	movs	r2, #1
80003a7c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
80003a7e:	68fb      	ldr	r3, [r7, #12]
80003a80:	2201      	movs	r2, #1
80003a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
80003a86:	e02a      	b.n	80003ade <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
80003a88:	68fb      	ldr	r3, [r7, #12]
80003a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
80003a8c:	687a      	ldr	r2, [r7, #4]
80003a8e:	429a      	cmp	r2, r3
80003a90:	d107      	bne.n	80003aa2 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
80003a92:	68fb      	ldr	r3, [r7, #12]
80003a94:	2202      	movs	r2, #2
80003a96:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
80003a98:	68fb      	ldr	r3, [r7, #12]
80003a9a:	2201      	movs	r2, #1
80003a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
80003aa0:	e01d      	b.n	80003ade <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
80003aa2:	68fb      	ldr	r3, [r7, #12]
80003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
80003aa6:	687a      	ldr	r2, [r7, #4]
80003aa8:	429a      	cmp	r2, r3
80003aaa:	d107      	bne.n	80003abc <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
80003aac:	68fb      	ldr	r3, [r7, #12]
80003aae:	2204      	movs	r2, #4
80003ab0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
80003ab2:	68fb      	ldr	r3, [r7, #12]
80003ab4:	2201      	movs	r2, #1
80003ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
80003aba:	e010      	b.n	80003ade <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
80003abc:	68fb      	ldr	r3, [r7, #12]
80003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
80003ac0:	687a      	ldr	r2, [r7, #4]
80003ac2:	429a      	cmp	r2, r3
80003ac4:	d107      	bne.n	80003ad6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
80003ac6:	68fb      	ldr	r3, [r7, #12]
80003ac8:	2208      	movs	r2, #8
80003aca:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
80003acc:	68fb      	ldr	r3, [r7, #12]
80003ace:	2201      	movs	r2, #1
80003ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
80003ad4:	e003      	b.n	80003ade <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
80003ad6:	68fb      	ldr	r3, [r7, #12]
80003ad8:	2201      	movs	r2, #1
80003ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
80003ade:	68f8      	ldr	r0, [r7, #12]
80003ae0:	f7ff ffb4 	bl	80003a4c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
80003ae4:	68fb      	ldr	r3, [r7, #12]
80003ae6:	2200      	movs	r2, #0
80003ae8:	771a      	strb	r2, [r3, #28]
}
80003aea:	bf00      	nop
80003aec:	3710      	adds	r7, #16
80003aee:	46bd      	mov	sp, r7
80003af0:	bd80      	pop	{r7, pc}

80003af2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
80003af2:	b580      	push	{r7, lr}
80003af4:	b084      	sub	sp, #16
80003af6:	af00      	add	r7, sp, #0
80003af8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
80003afa:	687b      	ldr	r3, [r7, #4]
80003afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
80003afe:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
80003b00:	68fb      	ldr	r3, [r7, #12]
80003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
80003b04:	687a      	ldr	r2, [r7, #4]
80003b06:	429a      	cmp	r2, r3
80003b08:	d10b      	bne.n	80003b22 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
80003b0a:	68fb      	ldr	r3, [r7, #12]
80003b0c:	2201      	movs	r2, #1
80003b0e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
80003b10:	687b      	ldr	r3, [r7, #4]
80003b12:	69db      	ldr	r3, [r3, #28]
80003b14:	2b00      	cmp	r3, #0
80003b16:	d136      	bne.n	80003b86 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
80003b18:	68fb      	ldr	r3, [r7, #12]
80003b1a:	2201      	movs	r2, #1
80003b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
80003b20:	e031      	b.n	80003b86 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
80003b22:	68fb      	ldr	r3, [r7, #12]
80003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
80003b26:	687a      	ldr	r2, [r7, #4]
80003b28:	429a      	cmp	r2, r3
80003b2a:	d10b      	bne.n	80003b44 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
80003b2c:	68fb      	ldr	r3, [r7, #12]
80003b2e:	2202      	movs	r2, #2
80003b30:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
80003b32:	687b      	ldr	r3, [r7, #4]
80003b34:	69db      	ldr	r3, [r3, #28]
80003b36:	2b00      	cmp	r3, #0
80003b38:	d125      	bne.n	80003b86 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
80003b3a:	68fb      	ldr	r3, [r7, #12]
80003b3c:	2201      	movs	r2, #1
80003b3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
80003b42:	e020      	b.n	80003b86 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
80003b44:	68fb      	ldr	r3, [r7, #12]
80003b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
80003b48:	687a      	ldr	r2, [r7, #4]
80003b4a:	429a      	cmp	r2, r3
80003b4c:	d10b      	bne.n	80003b66 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
80003b4e:	68fb      	ldr	r3, [r7, #12]
80003b50:	2204      	movs	r2, #4
80003b52:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
80003b54:	687b      	ldr	r3, [r7, #4]
80003b56:	69db      	ldr	r3, [r3, #28]
80003b58:	2b00      	cmp	r3, #0
80003b5a:	d114      	bne.n	80003b86 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
80003b5c:	68fb      	ldr	r3, [r7, #12]
80003b5e:	2201      	movs	r2, #1
80003b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
80003b64:	e00f      	b.n	80003b86 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
80003b66:	68fb      	ldr	r3, [r7, #12]
80003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
80003b6a:	687a      	ldr	r2, [r7, #4]
80003b6c:	429a      	cmp	r2, r3
80003b6e:	d10a      	bne.n	80003b86 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
80003b70:	68fb      	ldr	r3, [r7, #12]
80003b72:	2208      	movs	r2, #8
80003b74:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
80003b76:	687b      	ldr	r3, [r7, #4]
80003b78:	69db      	ldr	r3, [r3, #28]
80003b7a:	2b00      	cmp	r3, #0
80003b7c:	d103      	bne.n	80003b86 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
80003b7e:	68fb      	ldr	r3, [r7, #12]
80003b80:	2201      	movs	r2, #1
80003b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
80003b86:	68f8      	ldr	r0, [r7, #12]
80003b88:	f7fc fd52 	bl	80000630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
80003b8c:	68fb      	ldr	r3, [r7, #12]
80003b8e:	2200      	movs	r2, #0
80003b90:	771a      	strb	r2, [r3, #28]
}
80003b92:	bf00      	nop
80003b94:	3710      	adds	r7, #16
80003b96:	46bd      	mov	sp, r7
80003b98:	bd80      	pop	{r7, pc}

80003b9a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
80003b9a:	b580      	push	{r7, lr}
80003b9c:	b084      	sub	sp, #16
80003b9e:	af00      	add	r7, sp, #0
80003ba0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
80003ba2:	687b      	ldr	r3, [r7, #4]
80003ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
80003ba6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
80003ba8:	68fb      	ldr	r3, [r7, #12]
80003baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
80003bac:	687a      	ldr	r2, [r7, #4]
80003bae:	429a      	cmp	r2, r3
80003bb0:	d103      	bne.n	80003bba <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
80003bb2:	68fb      	ldr	r3, [r7, #12]
80003bb4:	2201      	movs	r2, #1
80003bb6:	771a      	strb	r2, [r3, #28]
80003bb8:	e019      	b.n	80003bee <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
80003bba:	68fb      	ldr	r3, [r7, #12]
80003bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
80003bbe:	687a      	ldr	r2, [r7, #4]
80003bc0:	429a      	cmp	r2, r3
80003bc2:	d103      	bne.n	80003bcc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
80003bc4:	68fb      	ldr	r3, [r7, #12]
80003bc6:	2202      	movs	r2, #2
80003bc8:	771a      	strb	r2, [r3, #28]
80003bca:	e010      	b.n	80003bee <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
80003bcc:	68fb      	ldr	r3, [r7, #12]
80003bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
80003bd0:	687a      	ldr	r2, [r7, #4]
80003bd2:	429a      	cmp	r2, r3
80003bd4:	d103      	bne.n	80003bde <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
80003bd6:	68fb      	ldr	r3, [r7, #12]
80003bd8:	2204      	movs	r2, #4
80003bda:	771a      	strb	r2, [r3, #28]
80003bdc:	e007      	b.n	80003bee <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
80003bde:	68fb      	ldr	r3, [r7, #12]
80003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
80003be2:	687a      	ldr	r2, [r7, #4]
80003be4:	429a      	cmp	r2, r3
80003be6:	d102      	bne.n	80003bee <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
80003be8:	68fb      	ldr	r3, [r7, #12]
80003bea:	2208      	movs	r2, #8
80003bec:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
80003bee:	68f8      	ldr	r0, [r7, #12]
80003bf0:	f7ff ff18 	bl	80003a24 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
80003bf4:	68fb      	ldr	r3, [r7, #12]
80003bf6:	2200      	movs	r2, #0
80003bf8:	771a      	strb	r2, [r3, #28]
}
80003bfa:	bf00      	nop
80003bfc:	3710      	adds	r7, #16
80003bfe:	46bd      	mov	sp, r7
80003c00:	bd80      	pop	{r7, pc}
	...

80003c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
80003c04:	b480      	push	{r7}
80003c06:	b085      	sub	sp, #20
80003c08:	af00      	add	r7, sp, #0
80003c0a:	6078      	str	r0, [r7, #4]
80003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
80003c0e:	687b      	ldr	r3, [r7, #4]
80003c10:	681b      	ldr	r3, [r3, #0]
80003c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
80003c14:	687b      	ldr	r3, [r7, #4]
80003c16:	4a40      	ldr	r2, [pc, #256]	; (80003d18 <TIM_Base_SetConfig+0x114>)
80003c18:	4293      	cmp	r3, r2
80003c1a:	d013      	beq.n	80003c44 <TIM_Base_SetConfig+0x40>
80003c1c:	687b      	ldr	r3, [r7, #4]
80003c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
80003c22:	d00f      	beq.n	80003c44 <TIM_Base_SetConfig+0x40>
80003c24:	687b      	ldr	r3, [r7, #4]
80003c26:	4a3d      	ldr	r2, [pc, #244]	; (80003d1c <TIM_Base_SetConfig+0x118>)
80003c28:	4293      	cmp	r3, r2
80003c2a:	d00b      	beq.n	80003c44 <TIM_Base_SetConfig+0x40>
80003c2c:	687b      	ldr	r3, [r7, #4]
80003c2e:	4a3c      	ldr	r2, [pc, #240]	; (80003d20 <TIM_Base_SetConfig+0x11c>)
80003c30:	4293      	cmp	r3, r2
80003c32:	d007      	beq.n	80003c44 <TIM_Base_SetConfig+0x40>
80003c34:	687b      	ldr	r3, [r7, #4]
80003c36:	4a3b      	ldr	r2, [pc, #236]	; (80003d24 <TIM_Base_SetConfig+0x120>)
80003c38:	4293      	cmp	r3, r2
80003c3a:	d003      	beq.n	80003c44 <TIM_Base_SetConfig+0x40>
80003c3c:	687b      	ldr	r3, [r7, #4]
80003c3e:	4a3a      	ldr	r2, [pc, #232]	; (80003d28 <TIM_Base_SetConfig+0x124>)
80003c40:	4293      	cmp	r3, r2
80003c42:	d108      	bne.n	80003c56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
80003c44:	68fb      	ldr	r3, [r7, #12]
80003c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80003c4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
80003c4c:	683b      	ldr	r3, [r7, #0]
80003c4e:	685b      	ldr	r3, [r3, #4]
80003c50:	68fa      	ldr	r2, [r7, #12]
80003c52:	4313      	orrs	r3, r2
80003c54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
80003c56:	687b      	ldr	r3, [r7, #4]
80003c58:	4a2f      	ldr	r2, [pc, #188]	; (80003d18 <TIM_Base_SetConfig+0x114>)
80003c5a:	4293      	cmp	r3, r2
80003c5c:	d02b      	beq.n	80003cb6 <TIM_Base_SetConfig+0xb2>
80003c5e:	687b      	ldr	r3, [r7, #4]
80003c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
80003c64:	d027      	beq.n	80003cb6 <TIM_Base_SetConfig+0xb2>
80003c66:	687b      	ldr	r3, [r7, #4]
80003c68:	4a2c      	ldr	r2, [pc, #176]	; (80003d1c <TIM_Base_SetConfig+0x118>)
80003c6a:	4293      	cmp	r3, r2
80003c6c:	d023      	beq.n	80003cb6 <TIM_Base_SetConfig+0xb2>
80003c6e:	687b      	ldr	r3, [r7, #4]
80003c70:	4a2b      	ldr	r2, [pc, #172]	; (80003d20 <TIM_Base_SetConfig+0x11c>)
80003c72:	4293      	cmp	r3, r2
80003c74:	d01f      	beq.n	80003cb6 <TIM_Base_SetConfig+0xb2>
80003c76:	687b      	ldr	r3, [r7, #4]
80003c78:	4a2a      	ldr	r2, [pc, #168]	; (80003d24 <TIM_Base_SetConfig+0x120>)
80003c7a:	4293      	cmp	r3, r2
80003c7c:	d01b      	beq.n	80003cb6 <TIM_Base_SetConfig+0xb2>
80003c7e:	687b      	ldr	r3, [r7, #4]
80003c80:	4a29      	ldr	r2, [pc, #164]	; (80003d28 <TIM_Base_SetConfig+0x124>)
80003c82:	4293      	cmp	r3, r2
80003c84:	d017      	beq.n	80003cb6 <TIM_Base_SetConfig+0xb2>
80003c86:	687b      	ldr	r3, [r7, #4]
80003c88:	4a28      	ldr	r2, [pc, #160]	; (80003d2c <TIM_Base_SetConfig+0x128>)
80003c8a:	4293      	cmp	r3, r2
80003c8c:	d013      	beq.n	80003cb6 <TIM_Base_SetConfig+0xb2>
80003c8e:	687b      	ldr	r3, [r7, #4]
80003c90:	4a27      	ldr	r2, [pc, #156]	; (80003d30 <TIM_Base_SetConfig+0x12c>)
80003c92:	4293      	cmp	r3, r2
80003c94:	d00f      	beq.n	80003cb6 <TIM_Base_SetConfig+0xb2>
80003c96:	687b      	ldr	r3, [r7, #4]
80003c98:	4a26      	ldr	r2, [pc, #152]	; (80003d34 <TIM_Base_SetConfig+0x130>)
80003c9a:	4293      	cmp	r3, r2
80003c9c:	d00b      	beq.n	80003cb6 <TIM_Base_SetConfig+0xb2>
80003c9e:	687b      	ldr	r3, [r7, #4]
80003ca0:	4a25      	ldr	r2, [pc, #148]	; (80003d38 <TIM_Base_SetConfig+0x134>)
80003ca2:	4293      	cmp	r3, r2
80003ca4:	d007      	beq.n	80003cb6 <TIM_Base_SetConfig+0xb2>
80003ca6:	687b      	ldr	r3, [r7, #4]
80003ca8:	4a24      	ldr	r2, [pc, #144]	; (80003d3c <TIM_Base_SetConfig+0x138>)
80003caa:	4293      	cmp	r3, r2
80003cac:	d003      	beq.n	80003cb6 <TIM_Base_SetConfig+0xb2>
80003cae:	687b      	ldr	r3, [r7, #4]
80003cb0:	4a23      	ldr	r2, [pc, #140]	; (80003d40 <TIM_Base_SetConfig+0x13c>)
80003cb2:	4293      	cmp	r3, r2
80003cb4:	d108      	bne.n	80003cc8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
80003cb6:	68fb      	ldr	r3, [r7, #12]
80003cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
80003cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
80003cbe:	683b      	ldr	r3, [r7, #0]
80003cc0:	68db      	ldr	r3, [r3, #12]
80003cc2:	68fa      	ldr	r2, [r7, #12]
80003cc4:	4313      	orrs	r3, r2
80003cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
80003cc8:	68fb      	ldr	r3, [r7, #12]
80003cca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
80003cce:	683b      	ldr	r3, [r7, #0]
80003cd0:	695b      	ldr	r3, [r3, #20]
80003cd2:	4313      	orrs	r3, r2
80003cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
80003cd6:	687b      	ldr	r3, [r7, #4]
80003cd8:	68fa      	ldr	r2, [r7, #12]
80003cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
80003cdc:	683b      	ldr	r3, [r7, #0]
80003cde:	689a      	ldr	r2, [r3, #8]
80003ce0:	687b      	ldr	r3, [r7, #4]
80003ce2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
80003ce4:	683b      	ldr	r3, [r7, #0]
80003ce6:	681a      	ldr	r2, [r3, #0]
80003ce8:	687b      	ldr	r3, [r7, #4]
80003cea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
80003cec:	687b      	ldr	r3, [r7, #4]
80003cee:	4a0a      	ldr	r2, [pc, #40]	; (80003d18 <TIM_Base_SetConfig+0x114>)
80003cf0:	4293      	cmp	r3, r2
80003cf2:	d003      	beq.n	80003cfc <TIM_Base_SetConfig+0xf8>
80003cf4:	687b      	ldr	r3, [r7, #4]
80003cf6:	4a0c      	ldr	r2, [pc, #48]	; (80003d28 <TIM_Base_SetConfig+0x124>)
80003cf8:	4293      	cmp	r3, r2
80003cfa:	d103      	bne.n	80003d04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
80003cfc:	683b      	ldr	r3, [r7, #0]
80003cfe:	691a      	ldr	r2, [r3, #16]
80003d00:	687b      	ldr	r3, [r7, #4]
80003d02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
80003d04:	687b      	ldr	r3, [r7, #4]
80003d06:	2201      	movs	r2, #1
80003d08:	615a      	str	r2, [r3, #20]
}
80003d0a:	bf00      	nop
80003d0c:	3714      	adds	r7, #20
80003d0e:	46bd      	mov	sp, r7
80003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
80003d14:	4770      	bx	lr
80003d16:	bf00      	nop
80003d18:	40010000 	.word	0x40010000
80003d1c:	40000400 	.word	0x40000400
80003d20:	40000800 	.word	0x40000800
80003d24:	40000c00 	.word	0x40000c00
80003d28:	40010400 	.word	0x40010400
80003d2c:	40014000 	.word	0x40014000
80003d30:	40014400 	.word	0x40014400
80003d34:	40014800 	.word	0x40014800
80003d38:	40001800 	.word	0x40001800
80003d3c:	40001c00 	.word	0x40001c00
80003d40:	40002000 	.word	0x40002000

80003d44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
80003d44:	b480      	push	{r7}
80003d46:	b087      	sub	sp, #28
80003d48:	af00      	add	r7, sp, #0
80003d4a:	6078      	str	r0, [r7, #4]
80003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
80003d4e:	687b      	ldr	r3, [r7, #4]
80003d50:	6a1b      	ldr	r3, [r3, #32]
80003d52:	f023 0201 	bic.w	r2, r3, #1
80003d56:	687b      	ldr	r3, [r7, #4]
80003d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
80003d5a:	687b      	ldr	r3, [r7, #4]
80003d5c:	6a1b      	ldr	r3, [r3, #32]
80003d5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
80003d60:	687b      	ldr	r3, [r7, #4]
80003d62:	685b      	ldr	r3, [r3, #4]
80003d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
80003d66:	687b      	ldr	r3, [r7, #4]
80003d68:	699b      	ldr	r3, [r3, #24]
80003d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
80003d6c:	68fb      	ldr	r3, [r7, #12]
80003d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80003d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
80003d74:	68fb      	ldr	r3, [r7, #12]
80003d76:	f023 0303 	bic.w	r3, r3, #3
80003d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
80003d7c:	683b      	ldr	r3, [r7, #0]
80003d7e:	681b      	ldr	r3, [r3, #0]
80003d80:	68fa      	ldr	r2, [r7, #12]
80003d82:	4313      	orrs	r3, r2
80003d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
80003d86:	697b      	ldr	r3, [r7, #20]
80003d88:	f023 0302 	bic.w	r3, r3, #2
80003d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
80003d8e:	683b      	ldr	r3, [r7, #0]
80003d90:	689b      	ldr	r3, [r3, #8]
80003d92:	697a      	ldr	r2, [r7, #20]
80003d94:	4313      	orrs	r3, r2
80003d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
80003d98:	687b      	ldr	r3, [r7, #4]
80003d9a:	4a20      	ldr	r2, [pc, #128]	; (80003e1c <TIM_OC1_SetConfig+0xd8>)
80003d9c:	4293      	cmp	r3, r2
80003d9e:	d003      	beq.n	80003da8 <TIM_OC1_SetConfig+0x64>
80003da0:	687b      	ldr	r3, [r7, #4]
80003da2:	4a1f      	ldr	r2, [pc, #124]	; (80003e20 <TIM_OC1_SetConfig+0xdc>)
80003da4:	4293      	cmp	r3, r2
80003da6:	d10c      	bne.n	80003dc2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
80003da8:	697b      	ldr	r3, [r7, #20]
80003daa:	f023 0308 	bic.w	r3, r3, #8
80003dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
80003db0:	683b      	ldr	r3, [r7, #0]
80003db2:	68db      	ldr	r3, [r3, #12]
80003db4:	697a      	ldr	r2, [r7, #20]
80003db6:	4313      	orrs	r3, r2
80003db8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
80003dba:	697b      	ldr	r3, [r7, #20]
80003dbc:	f023 0304 	bic.w	r3, r3, #4
80003dc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
80003dc2:	687b      	ldr	r3, [r7, #4]
80003dc4:	4a15      	ldr	r2, [pc, #84]	; (80003e1c <TIM_OC1_SetConfig+0xd8>)
80003dc6:	4293      	cmp	r3, r2
80003dc8:	d003      	beq.n	80003dd2 <TIM_OC1_SetConfig+0x8e>
80003dca:	687b      	ldr	r3, [r7, #4]
80003dcc:	4a14      	ldr	r2, [pc, #80]	; (80003e20 <TIM_OC1_SetConfig+0xdc>)
80003dce:	4293      	cmp	r3, r2
80003dd0:	d111      	bne.n	80003df6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
80003dd2:	693b      	ldr	r3, [r7, #16]
80003dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
80003dd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
80003dda:	693b      	ldr	r3, [r7, #16]
80003ddc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
80003de0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
80003de2:	683b      	ldr	r3, [r7, #0]
80003de4:	695b      	ldr	r3, [r3, #20]
80003de6:	693a      	ldr	r2, [r7, #16]
80003de8:	4313      	orrs	r3, r2
80003dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
80003dec:	683b      	ldr	r3, [r7, #0]
80003dee:	699b      	ldr	r3, [r3, #24]
80003df0:	693a      	ldr	r2, [r7, #16]
80003df2:	4313      	orrs	r3, r2
80003df4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
80003df6:	687b      	ldr	r3, [r7, #4]
80003df8:	693a      	ldr	r2, [r7, #16]
80003dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
80003dfc:	687b      	ldr	r3, [r7, #4]
80003dfe:	68fa      	ldr	r2, [r7, #12]
80003e00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
80003e02:	683b      	ldr	r3, [r7, #0]
80003e04:	685a      	ldr	r2, [r3, #4]
80003e06:	687b      	ldr	r3, [r7, #4]
80003e08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
80003e0a:	687b      	ldr	r3, [r7, #4]
80003e0c:	697a      	ldr	r2, [r7, #20]
80003e0e:	621a      	str	r2, [r3, #32]
}
80003e10:	bf00      	nop
80003e12:	371c      	adds	r7, #28
80003e14:	46bd      	mov	sp, r7
80003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
80003e1a:	4770      	bx	lr
80003e1c:	40010000 	.word	0x40010000
80003e20:	40010400 	.word	0x40010400

80003e24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
80003e24:	b480      	push	{r7}
80003e26:	b087      	sub	sp, #28
80003e28:	af00      	add	r7, sp, #0
80003e2a:	6078      	str	r0, [r7, #4]
80003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
80003e2e:	687b      	ldr	r3, [r7, #4]
80003e30:	6a1b      	ldr	r3, [r3, #32]
80003e32:	f023 0210 	bic.w	r2, r3, #16
80003e36:	687b      	ldr	r3, [r7, #4]
80003e38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
80003e3a:	687b      	ldr	r3, [r7, #4]
80003e3c:	6a1b      	ldr	r3, [r3, #32]
80003e3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
80003e40:	687b      	ldr	r3, [r7, #4]
80003e42:	685b      	ldr	r3, [r3, #4]
80003e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
80003e46:	687b      	ldr	r3, [r7, #4]
80003e48:	699b      	ldr	r3, [r3, #24]
80003e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
80003e4c:	68fb      	ldr	r3, [r7, #12]
80003e4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80003e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
80003e54:	68fb      	ldr	r3, [r7, #12]
80003e56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
80003e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
80003e5c:	683b      	ldr	r3, [r7, #0]
80003e5e:	681b      	ldr	r3, [r3, #0]
80003e60:	021b      	lsls	r3, r3, #8
80003e62:	68fa      	ldr	r2, [r7, #12]
80003e64:	4313      	orrs	r3, r2
80003e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
80003e68:	697b      	ldr	r3, [r7, #20]
80003e6a:	f023 0320 	bic.w	r3, r3, #32
80003e6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
80003e70:	683b      	ldr	r3, [r7, #0]
80003e72:	689b      	ldr	r3, [r3, #8]
80003e74:	011b      	lsls	r3, r3, #4
80003e76:	697a      	ldr	r2, [r7, #20]
80003e78:	4313      	orrs	r3, r2
80003e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
80003e7c:	687b      	ldr	r3, [r7, #4]
80003e7e:	4a22      	ldr	r2, [pc, #136]	; (80003f08 <TIM_OC2_SetConfig+0xe4>)
80003e80:	4293      	cmp	r3, r2
80003e82:	d003      	beq.n	80003e8c <TIM_OC2_SetConfig+0x68>
80003e84:	687b      	ldr	r3, [r7, #4]
80003e86:	4a21      	ldr	r2, [pc, #132]	; (80003f0c <TIM_OC2_SetConfig+0xe8>)
80003e88:	4293      	cmp	r3, r2
80003e8a:	d10d      	bne.n	80003ea8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
80003e8c:	697b      	ldr	r3, [r7, #20]
80003e8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
80003e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
80003e94:	683b      	ldr	r3, [r7, #0]
80003e96:	68db      	ldr	r3, [r3, #12]
80003e98:	011b      	lsls	r3, r3, #4
80003e9a:	697a      	ldr	r2, [r7, #20]
80003e9c:	4313      	orrs	r3, r2
80003e9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
80003ea0:	697b      	ldr	r3, [r7, #20]
80003ea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
80003ea6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
80003ea8:	687b      	ldr	r3, [r7, #4]
80003eaa:	4a17      	ldr	r2, [pc, #92]	; (80003f08 <TIM_OC2_SetConfig+0xe4>)
80003eac:	4293      	cmp	r3, r2
80003eae:	d003      	beq.n	80003eb8 <TIM_OC2_SetConfig+0x94>
80003eb0:	687b      	ldr	r3, [r7, #4]
80003eb2:	4a16      	ldr	r2, [pc, #88]	; (80003f0c <TIM_OC2_SetConfig+0xe8>)
80003eb4:	4293      	cmp	r3, r2
80003eb6:	d113      	bne.n	80003ee0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
80003eb8:	693b      	ldr	r3, [r7, #16]
80003eba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
80003ebe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
80003ec0:	693b      	ldr	r3, [r7, #16]
80003ec2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
80003ec6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
80003ec8:	683b      	ldr	r3, [r7, #0]
80003eca:	695b      	ldr	r3, [r3, #20]
80003ecc:	009b      	lsls	r3, r3, #2
80003ece:	693a      	ldr	r2, [r7, #16]
80003ed0:	4313      	orrs	r3, r2
80003ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
80003ed4:	683b      	ldr	r3, [r7, #0]
80003ed6:	699b      	ldr	r3, [r3, #24]
80003ed8:	009b      	lsls	r3, r3, #2
80003eda:	693a      	ldr	r2, [r7, #16]
80003edc:	4313      	orrs	r3, r2
80003ede:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
80003ee0:	687b      	ldr	r3, [r7, #4]
80003ee2:	693a      	ldr	r2, [r7, #16]
80003ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
80003ee6:	687b      	ldr	r3, [r7, #4]
80003ee8:	68fa      	ldr	r2, [r7, #12]
80003eea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
80003eec:	683b      	ldr	r3, [r7, #0]
80003eee:	685a      	ldr	r2, [r3, #4]
80003ef0:	687b      	ldr	r3, [r7, #4]
80003ef2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
80003ef4:	687b      	ldr	r3, [r7, #4]
80003ef6:	697a      	ldr	r2, [r7, #20]
80003ef8:	621a      	str	r2, [r3, #32]
}
80003efa:	bf00      	nop
80003efc:	371c      	adds	r7, #28
80003efe:	46bd      	mov	sp, r7
80003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
80003f04:	4770      	bx	lr
80003f06:	bf00      	nop
80003f08:	40010000 	.word	0x40010000
80003f0c:	40010400 	.word	0x40010400

80003f10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
80003f10:	b480      	push	{r7}
80003f12:	b087      	sub	sp, #28
80003f14:	af00      	add	r7, sp, #0
80003f16:	6078      	str	r0, [r7, #4]
80003f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
80003f1a:	687b      	ldr	r3, [r7, #4]
80003f1c:	6a1b      	ldr	r3, [r3, #32]
80003f1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
80003f22:	687b      	ldr	r3, [r7, #4]
80003f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
80003f26:	687b      	ldr	r3, [r7, #4]
80003f28:	6a1b      	ldr	r3, [r3, #32]
80003f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
80003f2c:	687b      	ldr	r3, [r7, #4]
80003f2e:	685b      	ldr	r3, [r3, #4]
80003f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
80003f32:	687b      	ldr	r3, [r7, #4]
80003f34:	69db      	ldr	r3, [r3, #28]
80003f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
80003f38:	68fb      	ldr	r3, [r7, #12]
80003f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
80003f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
80003f40:	68fb      	ldr	r3, [r7, #12]
80003f42:	f023 0303 	bic.w	r3, r3, #3
80003f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
80003f48:	683b      	ldr	r3, [r7, #0]
80003f4a:	681b      	ldr	r3, [r3, #0]
80003f4c:	68fa      	ldr	r2, [r7, #12]
80003f4e:	4313      	orrs	r3, r2
80003f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
80003f52:	697b      	ldr	r3, [r7, #20]
80003f54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
80003f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
80003f5a:	683b      	ldr	r3, [r7, #0]
80003f5c:	689b      	ldr	r3, [r3, #8]
80003f5e:	021b      	lsls	r3, r3, #8
80003f60:	697a      	ldr	r2, [r7, #20]
80003f62:	4313      	orrs	r3, r2
80003f64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
80003f66:	687b      	ldr	r3, [r7, #4]
80003f68:	4a21      	ldr	r2, [pc, #132]	; (80003ff0 <TIM_OC3_SetConfig+0xe0>)
80003f6a:	4293      	cmp	r3, r2
80003f6c:	d003      	beq.n	80003f76 <TIM_OC3_SetConfig+0x66>
80003f6e:	687b      	ldr	r3, [r7, #4]
80003f70:	4a20      	ldr	r2, [pc, #128]	; (80003ff4 <TIM_OC3_SetConfig+0xe4>)
80003f72:	4293      	cmp	r3, r2
80003f74:	d10d      	bne.n	80003f92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
80003f76:	697b      	ldr	r3, [r7, #20]
80003f78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
80003f7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
80003f7e:	683b      	ldr	r3, [r7, #0]
80003f80:	68db      	ldr	r3, [r3, #12]
80003f82:	021b      	lsls	r3, r3, #8
80003f84:	697a      	ldr	r2, [r7, #20]
80003f86:	4313      	orrs	r3, r2
80003f88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
80003f8a:	697b      	ldr	r3, [r7, #20]
80003f8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
80003f90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
80003f92:	687b      	ldr	r3, [r7, #4]
80003f94:	4a16      	ldr	r2, [pc, #88]	; (80003ff0 <TIM_OC3_SetConfig+0xe0>)
80003f96:	4293      	cmp	r3, r2
80003f98:	d003      	beq.n	80003fa2 <TIM_OC3_SetConfig+0x92>
80003f9a:	687b      	ldr	r3, [r7, #4]
80003f9c:	4a15      	ldr	r2, [pc, #84]	; (80003ff4 <TIM_OC3_SetConfig+0xe4>)
80003f9e:	4293      	cmp	r3, r2
80003fa0:	d113      	bne.n	80003fca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
80003fa2:	693b      	ldr	r3, [r7, #16]
80003fa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
80003fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
80003faa:	693b      	ldr	r3, [r7, #16]
80003fac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
80003fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
80003fb2:	683b      	ldr	r3, [r7, #0]
80003fb4:	695b      	ldr	r3, [r3, #20]
80003fb6:	011b      	lsls	r3, r3, #4
80003fb8:	693a      	ldr	r2, [r7, #16]
80003fba:	4313      	orrs	r3, r2
80003fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
80003fbe:	683b      	ldr	r3, [r7, #0]
80003fc0:	699b      	ldr	r3, [r3, #24]
80003fc2:	011b      	lsls	r3, r3, #4
80003fc4:	693a      	ldr	r2, [r7, #16]
80003fc6:	4313      	orrs	r3, r2
80003fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
80003fca:	687b      	ldr	r3, [r7, #4]
80003fcc:	693a      	ldr	r2, [r7, #16]
80003fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
80003fd0:	687b      	ldr	r3, [r7, #4]
80003fd2:	68fa      	ldr	r2, [r7, #12]
80003fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
80003fd6:	683b      	ldr	r3, [r7, #0]
80003fd8:	685a      	ldr	r2, [r3, #4]
80003fda:	687b      	ldr	r3, [r7, #4]
80003fdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
80003fde:	687b      	ldr	r3, [r7, #4]
80003fe0:	697a      	ldr	r2, [r7, #20]
80003fe2:	621a      	str	r2, [r3, #32]
}
80003fe4:	bf00      	nop
80003fe6:	371c      	adds	r7, #28
80003fe8:	46bd      	mov	sp, r7
80003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
80003fee:	4770      	bx	lr
80003ff0:	40010000 	.word	0x40010000
80003ff4:	40010400 	.word	0x40010400

80003ff8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
80003ff8:	b480      	push	{r7}
80003ffa:	b087      	sub	sp, #28
80003ffc:	af00      	add	r7, sp, #0
80003ffe:	6078      	str	r0, [r7, #4]
80004000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
80004002:	687b      	ldr	r3, [r7, #4]
80004004:	6a1b      	ldr	r3, [r3, #32]
80004006:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
8000400a:	687b      	ldr	r3, [r7, #4]
8000400c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
8000400e:	687b      	ldr	r3, [r7, #4]
80004010:	6a1b      	ldr	r3, [r3, #32]
80004012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
80004014:	687b      	ldr	r3, [r7, #4]
80004016:	685b      	ldr	r3, [r3, #4]
80004018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
8000401a:	687b      	ldr	r3, [r7, #4]
8000401c:	69db      	ldr	r3, [r3, #28]
8000401e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
80004020:	68fb      	ldr	r3, [r7, #12]
80004022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
80004026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
80004028:	68fb      	ldr	r3, [r7, #12]
8000402a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
8000402e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
80004030:	683b      	ldr	r3, [r7, #0]
80004032:	681b      	ldr	r3, [r3, #0]
80004034:	021b      	lsls	r3, r3, #8
80004036:	68fa      	ldr	r2, [r7, #12]
80004038:	4313      	orrs	r3, r2
8000403a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
8000403c:	693b      	ldr	r3, [r7, #16]
8000403e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
80004042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
80004044:	683b      	ldr	r3, [r7, #0]
80004046:	689b      	ldr	r3, [r3, #8]
80004048:	031b      	lsls	r3, r3, #12
8000404a:	693a      	ldr	r2, [r7, #16]
8000404c:	4313      	orrs	r3, r2
8000404e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
80004050:	687b      	ldr	r3, [r7, #4]
80004052:	4a12      	ldr	r2, [pc, #72]	; (8000409c <TIM_OC4_SetConfig+0xa4>)
80004054:	4293      	cmp	r3, r2
80004056:	d003      	beq.n	80004060 <TIM_OC4_SetConfig+0x68>
80004058:	687b      	ldr	r3, [r7, #4]
8000405a:	4a11      	ldr	r2, [pc, #68]	; (800040a0 <TIM_OC4_SetConfig+0xa8>)
8000405c:	4293      	cmp	r3, r2
8000405e:	d109      	bne.n	80004074 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
80004060:	697b      	ldr	r3, [r7, #20]
80004062:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
80004066:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
80004068:	683b      	ldr	r3, [r7, #0]
8000406a:	695b      	ldr	r3, [r3, #20]
8000406c:	019b      	lsls	r3, r3, #6
8000406e:	697a      	ldr	r2, [r7, #20]
80004070:	4313      	orrs	r3, r2
80004072:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
80004074:	687b      	ldr	r3, [r7, #4]
80004076:	697a      	ldr	r2, [r7, #20]
80004078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
8000407a:	687b      	ldr	r3, [r7, #4]
8000407c:	68fa      	ldr	r2, [r7, #12]
8000407e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
80004080:	683b      	ldr	r3, [r7, #0]
80004082:	685a      	ldr	r2, [r3, #4]
80004084:	687b      	ldr	r3, [r7, #4]
80004086:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
80004088:	687b      	ldr	r3, [r7, #4]
8000408a:	693a      	ldr	r2, [r7, #16]
8000408c:	621a      	str	r2, [r3, #32]
}
8000408e:	bf00      	nop
80004090:	371c      	adds	r7, #28
80004092:	46bd      	mov	sp, r7
80004094:	f85d 7b04 	ldr.w	r7, [sp], #4
80004098:	4770      	bx	lr
8000409a:	bf00      	nop
8000409c:	40010000 	.word	0x40010000
800040a0:	40010400 	.word	0x40010400

800040a4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
800040a4:	b480      	push	{r7}
800040a6:	b087      	sub	sp, #28
800040a8:	af00      	add	r7, sp, #0
800040aa:	60f8      	str	r0, [r7, #12]
800040ac:	60b9      	str	r1, [r7, #8]
800040ae:	607a      	str	r2, [r7, #4]
800040b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
800040b2:	68fb      	ldr	r3, [r7, #12]
800040b4:	6a1b      	ldr	r3, [r3, #32]
800040b6:	f023 0201 	bic.w	r2, r3, #1
800040ba:	68fb      	ldr	r3, [r7, #12]
800040bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
800040be:	68fb      	ldr	r3, [r7, #12]
800040c0:	699b      	ldr	r3, [r3, #24]
800040c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
800040c4:	68fb      	ldr	r3, [r7, #12]
800040c6:	6a1b      	ldr	r3, [r3, #32]
800040c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
800040ca:	68fb      	ldr	r3, [r7, #12]
800040cc:	4a28      	ldr	r2, [pc, #160]	; (80004170 <TIM_TI1_SetConfig+0xcc>)
800040ce:	4293      	cmp	r3, r2
800040d0:	d01b      	beq.n	8000410a <TIM_TI1_SetConfig+0x66>
800040d2:	68fb      	ldr	r3, [r7, #12]
800040d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
800040d8:	d017      	beq.n	8000410a <TIM_TI1_SetConfig+0x66>
800040da:	68fb      	ldr	r3, [r7, #12]
800040dc:	4a25      	ldr	r2, [pc, #148]	; (80004174 <TIM_TI1_SetConfig+0xd0>)
800040de:	4293      	cmp	r3, r2
800040e0:	d013      	beq.n	8000410a <TIM_TI1_SetConfig+0x66>
800040e2:	68fb      	ldr	r3, [r7, #12]
800040e4:	4a24      	ldr	r2, [pc, #144]	; (80004178 <TIM_TI1_SetConfig+0xd4>)
800040e6:	4293      	cmp	r3, r2
800040e8:	d00f      	beq.n	8000410a <TIM_TI1_SetConfig+0x66>
800040ea:	68fb      	ldr	r3, [r7, #12]
800040ec:	4a23      	ldr	r2, [pc, #140]	; (8000417c <TIM_TI1_SetConfig+0xd8>)
800040ee:	4293      	cmp	r3, r2
800040f0:	d00b      	beq.n	8000410a <TIM_TI1_SetConfig+0x66>
800040f2:	68fb      	ldr	r3, [r7, #12]
800040f4:	4a22      	ldr	r2, [pc, #136]	; (80004180 <TIM_TI1_SetConfig+0xdc>)
800040f6:	4293      	cmp	r3, r2
800040f8:	d007      	beq.n	8000410a <TIM_TI1_SetConfig+0x66>
800040fa:	68fb      	ldr	r3, [r7, #12]
800040fc:	4a21      	ldr	r2, [pc, #132]	; (80004184 <TIM_TI1_SetConfig+0xe0>)
800040fe:	4293      	cmp	r3, r2
80004100:	d003      	beq.n	8000410a <TIM_TI1_SetConfig+0x66>
80004102:	68fb      	ldr	r3, [r7, #12]
80004104:	4a20      	ldr	r2, [pc, #128]	; (80004188 <TIM_TI1_SetConfig+0xe4>)
80004106:	4293      	cmp	r3, r2
80004108:	d101      	bne.n	8000410e <TIM_TI1_SetConfig+0x6a>
8000410a:	2301      	movs	r3, #1
8000410c:	e000      	b.n	80004110 <TIM_TI1_SetConfig+0x6c>
8000410e:	2300      	movs	r3, #0
80004110:	2b00      	cmp	r3, #0
80004112:	d008      	beq.n	80004126 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
80004114:	697b      	ldr	r3, [r7, #20]
80004116:	f023 0303 	bic.w	r3, r3, #3
8000411a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
8000411c:	697a      	ldr	r2, [r7, #20]
8000411e:	687b      	ldr	r3, [r7, #4]
80004120:	4313      	orrs	r3, r2
80004122:	617b      	str	r3, [r7, #20]
80004124:	e003      	b.n	8000412e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
80004126:	697b      	ldr	r3, [r7, #20]
80004128:	f043 0301 	orr.w	r3, r3, #1
8000412c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
8000412e:	697b      	ldr	r3, [r7, #20]
80004130:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
80004134:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
80004136:	683b      	ldr	r3, [r7, #0]
80004138:	011b      	lsls	r3, r3, #4
8000413a:	b2db      	uxtb	r3, r3
8000413c:	697a      	ldr	r2, [r7, #20]
8000413e:	4313      	orrs	r3, r2
80004140:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
80004142:	693b      	ldr	r3, [r7, #16]
80004144:	f023 030a 	bic.w	r3, r3, #10
80004148:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
8000414a:	68bb      	ldr	r3, [r7, #8]
8000414c:	f003 030a 	and.w	r3, r3, #10
80004150:	693a      	ldr	r2, [r7, #16]
80004152:	4313      	orrs	r3, r2
80004154:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
80004156:	68fb      	ldr	r3, [r7, #12]
80004158:	697a      	ldr	r2, [r7, #20]
8000415a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
8000415c:	68fb      	ldr	r3, [r7, #12]
8000415e:	693a      	ldr	r2, [r7, #16]
80004160:	621a      	str	r2, [r3, #32]
}
80004162:	bf00      	nop
80004164:	371c      	adds	r7, #28
80004166:	46bd      	mov	sp, r7
80004168:	f85d 7b04 	ldr.w	r7, [sp], #4
8000416c:	4770      	bx	lr
8000416e:	bf00      	nop
80004170:	40010000 	.word	0x40010000
80004174:	40000400 	.word	0x40000400
80004178:	40000800 	.word	0x40000800
8000417c:	40000c00 	.word	0x40000c00
80004180:	40010400 	.word	0x40010400
80004184:	40014000 	.word	0x40014000
80004188:	40001800 	.word	0x40001800

8000418c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
8000418c:	b480      	push	{r7}
8000418e:	b087      	sub	sp, #28
80004190:	af00      	add	r7, sp, #0
80004192:	60f8      	str	r0, [r7, #12]
80004194:	60b9      	str	r1, [r7, #8]
80004196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
80004198:	68fb      	ldr	r3, [r7, #12]
8000419a:	6a1b      	ldr	r3, [r3, #32]
8000419c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
8000419e:	68fb      	ldr	r3, [r7, #12]
800041a0:	6a1b      	ldr	r3, [r3, #32]
800041a2:	f023 0201 	bic.w	r2, r3, #1
800041a6:	68fb      	ldr	r3, [r7, #12]
800041a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
800041aa:	68fb      	ldr	r3, [r7, #12]
800041ac:	699b      	ldr	r3, [r3, #24]
800041ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
800041b0:	693b      	ldr	r3, [r7, #16]
800041b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
800041b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
800041b8:	687b      	ldr	r3, [r7, #4]
800041ba:	011b      	lsls	r3, r3, #4
800041bc:	693a      	ldr	r2, [r7, #16]
800041be:	4313      	orrs	r3, r2
800041c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
800041c2:	697b      	ldr	r3, [r7, #20]
800041c4:	f023 030a 	bic.w	r3, r3, #10
800041c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
800041ca:	697a      	ldr	r2, [r7, #20]
800041cc:	68bb      	ldr	r3, [r7, #8]
800041ce:	4313      	orrs	r3, r2
800041d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
800041d2:	68fb      	ldr	r3, [r7, #12]
800041d4:	693a      	ldr	r2, [r7, #16]
800041d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
800041d8:	68fb      	ldr	r3, [r7, #12]
800041da:	697a      	ldr	r2, [r7, #20]
800041dc:	621a      	str	r2, [r3, #32]
}
800041de:	bf00      	nop
800041e0:	371c      	adds	r7, #28
800041e2:	46bd      	mov	sp, r7
800041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
800041e8:	4770      	bx	lr

800041ea <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
800041ea:	b480      	push	{r7}
800041ec:	b087      	sub	sp, #28
800041ee:	af00      	add	r7, sp, #0
800041f0:	60f8      	str	r0, [r7, #12]
800041f2:	60b9      	str	r1, [r7, #8]
800041f4:	607a      	str	r2, [r7, #4]
800041f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
800041f8:	68fb      	ldr	r3, [r7, #12]
800041fa:	6a1b      	ldr	r3, [r3, #32]
800041fc:	f023 0210 	bic.w	r2, r3, #16
80004200:	68fb      	ldr	r3, [r7, #12]
80004202:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
80004204:	68fb      	ldr	r3, [r7, #12]
80004206:	699b      	ldr	r3, [r3, #24]
80004208:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
8000420a:	68fb      	ldr	r3, [r7, #12]
8000420c:	6a1b      	ldr	r3, [r3, #32]
8000420e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
80004210:	697b      	ldr	r3, [r7, #20]
80004212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
80004216:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
80004218:	687b      	ldr	r3, [r7, #4]
8000421a:	021b      	lsls	r3, r3, #8
8000421c:	697a      	ldr	r2, [r7, #20]
8000421e:	4313      	orrs	r3, r2
80004220:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
80004222:	697b      	ldr	r3, [r7, #20]
80004224:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
80004228:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
8000422a:	683b      	ldr	r3, [r7, #0]
8000422c:	031b      	lsls	r3, r3, #12
8000422e:	b29b      	uxth	r3, r3
80004230:	697a      	ldr	r2, [r7, #20]
80004232:	4313      	orrs	r3, r2
80004234:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
80004236:	693b      	ldr	r3, [r7, #16]
80004238:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
8000423c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
8000423e:	68bb      	ldr	r3, [r7, #8]
80004240:	011b      	lsls	r3, r3, #4
80004242:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
80004246:	693a      	ldr	r2, [r7, #16]
80004248:	4313      	orrs	r3, r2
8000424a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
8000424c:	68fb      	ldr	r3, [r7, #12]
8000424e:	697a      	ldr	r2, [r7, #20]
80004250:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
80004252:	68fb      	ldr	r3, [r7, #12]
80004254:	693a      	ldr	r2, [r7, #16]
80004256:	621a      	str	r2, [r3, #32]
}
80004258:	bf00      	nop
8000425a:	371c      	adds	r7, #28
8000425c:	46bd      	mov	sp, r7
8000425e:	f85d 7b04 	ldr.w	r7, [sp], #4
80004262:	4770      	bx	lr

80004264 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
80004264:	b480      	push	{r7}
80004266:	b087      	sub	sp, #28
80004268:	af00      	add	r7, sp, #0
8000426a:	60f8      	str	r0, [r7, #12]
8000426c:	60b9      	str	r1, [r7, #8]
8000426e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
80004270:	68fb      	ldr	r3, [r7, #12]
80004272:	6a1b      	ldr	r3, [r3, #32]
80004274:	f023 0210 	bic.w	r2, r3, #16
80004278:	68fb      	ldr	r3, [r7, #12]
8000427a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
8000427c:	68fb      	ldr	r3, [r7, #12]
8000427e:	699b      	ldr	r3, [r3, #24]
80004280:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
80004282:	68fb      	ldr	r3, [r7, #12]
80004284:	6a1b      	ldr	r3, [r3, #32]
80004286:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
80004288:	697b      	ldr	r3, [r7, #20]
8000428a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
8000428e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
80004290:	687b      	ldr	r3, [r7, #4]
80004292:	031b      	lsls	r3, r3, #12
80004294:	697a      	ldr	r2, [r7, #20]
80004296:	4313      	orrs	r3, r2
80004298:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
8000429a:	693b      	ldr	r3, [r7, #16]
8000429c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
800042a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
800042a2:	68bb      	ldr	r3, [r7, #8]
800042a4:	011b      	lsls	r3, r3, #4
800042a6:	693a      	ldr	r2, [r7, #16]
800042a8:	4313      	orrs	r3, r2
800042aa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
800042ac:	68fb      	ldr	r3, [r7, #12]
800042ae:	697a      	ldr	r2, [r7, #20]
800042b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
800042b2:	68fb      	ldr	r3, [r7, #12]
800042b4:	693a      	ldr	r2, [r7, #16]
800042b6:	621a      	str	r2, [r3, #32]
}
800042b8:	bf00      	nop
800042ba:	371c      	adds	r7, #28
800042bc:	46bd      	mov	sp, r7
800042be:	f85d 7b04 	ldr.w	r7, [sp], #4
800042c2:	4770      	bx	lr

800042c4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
800042c4:	b480      	push	{r7}
800042c6:	b087      	sub	sp, #28
800042c8:	af00      	add	r7, sp, #0
800042ca:	60f8      	str	r0, [r7, #12]
800042cc:	60b9      	str	r1, [r7, #8]
800042ce:	607a      	str	r2, [r7, #4]
800042d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
800042d2:	68fb      	ldr	r3, [r7, #12]
800042d4:	6a1b      	ldr	r3, [r3, #32]
800042d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
800042da:	68fb      	ldr	r3, [r7, #12]
800042dc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
800042de:	68fb      	ldr	r3, [r7, #12]
800042e0:	69db      	ldr	r3, [r3, #28]
800042e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
800042e4:	68fb      	ldr	r3, [r7, #12]
800042e6:	6a1b      	ldr	r3, [r3, #32]
800042e8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
800042ea:	697b      	ldr	r3, [r7, #20]
800042ec:	f023 0303 	bic.w	r3, r3, #3
800042f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
800042f2:	697a      	ldr	r2, [r7, #20]
800042f4:	687b      	ldr	r3, [r7, #4]
800042f6:	4313      	orrs	r3, r2
800042f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
800042fa:	697b      	ldr	r3, [r7, #20]
800042fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
80004300:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
80004302:	683b      	ldr	r3, [r7, #0]
80004304:	011b      	lsls	r3, r3, #4
80004306:	b2db      	uxtb	r3, r3
80004308:	697a      	ldr	r2, [r7, #20]
8000430a:	4313      	orrs	r3, r2
8000430c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
8000430e:	693b      	ldr	r3, [r7, #16]
80004310:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
80004314:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
80004316:	68bb      	ldr	r3, [r7, #8]
80004318:	021b      	lsls	r3, r3, #8
8000431a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
8000431e:	693a      	ldr	r2, [r7, #16]
80004320:	4313      	orrs	r3, r2
80004322:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
80004324:	68fb      	ldr	r3, [r7, #12]
80004326:	697a      	ldr	r2, [r7, #20]
80004328:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
8000432a:	68fb      	ldr	r3, [r7, #12]
8000432c:	693a      	ldr	r2, [r7, #16]
8000432e:	621a      	str	r2, [r3, #32]
}
80004330:	bf00      	nop
80004332:	371c      	adds	r7, #28
80004334:	46bd      	mov	sp, r7
80004336:	f85d 7b04 	ldr.w	r7, [sp], #4
8000433a:	4770      	bx	lr

8000433c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
8000433c:	b480      	push	{r7}
8000433e:	b087      	sub	sp, #28
80004340:	af00      	add	r7, sp, #0
80004342:	60f8      	str	r0, [r7, #12]
80004344:	60b9      	str	r1, [r7, #8]
80004346:	607a      	str	r2, [r7, #4]
80004348:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
8000434a:	68fb      	ldr	r3, [r7, #12]
8000434c:	6a1b      	ldr	r3, [r3, #32]
8000434e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
80004352:	68fb      	ldr	r3, [r7, #12]
80004354:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
80004356:	68fb      	ldr	r3, [r7, #12]
80004358:	69db      	ldr	r3, [r3, #28]
8000435a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
8000435c:	68fb      	ldr	r3, [r7, #12]
8000435e:	6a1b      	ldr	r3, [r3, #32]
80004360:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
80004362:	697b      	ldr	r3, [r7, #20]
80004364:	f423 7340 	bic.w	r3, r3, #768	; 0x300
80004368:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
8000436a:	687b      	ldr	r3, [r7, #4]
8000436c:	021b      	lsls	r3, r3, #8
8000436e:	697a      	ldr	r2, [r7, #20]
80004370:	4313      	orrs	r3, r2
80004372:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
80004374:	697b      	ldr	r3, [r7, #20]
80004376:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
8000437a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
8000437c:	683b      	ldr	r3, [r7, #0]
8000437e:	031b      	lsls	r3, r3, #12
80004380:	b29b      	uxth	r3, r3
80004382:	697a      	ldr	r2, [r7, #20]
80004384:	4313      	orrs	r3, r2
80004386:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
80004388:	693b      	ldr	r3, [r7, #16]
8000438a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
8000438e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
80004390:	68bb      	ldr	r3, [r7, #8]
80004392:	031b      	lsls	r3, r3, #12
80004394:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
80004398:	693a      	ldr	r2, [r7, #16]
8000439a:	4313      	orrs	r3, r2
8000439c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
8000439e:	68fb      	ldr	r3, [r7, #12]
800043a0:	697a      	ldr	r2, [r7, #20]
800043a2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
800043a4:	68fb      	ldr	r3, [r7, #12]
800043a6:	693a      	ldr	r2, [r7, #16]
800043a8:	621a      	str	r2, [r3, #32]
}
800043aa:	bf00      	nop
800043ac:	371c      	adds	r7, #28
800043ae:	46bd      	mov	sp, r7
800043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
800043b4:	4770      	bx	lr

800043b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
800043b6:	b480      	push	{r7}
800043b8:	b085      	sub	sp, #20
800043ba:	af00      	add	r7, sp, #0
800043bc:	6078      	str	r0, [r7, #4]
800043be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
800043c0:	687b      	ldr	r3, [r7, #4]
800043c2:	689b      	ldr	r3, [r3, #8]
800043c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
800043c6:	68fb      	ldr	r3, [r7, #12]
800043c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
800043cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
800043ce:	683a      	ldr	r2, [r7, #0]
800043d0:	68fb      	ldr	r3, [r7, #12]
800043d2:	4313      	orrs	r3, r2
800043d4:	f043 0307 	orr.w	r3, r3, #7
800043d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
800043da:	687b      	ldr	r3, [r7, #4]
800043dc:	68fa      	ldr	r2, [r7, #12]
800043de:	609a      	str	r2, [r3, #8]
}
800043e0:	bf00      	nop
800043e2:	3714      	adds	r7, #20
800043e4:	46bd      	mov	sp, r7
800043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
800043ea:	4770      	bx	lr

800043ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
800043ec:	b480      	push	{r7}
800043ee:	b087      	sub	sp, #28
800043f0:	af00      	add	r7, sp, #0
800043f2:	60f8      	str	r0, [r7, #12]
800043f4:	60b9      	str	r1, [r7, #8]
800043f6:	607a      	str	r2, [r7, #4]
800043f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
800043fa:	68fb      	ldr	r3, [r7, #12]
800043fc:	689b      	ldr	r3, [r3, #8]
800043fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
80004400:	697b      	ldr	r3, [r7, #20]
80004402:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
80004406:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
80004408:	683b      	ldr	r3, [r7, #0]
8000440a:	021a      	lsls	r2, r3, #8
8000440c:	687b      	ldr	r3, [r7, #4]
8000440e:	431a      	orrs	r2, r3
80004410:	68bb      	ldr	r3, [r7, #8]
80004412:	4313      	orrs	r3, r2
80004414:	697a      	ldr	r2, [r7, #20]
80004416:	4313      	orrs	r3, r2
80004418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
8000441a:	68fb      	ldr	r3, [r7, #12]
8000441c:	697a      	ldr	r2, [r7, #20]
8000441e:	609a      	str	r2, [r3, #8]
}
80004420:	bf00      	nop
80004422:	371c      	adds	r7, #28
80004424:	46bd      	mov	sp, r7
80004426:	f85d 7b04 	ldr.w	r7, [sp], #4
8000442a:	4770      	bx	lr

8000442c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
8000442c:	b480      	push	{r7}
8000442e:	b087      	sub	sp, #28
80004430:	af00      	add	r7, sp, #0
80004432:	60f8      	str	r0, [r7, #12]
80004434:	60b9      	str	r1, [r7, #8]
80004436:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
80004438:	68bb      	ldr	r3, [r7, #8]
8000443a:	f003 031f 	and.w	r3, r3, #31
8000443e:	2201      	movs	r2, #1
80004440:	fa02 f303 	lsl.w	r3, r2, r3
80004444:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
80004446:	68fb      	ldr	r3, [r7, #12]
80004448:	6a1a      	ldr	r2, [r3, #32]
8000444a:	697b      	ldr	r3, [r7, #20]
8000444c:	43db      	mvns	r3, r3
8000444e:	401a      	ands	r2, r3
80004450:	68fb      	ldr	r3, [r7, #12]
80004452:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
80004454:	68fb      	ldr	r3, [r7, #12]
80004456:	6a1a      	ldr	r2, [r3, #32]
80004458:	68bb      	ldr	r3, [r7, #8]
8000445a:	f003 031f 	and.w	r3, r3, #31
8000445e:	6879      	ldr	r1, [r7, #4]
80004460:	fa01 f303 	lsl.w	r3, r1, r3
80004464:	431a      	orrs	r2, r3
80004466:	68fb      	ldr	r3, [r7, #12]
80004468:	621a      	str	r2, [r3, #32]
}
8000446a:	bf00      	nop
8000446c:	371c      	adds	r7, #28
8000446e:	46bd      	mov	sp, r7
80004470:	f85d 7b04 	ldr.w	r7, [sp], #4
80004474:	4770      	bx	lr
	...

80004478 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
80004478:	b480      	push	{r7}
8000447a:	b085      	sub	sp, #20
8000447c:	af00      	add	r7, sp, #0
8000447e:	6078      	str	r0, [r7, #4]
80004480:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
80004482:	687b      	ldr	r3, [r7, #4]
80004484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
80004488:	2b01      	cmp	r3, #1
8000448a:	d101      	bne.n	80004490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
8000448c:	2302      	movs	r3, #2
8000448e:	e05a      	b.n	80004546 <HAL_TIMEx_MasterConfigSynchronization+0xce>
80004490:	687b      	ldr	r3, [r7, #4]
80004492:	2201      	movs	r2, #1
80004494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
80004498:	687b      	ldr	r3, [r7, #4]
8000449a:	2202      	movs	r2, #2
8000449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
800044a0:	687b      	ldr	r3, [r7, #4]
800044a2:	681b      	ldr	r3, [r3, #0]
800044a4:	685b      	ldr	r3, [r3, #4]
800044a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
800044a8:	687b      	ldr	r3, [r7, #4]
800044aa:	681b      	ldr	r3, [r3, #0]
800044ac:	689b      	ldr	r3, [r3, #8]
800044ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
800044b0:	68fb      	ldr	r3, [r7, #12]
800044b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
800044b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
800044b8:	683b      	ldr	r3, [r7, #0]
800044ba:	681b      	ldr	r3, [r3, #0]
800044bc:	68fa      	ldr	r2, [r7, #12]
800044be:	4313      	orrs	r3, r2
800044c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
800044c2:	687b      	ldr	r3, [r7, #4]
800044c4:	681b      	ldr	r3, [r3, #0]
800044c6:	68fa      	ldr	r2, [r7, #12]
800044c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
800044ca:	687b      	ldr	r3, [r7, #4]
800044cc:	681b      	ldr	r3, [r3, #0]
800044ce:	4a21      	ldr	r2, [pc, #132]	; (80004554 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
800044d0:	4293      	cmp	r3, r2
800044d2:	d022      	beq.n	8000451a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
800044d4:	687b      	ldr	r3, [r7, #4]
800044d6:	681b      	ldr	r3, [r3, #0]
800044d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
800044dc:	d01d      	beq.n	8000451a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
800044de:	687b      	ldr	r3, [r7, #4]
800044e0:	681b      	ldr	r3, [r3, #0]
800044e2:	4a1d      	ldr	r2, [pc, #116]	; (80004558 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
800044e4:	4293      	cmp	r3, r2
800044e6:	d018      	beq.n	8000451a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
800044e8:	687b      	ldr	r3, [r7, #4]
800044ea:	681b      	ldr	r3, [r3, #0]
800044ec:	4a1b      	ldr	r2, [pc, #108]	; (8000455c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
800044ee:	4293      	cmp	r3, r2
800044f0:	d013      	beq.n	8000451a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
800044f2:	687b      	ldr	r3, [r7, #4]
800044f4:	681b      	ldr	r3, [r3, #0]
800044f6:	4a1a      	ldr	r2, [pc, #104]	; (80004560 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
800044f8:	4293      	cmp	r3, r2
800044fa:	d00e      	beq.n	8000451a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
800044fc:	687b      	ldr	r3, [r7, #4]
800044fe:	681b      	ldr	r3, [r3, #0]
80004500:	4a18      	ldr	r2, [pc, #96]	; (80004564 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
80004502:	4293      	cmp	r3, r2
80004504:	d009      	beq.n	8000451a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
80004506:	687b      	ldr	r3, [r7, #4]
80004508:	681b      	ldr	r3, [r3, #0]
8000450a:	4a17      	ldr	r2, [pc, #92]	; (80004568 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
8000450c:	4293      	cmp	r3, r2
8000450e:	d004      	beq.n	8000451a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
80004510:	687b      	ldr	r3, [r7, #4]
80004512:	681b      	ldr	r3, [r3, #0]
80004514:	4a15      	ldr	r2, [pc, #84]	; (8000456c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
80004516:	4293      	cmp	r3, r2
80004518:	d10c      	bne.n	80004534 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
8000451a:	68bb      	ldr	r3, [r7, #8]
8000451c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
80004520:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
80004522:	683b      	ldr	r3, [r7, #0]
80004524:	685b      	ldr	r3, [r3, #4]
80004526:	68ba      	ldr	r2, [r7, #8]
80004528:	4313      	orrs	r3, r2
8000452a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
8000452c:	687b      	ldr	r3, [r7, #4]
8000452e:	681b      	ldr	r3, [r3, #0]
80004530:	68ba      	ldr	r2, [r7, #8]
80004532:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
80004534:	687b      	ldr	r3, [r7, #4]
80004536:	2201      	movs	r2, #1
80004538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
8000453c:	687b      	ldr	r3, [r7, #4]
8000453e:	2200      	movs	r2, #0
80004540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
80004544:	2300      	movs	r3, #0
}
80004546:	4618      	mov	r0, r3
80004548:	3714      	adds	r7, #20
8000454a:	46bd      	mov	sp, r7
8000454c:	f85d 7b04 	ldr.w	r7, [sp], #4
80004550:	4770      	bx	lr
80004552:	bf00      	nop
80004554:	40010000 	.word	0x40010000
80004558:	40000400 	.word	0x40000400
8000455c:	40000800 	.word	0x40000800
80004560:	40000c00 	.word	0x40000c00
80004564:	40010400 	.word	0x40010400
80004568:	40014000 	.word	0x40014000
8000456c:	40001800 	.word	0x40001800

80004570 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
80004570:	b480      	push	{r7}
80004572:	b085      	sub	sp, #20
80004574:	af00      	add	r7, sp, #0
80004576:	6078      	str	r0, [r7, #4]
80004578:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
8000457a:	2300      	movs	r3, #0
8000457c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
8000457e:	687b      	ldr	r3, [r7, #4]
80004580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
80004584:	2b01      	cmp	r3, #1
80004586:	d101      	bne.n	8000458c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
80004588:	2302      	movs	r3, #2
8000458a:	e03d      	b.n	80004608 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
8000458c:	687b      	ldr	r3, [r7, #4]
8000458e:	2201      	movs	r2, #1
80004590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
80004594:	68fb      	ldr	r3, [r7, #12]
80004596:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
8000459a:	683b      	ldr	r3, [r7, #0]
8000459c:	68db      	ldr	r3, [r3, #12]
8000459e:	4313      	orrs	r3, r2
800045a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
800045a2:	68fb      	ldr	r3, [r7, #12]
800045a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
800045a8:	683b      	ldr	r3, [r7, #0]
800045aa:	689b      	ldr	r3, [r3, #8]
800045ac:	4313      	orrs	r3, r2
800045ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
800045b0:	68fb      	ldr	r3, [r7, #12]
800045b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
800045b6:	683b      	ldr	r3, [r7, #0]
800045b8:	685b      	ldr	r3, [r3, #4]
800045ba:	4313      	orrs	r3, r2
800045bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
800045be:	68fb      	ldr	r3, [r7, #12]
800045c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
800045c4:	683b      	ldr	r3, [r7, #0]
800045c6:	681b      	ldr	r3, [r3, #0]
800045c8:	4313      	orrs	r3, r2
800045ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
800045cc:	68fb      	ldr	r3, [r7, #12]
800045ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
800045d2:	683b      	ldr	r3, [r7, #0]
800045d4:	691b      	ldr	r3, [r3, #16]
800045d6:	4313      	orrs	r3, r2
800045d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
800045da:	68fb      	ldr	r3, [r7, #12]
800045dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
800045e0:	683b      	ldr	r3, [r7, #0]
800045e2:	695b      	ldr	r3, [r3, #20]
800045e4:	4313      	orrs	r3, r2
800045e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
800045e8:	68fb      	ldr	r3, [r7, #12]
800045ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
800045ee:	683b      	ldr	r3, [r7, #0]
800045f0:	69db      	ldr	r3, [r3, #28]
800045f2:	4313      	orrs	r3, r2
800045f4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
800045f6:	687b      	ldr	r3, [r7, #4]
800045f8:	681b      	ldr	r3, [r3, #0]
800045fa:	68fa      	ldr	r2, [r7, #12]
800045fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
800045fe:	687b      	ldr	r3, [r7, #4]
80004600:	2200      	movs	r2, #0
80004602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
80004606:	2300      	movs	r3, #0
}
80004608:	4618      	mov	r0, r3
8000460a:	3714      	adds	r7, #20
8000460c:	46bd      	mov	sp, r7
8000460e:	f85d 7b04 	ldr.w	r7, [sp], #4
80004612:	4770      	bx	lr

80004614 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
80004614:	b480      	push	{r7}
80004616:	b083      	sub	sp, #12
80004618:	af00      	add	r7, sp, #0
8000461a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
8000461c:	bf00      	nop
8000461e:	370c      	adds	r7, #12
80004620:	46bd      	mov	sp, r7
80004622:	f85d 7b04 	ldr.w	r7, [sp], #4
80004626:	4770      	bx	lr

80004628 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
80004628:	b480      	push	{r7}
8000462a:	b083      	sub	sp, #12
8000462c:	af00      	add	r7, sp, #0
8000462e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
80004630:	bf00      	nop
80004632:	370c      	adds	r7, #12
80004634:	46bd      	mov	sp, r7
80004636:	f85d 7b04 	ldr.w	r7, [sp], #4
8000463a:	4770      	bx	lr

8000463c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
8000463c:	b580      	push	{r7, lr}
8000463e:	b082      	sub	sp, #8
80004640:	af00      	add	r7, sp, #0
80004642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
80004644:	687b      	ldr	r3, [r7, #4]
80004646:	2b00      	cmp	r3, #0
80004648:	d101      	bne.n	8000464e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
8000464a:	2301      	movs	r3, #1
8000464c:	e03f      	b.n	800046ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
8000464e:	687b      	ldr	r3, [r7, #4]
80004650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
80004654:	b2db      	uxtb	r3, r3
80004656:	2b00      	cmp	r3, #0
80004658:	d106      	bne.n	80004668 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
8000465a:	687b      	ldr	r3, [r7, #4]
8000465c:	2200      	movs	r2, #0
8000465e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
80004662:	6878      	ldr	r0, [r7, #4]
80004664:	f7fc fc02 	bl	80000e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
80004668:	687b      	ldr	r3, [r7, #4]
8000466a:	2224      	movs	r2, #36	; 0x24
8000466c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
80004670:	687b      	ldr	r3, [r7, #4]
80004672:	681b      	ldr	r3, [r3, #0]
80004674:	68da      	ldr	r2, [r3, #12]
80004676:	687b      	ldr	r3, [r7, #4]
80004678:	681b      	ldr	r3, [r3, #0]
8000467a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
8000467e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
80004680:	6878      	ldr	r0, [r7, #4]
80004682:	f000 f829 	bl	800046d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
80004686:	687b      	ldr	r3, [r7, #4]
80004688:	681b      	ldr	r3, [r3, #0]
8000468a:	691a      	ldr	r2, [r3, #16]
8000468c:	687b      	ldr	r3, [r7, #4]
8000468e:	681b      	ldr	r3, [r3, #0]
80004690:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
80004694:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
80004696:	687b      	ldr	r3, [r7, #4]
80004698:	681b      	ldr	r3, [r3, #0]
8000469a:	695a      	ldr	r2, [r3, #20]
8000469c:	687b      	ldr	r3, [r7, #4]
8000469e:	681b      	ldr	r3, [r3, #0]
800046a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
800046a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
800046a6:	687b      	ldr	r3, [r7, #4]
800046a8:	681b      	ldr	r3, [r3, #0]
800046aa:	68da      	ldr	r2, [r3, #12]
800046ac:	687b      	ldr	r3, [r7, #4]
800046ae:	681b      	ldr	r3, [r3, #0]
800046b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
800046b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
800046b6:	687b      	ldr	r3, [r7, #4]
800046b8:	2200      	movs	r2, #0
800046ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
800046bc:	687b      	ldr	r3, [r7, #4]
800046be:	2220      	movs	r2, #32
800046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
800046c4:	687b      	ldr	r3, [r7, #4]
800046c6:	2220      	movs	r2, #32
800046c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
800046cc:	2300      	movs	r3, #0
}
800046ce:	4618      	mov	r0, r3
800046d0:	3708      	adds	r7, #8
800046d2:	46bd      	mov	sp, r7
800046d4:	bd80      	pop	{r7, pc}
	...

800046d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
800046d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
800046dc:	b0c0      	sub	sp, #256	; 0x100
800046de:	af00      	add	r7, sp, #0
800046e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
800046e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
800046e8:	681b      	ldr	r3, [r3, #0]
800046ea:	691b      	ldr	r3, [r3, #16]
800046ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
800046f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
800046f4:	68d9      	ldr	r1, [r3, #12]
800046f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
800046fa:	681a      	ldr	r2, [r3, #0]
800046fc:	ea40 0301 	orr.w	r3, r0, r1
80004700:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
80004702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
80004706:	689a      	ldr	r2, [r3, #8]
80004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
8000470c:	691b      	ldr	r3, [r3, #16]
8000470e:	431a      	orrs	r2, r3
80004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
80004714:	695b      	ldr	r3, [r3, #20]
80004716:	431a      	orrs	r2, r3
80004718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
8000471c:	69db      	ldr	r3, [r3, #28]
8000471e:	4313      	orrs	r3, r2
80004720:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
80004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
80004728:	681b      	ldr	r3, [r3, #0]
8000472a:	68db      	ldr	r3, [r3, #12]
8000472c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
80004730:	f021 010c 	bic.w	r1, r1, #12
80004734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
80004738:	681a      	ldr	r2, [r3, #0]
8000473a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
8000473e:	430b      	orrs	r3, r1
80004740:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
80004742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
80004746:	681b      	ldr	r3, [r3, #0]
80004748:	695b      	ldr	r3, [r3, #20]
8000474a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
8000474e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
80004752:	6999      	ldr	r1, [r3, #24]
80004754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
80004758:	681a      	ldr	r2, [r3, #0]
8000475a:	ea40 0301 	orr.w	r3, r0, r1
8000475e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
80004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
80004764:	681a      	ldr	r2, [r3, #0]
80004766:	4b8f      	ldr	r3, [pc, #572]	; (800049a4 <UART_SetConfig+0x2cc>)
80004768:	429a      	cmp	r2, r3
8000476a:	d005      	beq.n	80004778 <UART_SetConfig+0xa0>
8000476c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
80004770:	681a      	ldr	r2, [r3, #0]
80004772:	4b8d      	ldr	r3, [pc, #564]	; (800049a8 <UART_SetConfig+0x2d0>)
80004774:	429a      	cmp	r2, r3
80004776:	d104      	bne.n	80004782 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
80004778:	f7fd fc28 	bl	80001fcc <HAL_RCC_GetPCLK2Freq>
8000477c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
80004780:	e003      	b.n	8000478a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
80004782:	f7fd fc0f 	bl	80001fa4 <HAL_RCC_GetPCLK1Freq>
80004786:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
8000478a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
8000478e:	69db      	ldr	r3, [r3, #28]
80004790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
80004794:	f040 810c 	bne.w	800049b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
80004798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
8000479c:	2200      	movs	r2, #0
8000479e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
800047a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
800047a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
800047aa:	4622      	mov	r2, r4
800047ac:	462b      	mov	r3, r5
800047ae:	1891      	adds	r1, r2, r2
800047b0:	65b9      	str	r1, [r7, #88]	; 0x58
800047b2:	415b      	adcs	r3, r3
800047b4:	65fb      	str	r3, [r7, #92]	; 0x5c
800047b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
800047ba:	4621      	mov	r1, r4
800047bc:	eb12 0801 	adds.w	r8, r2, r1
800047c0:	4629      	mov	r1, r5
800047c2:	eb43 0901 	adc.w	r9, r3, r1
800047c6:	f04f 0200 	mov.w	r2, #0
800047ca:	f04f 0300 	mov.w	r3, #0
800047ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
800047d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
800047d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
800047da:	4690      	mov	r8, r2
800047dc:	4699      	mov	r9, r3
800047de:	4623      	mov	r3, r4
800047e0:	eb18 0303 	adds.w	r3, r8, r3
800047e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
800047e8:	462b      	mov	r3, r5
800047ea:	eb49 0303 	adc.w	r3, r9, r3
800047ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
800047f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
800047f6:	685b      	ldr	r3, [r3, #4]
800047f8:	2200      	movs	r2, #0
800047fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
800047fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
80004802:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
80004806:	460b      	mov	r3, r1
80004808:	18db      	adds	r3, r3, r3
8000480a:	653b      	str	r3, [r7, #80]	; 0x50
8000480c:	4613      	mov	r3, r2
8000480e:	eb42 0303 	adc.w	r3, r2, r3
80004812:	657b      	str	r3, [r7, #84]	; 0x54
80004814:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
80004818:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
8000481c:	f7fb fcf2 	bl	80000204 <__aeabi_uldivmod>
80004820:	4602      	mov	r2, r0
80004822:	460b      	mov	r3, r1
80004824:	4b61      	ldr	r3, [pc, #388]	; (800049ac <UART_SetConfig+0x2d4>)
80004826:	fba3 2302 	umull	r2, r3, r3, r2
8000482a:	095b      	lsrs	r3, r3, #5
8000482c:	011c      	lsls	r4, r3, #4
8000482e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
80004832:	2200      	movs	r2, #0
80004834:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
80004838:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
8000483c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
80004840:	4642      	mov	r2, r8
80004842:	464b      	mov	r3, r9
80004844:	1891      	adds	r1, r2, r2
80004846:	64b9      	str	r1, [r7, #72]	; 0x48
80004848:	415b      	adcs	r3, r3
8000484a:	64fb      	str	r3, [r7, #76]	; 0x4c
8000484c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
80004850:	4641      	mov	r1, r8
80004852:	eb12 0a01 	adds.w	sl, r2, r1
80004856:	4649      	mov	r1, r9
80004858:	eb43 0b01 	adc.w	fp, r3, r1
8000485c:	f04f 0200 	mov.w	r2, #0
80004860:	f04f 0300 	mov.w	r3, #0
80004864:	ea4f 03cb 	mov.w	r3, fp, lsl #3
80004868:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
8000486c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
80004870:	4692      	mov	sl, r2
80004872:	469b      	mov	fp, r3
80004874:	4643      	mov	r3, r8
80004876:	eb1a 0303 	adds.w	r3, sl, r3
8000487a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
8000487e:	464b      	mov	r3, r9
80004880:	eb4b 0303 	adc.w	r3, fp, r3
80004884:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
80004888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
8000488c:	685b      	ldr	r3, [r3, #4]
8000488e:	2200      	movs	r2, #0
80004890:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
80004894:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
80004898:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
8000489c:	460b      	mov	r3, r1
8000489e:	18db      	adds	r3, r3, r3
800048a0:	643b      	str	r3, [r7, #64]	; 0x40
800048a2:	4613      	mov	r3, r2
800048a4:	eb42 0303 	adc.w	r3, r2, r3
800048a8:	647b      	str	r3, [r7, #68]	; 0x44
800048aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
800048ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
800048b2:	f7fb fca7 	bl	80000204 <__aeabi_uldivmod>
800048b6:	4602      	mov	r2, r0
800048b8:	460b      	mov	r3, r1
800048ba:	4611      	mov	r1, r2
800048bc:	4b3b      	ldr	r3, [pc, #236]	; (800049ac <UART_SetConfig+0x2d4>)
800048be:	fba3 2301 	umull	r2, r3, r3, r1
800048c2:	095b      	lsrs	r3, r3, #5
800048c4:	2264      	movs	r2, #100	; 0x64
800048c6:	fb02 f303 	mul.w	r3, r2, r3
800048ca:	1acb      	subs	r3, r1, r3
800048cc:	00db      	lsls	r3, r3, #3
800048ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
800048d2:	4b36      	ldr	r3, [pc, #216]	; (800049ac <UART_SetConfig+0x2d4>)
800048d4:	fba3 2302 	umull	r2, r3, r3, r2
800048d8:	095b      	lsrs	r3, r3, #5
800048da:	005b      	lsls	r3, r3, #1
800048dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
800048e0:	441c      	add	r4, r3
800048e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
800048e6:	2200      	movs	r2, #0
800048e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
800048ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
800048f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
800048f4:	4642      	mov	r2, r8
800048f6:	464b      	mov	r3, r9
800048f8:	1891      	adds	r1, r2, r2
800048fa:	63b9      	str	r1, [r7, #56]	; 0x38
800048fc:	415b      	adcs	r3, r3
800048fe:	63fb      	str	r3, [r7, #60]	; 0x3c
80004900:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
80004904:	4641      	mov	r1, r8
80004906:	1851      	adds	r1, r2, r1
80004908:	6339      	str	r1, [r7, #48]	; 0x30
8000490a:	4649      	mov	r1, r9
8000490c:	414b      	adcs	r3, r1
8000490e:	637b      	str	r3, [r7, #52]	; 0x34
80004910:	f04f 0200 	mov.w	r2, #0
80004914:	f04f 0300 	mov.w	r3, #0
80004918:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
8000491c:	4659      	mov	r1, fp
8000491e:	00cb      	lsls	r3, r1, #3
80004920:	4651      	mov	r1, sl
80004922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
80004926:	4651      	mov	r1, sl
80004928:	00ca      	lsls	r2, r1, #3
8000492a:	4610      	mov	r0, r2
8000492c:	4619      	mov	r1, r3
8000492e:	4603      	mov	r3, r0
80004930:	4642      	mov	r2, r8
80004932:	189b      	adds	r3, r3, r2
80004934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
80004938:	464b      	mov	r3, r9
8000493a:	460a      	mov	r2, r1
8000493c:	eb42 0303 	adc.w	r3, r2, r3
80004940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
80004944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
80004948:	685b      	ldr	r3, [r3, #4]
8000494a:	2200      	movs	r2, #0
8000494c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
80004950:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
80004954:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
80004958:	460b      	mov	r3, r1
8000495a:	18db      	adds	r3, r3, r3
8000495c:	62bb      	str	r3, [r7, #40]	; 0x28
8000495e:	4613      	mov	r3, r2
80004960:	eb42 0303 	adc.w	r3, r2, r3
80004964:	62fb      	str	r3, [r7, #44]	; 0x2c
80004966:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
8000496a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
8000496e:	f7fb fc49 	bl	80000204 <__aeabi_uldivmod>
80004972:	4602      	mov	r2, r0
80004974:	460b      	mov	r3, r1
80004976:	4b0d      	ldr	r3, [pc, #52]	; (800049ac <UART_SetConfig+0x2d4>)
80004978:	fba3 1302 	umull	r1, r3, r3, r2
8000497c:	095b      	lsrs	r3, r3, #5
8000497e:	2164      	movs	r1, #100	; 0x64
80004980:	fb01 f303 	mul.w	r3, r1, r3
80004984:	1ad3      	subs	r3, r2, r3
80004986:	00db      	lsls	r3, r3, #3
80004988:	3332      	adds	r3, #50	; 0x32
8000498a:	4a08      	ldr	r2, [pc, #32]	; (800049ac <UART_SetConfig+0x2d4>)
8000498c:	fba2 2303 	umull	r2, r3, r2, r3
80004990:	095b      	lsrs	r3, r3, #5
80004992:	f003 0207 	and.w	r2, r3, #7
80004996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
8000499a:	681b      	ldr	r3, [r3, #0]
8000499c:	4422      	add	r2, r4
8000499e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
800049a0:	e106      	b.n	80004bb0 <UART_SetConfig+0x4d8>
800049a2:	bf00      	nop
800049a4:	40011000 	.word	0x40011000
800049a8:	40011400 	.word	0x40011400
800049ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
800049b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
800049b4:	2200      	movs	r2, #0
800049b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
800049ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
800049be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
800049c2:	4642      	mov	r2, r8
800049c4:	464b      	mov	r3, r9
800049c6:	1891      	adds	r1, r2, r2
800049c8:	6239      	str	r1, [r7, #32]
800049ca:	415b      	adcs	r3, r3
800049cc:	627b      	str	r3, [r7, #36]	; 0x24
800049ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
800049d2:	4641      	mov	r1, r8
800049d4:	1854      	adds	r4, r2, r1
800049d6:	4649      	mov	r1, r9
800049d8:	eb43 0501 	adc.w	r5, r3, r1
800049dc:	f04f 0200 	mov.w	r2, #0
800049e0:	f04f 0300 	mov.w	r3, #0
800049e4:	00eb      	lsls	r3, r5, #3
800049e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
800049ea:	00e2      	lsls	r2, r4, #3
800049ec:	4614      	mov	r4, r2
800049ee:	461d      	mov	r5, r3
800049f0:	4643      	mov	r3, r8
800049f2:	18e3      	adds	r3, r4, r3
800049f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
800049f8:	464b      	mov	r3, r9
800049fa:	eb45 0303 	adc.w	r3, r5, r3
800049fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
80004a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
80004a06:	685b      	ldr	r3, [r3, #4]
80004a08:	2200      	movs	r2, #0
80004a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
80004a0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
80004a12:	f04f 0200 	mov.w	r2, #0
80004a16:	f04f 0300 	mov.w	r3, #0
80004a1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
80004a1e:	4629      	mov	r1, r5
80004a20:	008b      	lsls	r3, r1, #2
80004a22:	4621      	mov	r1, r4
80004a24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
80004a28:	4621      	mov	r1, r4
80004a2a:	008a      	lsls	r2, r1, #2
80004a2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
80004a30:	f7fb fbe8 	bl	80000204 <__aeabi_uldivmod>
80004a34:	4602      	mov	r2, r0
80004a36:	460b      	mov	r3, r1
80004a38:	4b60      	ldr	r3, [pc, #384]	; (80004bbc <UART_SetConfig+0x4e4>)
80004a3a:	fba3 2302 	umull	r2, r3, r3, r2
80004a3e:	095b      	lsrs	r3, r3, #5
80004a40:	011c      	lsls	r4, r3, #4
80004a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
80004a46:	2200      	movs	r2, #0
80004a48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
80004a4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
80004a50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
80004a54:	4642      	mov	r2, r8
80004a56:	464b      	mov	r3, r9
80004a58:	1891      	adds	r1, r2, r2
80004a5a:	61b9      	str	r1, [r7, #24]
80004a5c:	415b      	adcs	r3, r3
80004a5e:	61fb      	str	r3, [r7, #28]
80004a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
80004a64:	4641      	mov	r1, r8
80004a66:	1851      	adds	r1, r2, r1
80004a68:	6139      	str	r1, [r7, #16]
80004a6a:	4649      	mov	r1, r9
80004a6c:	414b      	adcs	r3, r1
80004a6e:	617b      	str	r3, [r7, #20]
80004a70:	f04f 0200 	mov.w	r2, #0
80004a74:	f04f 0300 	mov.w	r3, #0
80004a78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
80004a7c:	4659      	mov	r1, fp
80004a7e:	00cb      	lsls	r3, r1, #3
80004a80:	4651      	mov	r1, sl
80004a82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
80004a86:	4651      	mov	r1, sl
80004a88:	00ca      	lsls	r2, r1, #3
80004a8a:	4610      	mov	r0, r2
80004a8c:	4619      	mov	r1, r3
80004a8e:	4603      	mov	r3, r0
80004a90:	4642      	mov	r2, r8
80004a92:	189b      	adds	r3, r3, r2
80004a94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
80004a98:	464b      	mov	r3, r9
80004a9a:	460a      	mov	r2, r1
80004a9c:	eb42 0303 	adc.w	r3, r2, r3
80004aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
80004aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
80004aa8:	685b      	ldr	r3, [r3, #4]
80004aaa:	2200      	movs	r2, #0
80004aac:	67bb      	str	r3, [r7, #120]	; 0x78
80004aae:	67fa      	str	r2, [r7, #124]	; 0x7c
80004ab0:	f04f 0200 	mov.w	r2, #0
80004ab4:	f04f 0300 	mov.w	r3, #0
80004ab8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
80004abc:	4649      	mov	r1, r9
80004abe:	008b      	lsls	r3, r1, #2
80004ac0:	4641      	mov	r1, r8
80004ac2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
80004ac6:	4641      	mov	r1, r8
80004ac8:	008a      	lsls	r2, r1, #2
80004aca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
80004ace:	f7fb fb99 	bl	80000204 <__aeabi_uldivmod>
80004ad2:	4602      	mov	r2, r0
80004ad4:	460b      	mov	r3, r1
80004ad6:	4611      	mov	r1, r2
80004ad8:	4b38      	ldr	r3, [pc, #224]	; (80004bbc <UART_SetConfig+0x4e4>)
80004ada:	fba3 2301 	umull	r2, r3, r3, r1
80004ade:	095b      	lsrs	r3, r3, #5
80004ae0:	2264      	movs	r2, #100	; 0x64
80004ae2:	fb02 f303 	mul.w	r3, r2, r3
80004ae6:	1acb      	subs	r3, r1, r3
80004ae8:	011b      	lsls	r3, r3, #4
80004aea:	3332      	adds	r3, #50	; 0x32
80004aec:	4a33      	ldr	r2, [pc, #204]	; (80004bbc <UART_SetConfig+0x4e4>)
80004aee:	fba2 2303 	umull	r2, r3, r2, r3
80004af2:	095b      	lsrs	r3, r3, #5
80004af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
80004af8:	441c      	add	r4, r3
80004afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
80004afe:	2200      	movs	r2, #0
80004b00:	673b      	str	r3, [r7, #112]	; 0x70
80004b02:	677a      	str	r2, [r7, #116]	; 0x74
80004b04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
80004b08:	4642      	mov	r2, r8
80004b0a:	464b      	mov	r3, r9
80004b0c:	1891      	adds	r1, r2, r2
80004b0e:	60b9      	str	r1, [r7, #8]
80004b10:	415b      	adcs	r3, r3
80004b12:	60fb      	str	r3, [r7, #12]
80004b14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
80004b18:	4641      	mov	r1, r8
80004b1a:	1851      	adds	r1, r2, r1
80004b1c:	6039      	str	r1, [r7, #0]
80004b1e:	4649      	mov	r1, r9
80004b20:	414b      	adcs	r3, r1
80004b22:	607b      	str	r3, [r7, #4]
80004b24:	f04f 0200 	mov.w	r2, #0
80004b28:	f04f 0300 	mov.w	r3, #0
80004b2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
80004b30:	4659      	mov	r1, fp
80004b32:	00cb      	lsls	r3, r1, #3
80004b34:	4651      	mov	r1, sl
80004b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
80004b3a:	4651      	mov	r1, sl
80004b3c:	00ca      	lsls	r2, r1, #3
80004b3e:	4610      	mov	r0, r2
80004b40:	4619      	mov	r1, r3
80004b42:	4603      	mov	r3, r0
80004b44:	4642      	mov	r2, r8
80004b46:	189b      	adds	r3, r3, r2
80004b48:	66bb      	str	r3, [r7, #104]	; 0x68
80004b4a:	464b      	mov	r3, r9
80004b4c:	460a      	mov	r2, r1
80004b4e:	eb42 0303 	adc.w	r3, r2, r3
80004b52:	66fb      	str	r3, [r7, #108]	; 0x6c
80004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
80004b58:	685b      	ldr	r3, [r3, #4]
80004b5a:	2200      	movs	r2, #0
80004b5c:	663b      	str	r3, [r7, #96]	; 0x60
80004b5e:	667a      	str	r2, [r7, #100]	; 0x64
80004b60:	f04f 0200 	mov.w	r2, #0
80004b64:	f04f 0300 	mov.w	r3, #0
80004b68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
80004b6c:	4649      	mov	r1, r9
80004b6e:	008b      	lsls	r3, r1, #2
80004b70:	4641      	mov	r1, r8
80004b72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
80004b76:	4641      	mov	r1, r8
80004b78:	008a      	lsls	r2, r1, #2
80004b7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
80004b7e:	f7fb fb41 	bl	80000204 <__aeabi_uldivmod>
80004b82:	4602      	mov	r2, r0
80004b84:	460b      	mov	r3, r1
80004b86:	4b0d      	ldr	r3, [pc, #52]	; (80004bbc <UART_SetConfig+0x4e4>)
80004b88:	fba3 1302 	umull	r1, r3, r3, r2
80004b8c:	095b      	lsrs	r3, r3, #5
80004b8e:	2164      	movs	r1, #100	; 0x64
80004b90:	fb01 f303 	mul.w	r3, r1, r3
80004b94:	1ad3      	subs	r3, r2, r3
80004b96:	011b      	lsls	r3, r3, #4
80004b98:	3332      	adds	r3, #50	; 0x32
80004b9a:	4a08      	ldr	r2, [pc, #32]	; (80004bbc <UART_SetConfig+0x4e4>)
80004b9c:	fba2 2303 	umull	r2, r3, r2, r3
80004ba0:	095b      	lsrs	r3, r3, #5
80004ba2:	f003 020f 	and.w	r2, r3, #15
80004ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
80004baa:	681b      	ldr	r3, [r3, #0]
80004bac:	4422      	add	r2, r4
80004bae:	609a      	str	r2, [r3, #8]
}
80004bb0:	bf00      	nop
80004bb2:	f507 7780 	add.w	r7, r7, #256	; 0x100
80004bb6:	46bd      	mov	sp, r7
80004bb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
80004bbc:	51eb851f 	.word	0x51eb851f

80004bc0 <memset>:
80004bc0:	4402      	add	r2, r0
80004bc2:	4603      	mov	r3, r0
80004bc4:	4293      	cmp	r3, r2
80004bc6:	d100      	bne.n	80004bca <memset+0xa>
80004bc8:	4770      	bx	lr
80004bca:	f803 1b01 	strb.w	r1, [r3], #1
80004bce:	e7f9      	b.n	80004bc4 <memset+0x4>

80004bd0 <__libc_init_array>:
80004bd0:	b570      	push	{r4, r5, r6, lr}
80004bd2:	4d0d      	ldr	r5, [pc, #52]	; (80004c08 <__libc_init_array+0x38>)
80004bd4:	4c0d      	ldr	r4, [pc, #52]	; (80004c0c <__libc_init_array+0x3c>)
80004bd6:	1b64      	subs	r4, r4, r5
80004bd8:	10a4      	asrs	r4, r4, #2
80004bda:	2600      	movs	r6, #0
80004bdc:	42a6      	cmp	r6, r4
80004bde:	d109      	bne.n	80004bf4 <__libc_init_array+0x24>
80004be0:	4d0b      	ldr	r5, [pc, #44]	; (80004c10 <__libc_init_array+0x40>)
80004be2:	4c0c      	ldr	r4, [pc, #48]	; (80004c14 <__libc_init_array+0x44>)
80004be4:	f000 f818 	bl	80004c18 <_init>
80004be8:	1b64      	subs	r4, r4, r5
80004bea:	10a4      	asrs	r4, r4, #2
80004bec:	2600      	movs	r6, #0
80004bee:	42a6      	cmp	r6, r4
80004bf0:	d105      	bne.n	80004bfe <__libc_init_array+0x2e>
80004bf2:	bd70      	pop	{r4, r5, r6, pc}
80004bf4:	f855 3b04 	ldr.w	r3, [r5], #4
80004bf8:	4798      	blx	r3
80004bfa:	3601      	adds	r6, #1
80004bfc:	e7ee      	b.n	80004bdc <__libc_init_array+0xc>
80004bfe:	f855 3b04 	ldr.w	r3, [r5], #4
80004c02:	4798      	blx	r3
80004c04:	3601      	adds	r6, #1
80004c06:	e7f2      	b.n	80004bee <__libc_init_array+0x1e>
80004c08:	80004c58 	.word	0x80004c58
80004c0c:	80004c58 	.word	0x80004c58
80004c10:	80004c58 	.word	0x80004c58
80004c14:	80004c5c 	.word	0x80004c5c

80004c18 <_init>:
80004c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
80004c1a:	bf00      	nop
80004c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
80004c1e:	bc08      	pop	{r3}
80004c20:	469e      	mov	lr, r3
80004c22:	4770      	bx	lr

80004c24 <_fini>:
80004c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
80004c26:	bf00      	nop
80004c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
80004c2a:	bc08      	pop	{r3}
80004c2c:	469e      	mov	lr, r3
80004c2e:	4770      	bx	lr
